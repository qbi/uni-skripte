% ToDo:
%   + Es sollte Befehle für Klartext und Chiffretext geben, damit die Texte im
%     gesamten Dokument gleich aussehen. z.\,B. \klartext=\texttt\uppercase
%     und \chiffretext=\texttt\lowercase; \MakeUppercase \MakeLowercase
%     \bstv = Buchstabe verschlüsselt
%     \bstu = Buchstabe unverschlüsselt
%     \textv = Text verschlüsselt
%     \textu = Text unverschlüsselt
%     \schlsl = Schlüssel

% Einige zusätzliche Informationen für rubber
%  rubber erkennt nicht, dass die Datei weg kann, daher sagen wir es ihm
% rubber: clean $base.thm
%  rubber soll nach Änderungen an der Datei nochmal bauen
% rubber: watch $base.thm
% rubber: makeidx.tool      xindy
% rubber: makeidx.language  german-din
% rubber: makeidx.modules   indexstyle.xdy
%
% scrreprt trifft am Besten die Bedürfnisse eines Skripts, das ganze wird
% zweiseitig (twoside), d.h. es wird zwischen linker und rechter Seite
% unterschieden, und wir verwenden zwischen den Absätzen einen Abstand
% von einer halben Zeile (halfparskip) und dafür keinen Absatzeinzug,
% wobei die letzte Zeile eines Absatzes zu min. 1/4 leer ist.

\documentclass[halfparskip*,german,draft,twoside]{scrreprt}

\usepackage[l2tabu]{nag}  % nag überprüft den Text auf verältete Befehle
                          % oder solche, die man nicht in LaTeX verwenden
                          % soll -- l2tabu-Checker in LaTeX
\usepackage{ifthen}
\usepackage{makeidx}
\usepackage[final]{graphicx}  % Für Grafiken
\usepackage{color}
\usepackage[draft=false,colorlinks,bookmarksnumbered,linkcolor=blue,breaklinks]{hyperref}

\usepackage[latin1]{inputenc}
\usepackage{ngerman}

\usepackage{lmodern}		% Latin Modern
\usepackage[T1]{fontenc}        % T1-Schriften notwendig für PDFs
\usepackage{textcomp}           % wird benötigt, damit der \textbullet
                                % für itemize in lmodern gefunden wird.

\usepackage[intlimits,leqno]{amsmath}
\usepackage[all,warning]{onlyamsmath}  % warnt bei Verwendung von nicht
                                       % amsmath-Umgebungen z.\,B. $$...$$
\usepackage{amssymb}     % wird für \R, \C,... gebraucht
\usepackage{fixmath}     % ISO-konforme griech. Buchstaben

\usepackage[amsmath,thmmarks,hyperref]{ntheorem} % für die Theorem-Umgebungen
                                                 % (satz, defini, bemerk)
\usepackage{paralist}    % besseres enumerate und itemize und neue
                         % compactenum/compactitem; s. texdoc paralist

\usepackage{svn}         % Zum Auswerten und ordentlichen Darstellen der
                         % SVN-Schlüsselwörter (s. vor \begin{document})
                         % dafür muss in SVN noch das Flag svn:keywords
                         % auf "LastChangedRevision LastChangedDate"
                         % gesetzt werden
\usepackage{ifpdf}       % Erkennung, ob PDF generiert wird; nützlich zur
                         % Unterscheidung bei Grafiken \input{XYZ.pdf_t}
\usepackage{ellipsis}    % Korrektur für \dots
\usepackage{fixltx2e}
\usepackage[final]{microtype} % Verbesserung der Typographie
\usepackage{nicefrac}

% Damit auch die Zeichen im Mathemode in Überschriften fett sind
% <news:lzfyyvx3pt.fsf@tfkp12.physik.uni-erlangen.de>
\addtokomafont{sectioning}{\boldmath}

% nach dem Theoremkopf wird ein Zeilenumbruch eingefügt, die Schrift des
% Körpers ist normal und der Kopf wird fett gesetzt
\theoremstyle{break}
\theorembodyfont{\normalfont}
\theoremheaderfont{\normalfont\bfseries}
\theoremnumbering{arabic}

% Die folgenden Umgebungen werden einzeln nummeriert und am Ende jedes
% Kapitels zurückgesetzt
\newtheorem{bemerk}{Bemerkung}[chapter]
\newtheorem{defini}{Definition}[chapter]
\newtheorem{bsp}{Beispiel}[chapter]

% Die folgenden Theoremumgebungen bekommen keine Nummer
\theoremstyle{nonumberbreak}
\newtheorem{fakt}{Fakt}

\theoremheaderfont{\scshape}
\theorembodyfont{\normalfont}
% Das Zeichen am Ende eines Beweises
\theoremsymbol{\ensuremath{_\blacksquare}}
% \theoremsymbol{q.\,e.\,d.}
\newtheorem{proof}{Beweis:}

% Hier die Definition, wie \autoref die Umgebungen nennen soll, die mit
% \newtheorem definiert wurden
\newcommand*{\bemerkautorefname}{Bemerkung}
\newcommand*{\definiautorefname}{Definition}
\newcommand*{\bspautorefname}{Beispiel}
% Zwischen Unter- und Unterunterabschnitten sollte nicht unterschieden
% werden.
\renewcommand*{\subsectionautorefname}{Abschnitt}
\renewcommand*{\subsubsectionautorefname}{Abschnitt}

\pagestyle{headings}

\newcommand*{\N}{\mathbb{N}}      % natürliche Zahlen
\newcommand*{\Z}{\mathbb{Z}}      % ganze Zahlen

% Wenn irgendwo Unklarheiten zum Inhalt im Skript auftreten, können sie
% einfach mit \help{Ich verstehe das nicht} hervorgehoben werden. Dies
% macht es leichter sie alle zu finden und auch ganz einfach
% auszublenden, indem man den Befehl einfach leer definiert
\newcommand*{\help}[1]{\textcolor{green}{help: #1}}

% \todo ist das gleiche wie \help nur für offene Aufgaben
\newcommand*{\todo}[1]{\textcolor{red}{todo: #1}}

% Um wichtige Begriffe im Text überall gleich vorzuheben (gleiches
% Markup), sollte dieser Befehl verwendet werden. Das Argument wird
% automatisch als Indexeintrag verwendet. Dieser kann aber auch als
% optionales Argument selbst bestimmt werden.
\newcommand*{\highl}[2][]{\textbf{\boldmath{#2}}%
  \ifthenelse{\equal{#1}{}}{\index{#2}}{\index{#1}}%
}

% Definition für Xindy für die Trennung der einzelnen Abschnitte im
% Index. siehe auch die Datei indexstyle.xdy
\newcommand*{\indexsection}{\minisec}

% Um sicherzustellen, dass jeder Betrag-/jede Norm links und rechts die
% Striche bekommt, sind diese Befehle da. Damit kann man nicht die
% rechten Striche vergessen und es wird etwas übersichtlicher. (Vorschlag
% ist aus amsldoc) \abs[\big]{\abs{a}-\abs{b}} \leq \abs{a+b}
\newcommand*{\abs}[2][]{#1\lvert#2#1\rvert}

% Das original Epsilon sieht nicht so toll aus
\renewcommand*{\epsilon}{\varepsilon}
% ... und mancheinem gefällt auch das Phi nicht
\renewcommand*{\phi}{\varphi}

% rubber: depend fmc.mp
\iffalse\includegraphics{fmc.1}\fi
% rubber: clean fmc.1 fmc.2 fmc.3 fmc.4 fmc.5 fmc.6 fmc.7 fmc.8 fmc.9 fmc.10
% rubber: clean fmc.11 fmc.12 fmc.13 fmc.14 fmc.15 fmc.16 fmc.17 fmc.18 fmc.19
% rubber: clean fmc.20 fmc.21 fmc.22 fmc.23 fmc.24 fmc.25 fmc.26 fmc.log
\newcommand*{\fmc}[1]{\startfmc#1\Endfmc}
\newcounter{Zeichen}
\newcommand*{\Endfmc}{}
\makeatletter
\newcommand*{\startfmc}[1]{%
  \ifx#1\Endfmc%
  \else%
    \setcounter{Zeichen}{\the\lccode`#1}%
    \ifthenelse{\theZeichen < 97 \OR \theZeichen>122}{#1}%
               {\addtocounter{Zeichen}{-96}%
                 \includegraphics{fmc.\theZeichen}%
               }%
    \expandafter\startfmc%
  \fi%
}
\makeatother

% Dr. Vogel gebraucht gern das Zeichen |->> für bijektive Abbildungen.
% <news:ehom5s$bk9$1@news.BelWue.DE> <news:ehqi2q$bb4$02$1@news.t-online.com>
\makeatletter
\newcommand*{\mapstoto}{%
  \mathrel{%
    \ifpdf
      \pdfliteral direct{%
        /Span<</ActualText<FEFF2905>>>BDC%
      }%
    \fi
    \mathrel{\mapstochar\twoheadrightarrow}%
    \ifpdf
      \pdfliteral direct{EMC}%
    \fi
  }%
}
\def\@palette@rlap#1#2{%
  \rlap{$#1#2$}%
}
\makeatother

\makeindex

\SVN $LastChangedRevision$
\SVN $LastChangedDate$

\newcounter{cnt}
\setcounter{cnt}{1}
\whiledo{\thecnt < 27}{%
  \DeclareGraphicsRule{.\thecnt}{\ifpdf mps\else eps\fi}{*}{}%
  \stepcounter{cnt}%
}

\DeclareMathOperator{\sgn}{sgn}          % Signum/Vorzeichen

\begin{document}

\title{Kryptologie -- von einer Geheimwissenschaft zu einer Wissenschaft
  von den Geheimnissen}
\author{Dr.\, Jörg Vogel}
\date{WS 2006/07}
\maketitle

\clearpage
\chapter*{Vorwort}

\begin{itshape}
  Dieses Dokument wurde als Skript für die auf der
  Titelseite genannte Vorlesung erstellt und wird jetzt im Rahmen des
  Projekts
  "`\href{http://www.minet.uni-jena.de/~joergs/skripte/}
  {Vorlesungsskripte der Fakultät für Mathematik}
  \href{http://www.minet.uni-jena.de/~joergs/skripte/}{und Informatik}"'
  weiter betreut. Das
  Dokument wurde nach bestem Wissen und Gewissen angefertigt. Denoch
  garantiert weder der auf der Titelseite genannte Dozent, die Personen,
  die an dem Dokument mitgewirkt haben, noch die
  Mitglieder des Projekts für dessen Fehlerfreiheit. Für etwaige Fehler
  und dessen Folgen wird von keiner der genannten Personen eine Haftung
  übernommen. Es steht jeder Person frei, dieses Dokument zu lesen, zu
  verändern oder auf anderen Medien verfügbar zu machen, solange ein
  Verweis auf die Internetadresse des Projekts
  \url{http://www.minet.uni-jena.de/~joergs/skripte/}
  enthalten ist.

  Diese Ausgabe trägt die Versionsnummer~\SVNLastChangedRevision{} und ist vom
  \SVNDate{}. Eine neue Ausgabe könnte auf der Webseite des Projekts verfügbar
  sein.

  Jeder ist dazu aufgerufen Verbesserungen, Erweiterungen und
  Fehlerkorrekturen für das Skript einzureichen bzw. zu melden oder diese
  selbst einzupflegen -- einfach eine E-Mail an die
  \href{mailto:skripte@listserv.uni-jena.de}{Mailingliste
  \texttt{<skripte@listserv.uni-jena.de>}} senden. Weitere Informationen
  sind unter der oben genannten Internetadresse verfügbar.

  Hiermit möchten wir allen Personen, die an diesem Skript mitgewirkt
  haben, vielmals danken:
  \begin{itemize}
   \item \href{mailto:joerg@alea.gnuu.de}{Jörg Sommer
    \texttt{<joerg@alea.gnuu.de>}} (2006)
  \end{itemize}
\end{itshape}

\clearpage
\pdfbookmark[0]{Inhaltsverzeichnis}{inhaltsverzeichnis}
\tableofcontents

\clearpage
\pdfbookmark[0]{Auflistung der Sätze}{theoremlist}
\chapter*{Auflistung der Theoreme}

\pdfbookmark[1]{Sätze}{satzlist}
\section*{Sätze}
\theoremlisttype{optname}
\listtheorems{satz}

\pdfbookmark[1]{Definitionen und Festlegungen}{definilist}
\section*{Definitionen und Festlegungen}
% \theoremlisttype{all}
\listtheorems{defini,festl}

\chapter{Einführung in die Kryptologie}

\begin{defini}[Kryptologie]
  \highl{Kryptologie} ist die Wissenschaft von der sicheren Übertragung
  (und Speicherung) von Nachrichten.

  Dabei unterscheidet man zwei Teilgebiete:
  \begin{itemize}
   \item die \highl{Kryptographie} als die Kunst des Verschlüsselns und
   \item die \highl{Kryptoanalyse} als die Kunst des Codebrechens.
  \end{itemize}
\end{defini}

Die Übertragung der Nachricht erfolgt über \highl{Kanäle}, wie z.\,B. Boten,
Kupferleitungen, Glasfasern oder drahtlose Verbindungen. Dabei kann es zu
verschiedenen Beeinträchtigungen kommen:
\begin{itemize}
 \item zufällige Störungen -- der Boote stürzt in eine Felsspalte
 \item systematische (physikalisch bedingte) Störungen --
 \item passive Beeinträchtigungen -- Abhören von Telefongesprächen,
  Auslesen von Speichermedien
 \item aktive Beeinträchtigungen -- fälschen von Nachrichten und Daten
\end{itemize}
Mit den ersten beiden Punkten beschäftigt sich die \highl{Kodierungstheorie}. Die
passiven und aktiven Beeinträchtigungen sind Gegenstand der Kryptologie.

Aus diesen Beeinträchtigungen ergeben sich Anforderungen an kryptologische
Verfahren:
\begin{itemize}
 \item \highl{Geheimhaltung} -- Lesen der Nachricht für Unbefugte möglichst
  schwierig zu machen
 \item \highl{Authentifizierung} -- Identitätsnachweis des Senders; Empfänger
  weiß, dass die Nachricht nicht von einem Unbefugten stammt
 \item \highl{Integrität} -- Nachricht wurde während der Übertragung nicht
  verändert
 \item \highl{Verbindlichkeit} -- Sender kann nicht leugnen, dass die Nachricht
  von ihm stammt
\end{itemize}

Im Laufe der Zeit hat sich das Anwendungsgebiet für Kryptologie gewandelt.
Früher wurde sie vorwiegend zur Geheimhaltung z.\,B. militärischer Anwendungen
eingesetzt, wärend heute durch den enormen Zuwachs der Kommunikation in
offenen Netzwerken Kryptologie auch verstärkt im zivilen Bereich eingesetzt
wird.

\section{Grundbegriffe}

Der \highl{Sender} --~in der Kryptologie wird dieser mit \highl{Alice}
bezeichnet~-- verschlüsselt seine \highl{Nachricht}\footnote{Nachricht: auch
\highl{Klartext} oder \highl{plain text} genannt} mithilfe eines
\highl[Schlüssel]{Schlüssels} unter Verwendung eines
\highl[Verschlüsselungsverfahren]{Verschlüsselungsverfahrens}%
\footnote{Verschlüsselungsverfahren: auch als \highl{Chiffrierung} oder
  \highl{encryption} bezeichnet} und erhält so einen \highl{Geheimtext}%
\footnote{Geheimtext: auch \highl{Chiffretext} oder \highl{Kryptogramm}
  genannt} für die Nachricht. Diesen sendet er dem Empfänger --~in der
Kryptologie wird dieser mit \highl{Bob} bezeichnet~--, der durch Anwendung
eines \highl[Entschlüsselungsverfahren]{Entschlüsselungsverfahrens}%
\footnote{Entschlüsselungsverfahren: auch als \highl{Dechiffrierung} oder
  \highl{decryption} bezeichnet} wieder die Nachricht rekonstruieren kann.
Die Übertragung des Geheimtexts und die damit verbundenen Probleme wie
Fehlererkennung und -korrektur sind nicht Gegenstand der Kryptologie. Mit
dieser Thematik beschäftigt sich die Codierungstheorie.

\begin{defini}[Kryptosystem]
  Ein \highl{Kryptosystem}~$\mathcal{S}$ ist ein Fünftupel
  $\mathcal{S}=(\mathcal{M}, \mathcal{C}, \mathcal{K}, E, D)$ bestehend aus:
  \begin{itemize}
   \item einer Menge von Nachrichten, die als \highl{Klartextraum}~$\mathcal{M}$
    ($\subseteq\Sigma^{\ast}$) bezeichnet wird; ein Element dieser Menge ist
    eine \highl{Nachricht}~$m\in\mathcal{M}$.

   \item dem \highl{Geheimtextraum}~$\mathcal{C}$ ($\subseteq\Gamma^{\ast}$),
    der Menge aller der verschlüsselten Botschaften~$c\in\mathcal{C}$,

   \item dem \highl{Schlüsselraum} $\mathcal{K}$, wobei jeder
    \highl{Schlüssel} $k\in\mathcal{K}$ ein Paar $k=(k_{e}, k_{d})$ ist, von
    dem $k_{e}$ zur Verschlüsselung und $k_{d}$ zur Entschlüsselung verwendet
    wird.

   \item einem \highl{Verschlüsselungsalgorithmus} $E\colon\mathcal{M}\times
    \mathcal{K}\rightarrow\mathcal{C}$ für den gilt $E(m, k_{e}) = c$,
    wobei für zwei unterschiedliche Nachrichten $m_{1}$ und $m_{2}$ gilt:
    $E(m_{1}, k_{e}) \ne E(m_{2}, k_{e})$ und

   \item einem \highl{Entschlüsselungsalgorithmus} $D\colon \mathcal{C}\times
    \mathcal{K}\rightarrow\mathcal{M}$ mit $D(c, k_{d}) = m$.
  \end{itemize}
\end{defini}

\begin{defini}
  Ein Kryptosystem $\mathcal{S}$ heißt \highl{symmetrisch}, falls $k_{e}=
  k_{d}$ (bzw. $k_{d}$ sich "`leicht"' (polynomiell) aus $k_{e}$ berechnen lässt).

  Ein Kryptosystem $\mathcal{S}$ heißt \highl{asymmetrisch}, falls die
  Kenntnis von $k_{e}$ praktisch nichts über $k_{d}$ aussagt.
\end{defini}

Aus diesen Festlegungen ergeben sich folgende Konsequenzen für die
Kommunikation zwischen Alice und Bob:
\begin{enumerate}
 \item Vor der Übertragung müssen sich beide über das
  Verfahren einigen.
 \item Viele Schlüssel sind eine notwendige Vorraussetzung (großer Schlüsselraum) für die
  Sicherheit eines Verfahrens.
 \item Vor der Übertragung müssen sie sich auf ein
  Schlüsselpaar $k=(k_{e},k_{d})$ einigen.
 \item Der Schlüssel $k_{d}$ muss geheim gehalten werden.
\end{enumerate}

Da für den Austausch des Schlüssels zwischen Alice und Bob eine sichere
Übertragung --~sozusagen eine verschlüsselte Verbindung~-- notwendig ist,
stellt sich die Frage, warum die beiden nicht gleich die Nachricht über diese
sichere Verbindung übertragen.
\begin{itemize}
 \item Im Allgemeinen ist die Nachricht wesentlich länger als der Schlüssel,
  d.\,h. der Schlüsselaustausch kann über andere (langsamere, aber sicherere)
  Kanäle als der Nachrichtenaustausch erfolgen. Alice lässt Bob das Kennwort
  durch einen Boten zukommen und der Austausch der Nachricht geschieht dann
  per E-Mail.

 \item Der Zeitpunkt der Schlüsselübergabe ist frei wählbar. Es können also bei
  einem persönlichen Treffen mehrere Schlüssel für späterere Verbindungen
  vereinbart werden.

 \item Mit demselben Schlüssel lassen sich mehrere Nachrichten verschlüsseln.
\end{itemize}

\begin{defini}[Kerkhoff'sche Prinzip]
  Das \highl{Kerkhoff'sche Prinzip} besagt, dass die \highl{Sicherheit} eines
  Kryptosystems nur von der Geheimhaltung des Schlüssels jedoch nicht von der
  Geheimhaltung des Algorithmus' abhängt.
\end{defini}

% 18.10.2006

\begin{bsp}[praktische Kryptographie]
  Der
  \href{http://de.wikipedia.org/wiki/Freimaurer-Alphabet}{\highl{Freimaurercode}}
  (zweite Zeile) arbeitet ohne Schlüssel. Jeder Buchstabe des Alphabets wird durch
  ein bestimmtes Geheimzeichen ersetzt. Damit ist der Freimaurercode kein
  Kryptosystem, da das Kerkhoff'sche Pinzip verletzt ist: Die Sicherheit
  des Kryptosystems hängt von der Geheimhaltung des Algorithmus' ab.
  \begin{center}\ttfamily\large
    dieser satz ist geheim\\
    \fmc{dieser~satz~ist~geheim}\\
    UZVJVI JRKQ ZJK XVYVZD\\
    TFZZGR EDFY ABX IFFHXY
  \end{center}

  Beim \highl{Caesarcode} (dritte Zeile) wird jeder Buchstabe des Alphabets für sich
  durch den Buchstaben, der $x$ Positionen weiter hinten steht.
  $x\in\{1,2,\dotsc,25\} = \mathcal{K}$ ist der Schlüsel dieses
  Kryptosystems -- im obigen Beispiel ist $x=17$. Jedoch ist diese Art der
  Verschlüsselung nicht sicher. Dazu später mehr.

  Beim \highl{One-Time-Pad} (vierte Zeile) ist ähnlich dem Caesarcode, jedoch
  wird hierbei (unabhängig und gleichverteilt) für jedes einzelne Zeichen der
  Nachricht eine Position $x\in\{0,1,\dotsc,25\}$ gewählt, um die dieses
  verschoben wird. Der Schlüssel für eine Nachricht $m=(m_{1},m_{2},\dotsc,
  m_{n})$ ist also ein Tupel $c=(x_{1},x_{2},\dotsc, x_{n})$ der Länge~$n$.
  Dieses Kryptosystem schützt sich nicht nur durch den großen Schlüsselraum
  $26^{n}$, sondern auch dadurch, dass jeder beliebige Text mit dem geeigneten
  Schlüssel erzeugt werden kann.
\end{bsp}

Zur Einstufung einer \highl{Kryptoanalyse} trifft man die folgende qualitative
Unterscheidungen:
\begin{itemize}
  \item \highl{vollständiges Aufbrechen}\footnote{engl. total break} heißt, dass der Schlüssel $k_{d}$
  entdeckt wird, woraufhin jede Nachricht~$m$, die mit $k_{e}$ verschlüsselt
  wird, entschlüsselt werden kann.

 \item \highl[Deduktion!global]{globale Deduktion}\footnote{engl. global
   deduction} bedeutet, dass ohne
  Kenntniss von $k_{d}$ eine zu $D(\_, k_{d})$ äquivalente Übersetzung
  gefunden wird.

 \item Als \highl[Deduktion!lokal]{lokale Deduktion}\footnote{engl. instance or
   local deduction} bezeichnet man das Finden
  eines Klartextes für einen einzelnen Chiffretext.
\item \highl{Informationsdeduktion}\footnote{information deduction} bedeutet,
  dass einige Informationen über den Schlüssel oder den Klartext gewonnen werden
  können.
\end{itemize}

Ebenso gibt es eine Unterscheidung der verschiedenen Arten eines
\highl[Angriff]{Angriffs} auf ein Kryptosystem:
\begin{description}
 \item[Cyphertext-Only-Attack:] Der Kryptoanalytiker verfügt über eine
  gewisse Menge von Geheimtexten.

 \item[Known-Plaintext-Attack:] Für einen gewissen Chiffretext ist der
  Klartext bekannt.

 \item[Chosen-Plaintext-Attack:] Für einen beliebigen Klartext ist es
  möglich, sich den zugehörigen Chiffretext zu besorgen. (Typisch für
  Public-Key-Verfahren)

  \item[Adaptive-chosen-plaintext-Attack] Spezialfall der obigen
  Attacke. Hier wählt der Kryptoanalytiker einen Klartext basierend
  auf dem Ergebnis der vorigen Verschlüsselung.

  \item[Chosen-Ciphertext-Attack] Verschiedene Chiffrate können
  entschlüsselt werden und es besteht Zugriff zum entschlüsselten Text.

  \item[Chosen-Key-Attack] Man hat Wissen über die Beziehungen
  verschiedener Schlüssel untereinander (i.\,d.\,R. nicht praktisch
  relevant)

 \item[Rubber-Hose-Cryptanalysis] Angriff durch Gewalt/Erpressung/Entführung

 \item[Brute-Force-Attack:] Alle möglichen Schlüssel austesten. Dieses
  Verfahren sollte das effektivste sein.
\end{description}

Ebenso wie Sender und Empfänger durch spezielle Namen in der Krypologie
gekennzeichnet werden, verwendet man auch für einen \highl{Angreifer} einen
speziellen Namen: \highl{Eve} heißt der Angreifer, der jedwede KOmmunikation
mitlesen kann und mit \highl{Mallory} bezeichnet man den Angreifer, der auch
Daten verändern kann.

Abhängig von der \highl{Sicherheit} des Ver-/Entschlüsselungsverfahrens kann
man Kryptosysteme in die Kategorien "`uneingeschränkt sicher"' (z.\,B.
One-Time-Pad), "`praktisch sicher"' (in praktikabler Zeit keine Lösung; die
Tageszeitung von Morgen erst nächste Woche entschlüsseln) und "`unsicher"'
(z.\,B. Caesarcode) einteilen.

Derzeit ist das One-Time-Pad das einzige bekannte, uneingeschränkt sichere
Kryptoverfahren. In der Praxis findet es hauptsächlich im militärischen Bereich
und in hochsicheren Umgebungen Anwendung.

Alle weiteren Kryptosysteme sind mit einer Ciphertext-Only-Attacke angreifbar.
Man probiert einfach jeden möglichen Schlüssel und prüft, ob der resultierende
Klartext eine Bedeutung hat. Eine derartige Attacke nennt man \highl{Brute
Force}, da diese nur mit roher Gewalt (Durchtesten aller Kombinationen)
funktioniert.

\subsection{Beispiel einer praktischen Kryptoanalyse}
Bedeuten "`viele"' Schlüssel "`hohe"' Sicherheit? \textit{Ansatz}:
Anstelle der Verschiebung der Buchstaben (beim Caesarcode) betrachten wir
eine Permutation der Buchstaben. -- Diese Zuordnung nennt man
\highl{monoalphabetisch}: Jedem Buchstaben des Klartexts wird ein
Zeichen des Chiffretexts zugeordnet.

Die Klartextbuchstaben: a b c d \dots x y z\\
Permutation (der Schlüssel): V J C E \dots A H D

Wieviele Schlüssel gibt es? $26! = 403\,291\,461\,126\,605\,635\,584\,000\,000$

Trotz dieses großen Schlüsselraums ist es möglich die Verschlüsselung zu
brechen.

\highl{Häufigkeitsanalyse:}
\begin{enumerate}[1.\,{Schritt:}]
 \item Buchstaben zählen:
  \texttt{C}: 62-mal, \texttt{Z}: 31-mal, \texttt{T}: 29-mal, \texttt{A}:
  27-mal, \texttt{F}: 22-mal, \texttt{L}: 20-mal, \texttt{J}: 19-mal, \dots

  \begin{table}
    \centering
    \begin{tabular}{cc*{3}{||cc}}
      Bst. & Wsk. & Bst. & Wsk. & Bst. & Wsk. & Bst. & Wsk.\\
      \hline
      E & 17,40\,\% & D & 5,08\,\% & O & 2,51\,\% & V & 0,67\,\%\\
      N & 9,78\,\%  & H & 4,76\,\% & B & 1,89\,\% & ß & 0,31\,\%\\
      I & 7,55\,\%  & U & 4,35\,\% & W & 1,89\,\% & J & 0,27\,\%\\
      S & 7,27\,\%  & L & 3,44\,\% & F & 1,66\,\% & Y & 0,04\,\%\\
      R & 7,00\,\%  & C & 3,06\,\% & K & 1,21\,\% & X & 0,03\,\%\\
      A & 6,51\,\%  & G & 3,01\,\% & Z & 1,13\,\% & Q & 0,02\,\%\\
      T & 6,15\,\%  & M & 2,53\,\% & P & 0,79\,\% & \\
    \end{tabular}
    \parbox{12cm}{
      \caption{Häufigkeitsverteilung der Buchstaben der deutschen
        Sprache. Die Buchstaben ä, ö, ü wurden wie ae, oe, ue gezählt.
        \textit{Quelle:
        \href{http://de.wikipedia.org/wiki/Buchstabenh\%C3\%A4ufigkeit}%
             {Wikipedia}}}}
    \label{tab:buchswsk}
  \end{table}

 \item Häufige Buchstaben ersetzen: \texttt{C} entspricht
  \texttt{e}.

  Da die Zeichenfolge \texttt{ZZ} vorkommt, ist eine weiterer Ansatz,
  dass das \texttt{Z} dem \texttt{n} entspricht

  Aus den Teilen \texttt{CHZ} (\texttt{eHn}) und \texttt{CHZCZ}
  (\texttt{eHnen}) kann man schließen, dass das \texttt{H} dem \texttt{i}
  entspricht.

  Auffällig ist die Häufung des Wortes \texttt{CT} (\texttt{eT}). Dies
  könnte \texttt{er} oder \texttt{es} sein.

  Ebenso fällt das Wort \texttt{LCT} auf. Möglich: \texttt{der} oder
  \texttt{des}. Da "`der"' häufiger in deutschen Texten vorkommt,
  verwenden wir \texttt{r} für \texttt{T} und \texttt{d} für \texttt{L}.

 \item Lücken schließen:
  \begin{itemize}
   \item \texttt{iUn} ist sehr wahrscheinlich \texttt{ihn}; \texttt{U}
    entspricht \texttt{h}.

   \item \texttt{eJ} ist nicht \texttt{er} oder \texttt{ei} (da
    \texttt{r} und \texttt{i} schon vergeben), also \texttt{es};
    \texttt{J} entspricht \texttt{s}

   \item \texttt{dAJJ} ist \texttt{dass}; \texttt{A} ist \texttt{a}

   \item \texttt{UAFFe} ist \texttt{haFFe}, also \texttt{hatte};
    \texttt{F} ist \texttt{t}

   \item Erster Teilsatz: "`es hatte ein Wann einen eseN,"'; Aus dem
    Kontext folgt: \texttt{W} entspricht \texttt{m} und \texttt{N} ist
    \texttt{e}.

   \item weiter: "`der sDhOn LauGe Sahre die saeDVe"'; \texttt{D}
    entspricht \texttt{c}, \texttt{O} ist \texttt{o}, \texttt{G} ist
    \texttt{g} und \texttt{S} ist \texttt{j} und \texttt{V} ist \texttt{k}.
  \end{itemize}
\end{enumerate}

% 23. Okt. 2006

\section{Klassische symmetrische Verfahren}

symbolisch: Zwei identische (daher symmetrisch) Schlüssel -- einer beim
Empfänger, einer beim Sender --, die beide eine Schatzkiste öffnen.

2 Unterscheidungsmerkmale:
\begin{enumerate}
 \item \highl{Substitution} vs. \highl{Translation}
  \begin{description}
   \item[Substitution]
    \begin{itemize}
     \item jeder Buchstabe wird durch ein Geheimtextalphabet
      verschlüsselt.
     \item jeder Buchstabe an seinem Platz
    \end{itemize}

   \item[Translation]
    \begin{itemize}
     \item jeder Buchstabe seine Gestalt
     \item die Buchstaben ändern ihre Position
    \end{itemize}
  \end{description}

  heute: Verallgemeinerung durch Kombination beider "`Urformen"'.

 \item \highl{Stromchiffre} vs. \highl{Blockchiffre}
  \begin{description}
   \item[Stromchiffren]
    \begin{itemize}
     \item jeder Buchstabe wird einzeln für sich verschlüsselt

     \item häufig wird für eine Nachricht $m=m_{1}m_{2}\dotso m_{n}$ und
      einen Anfangsschlüssel $k$ ein "`Strom von Schlüsseln"'
      $k_{1},k_{2},\dotsc, k_{n}$ erzeugt.
    \end{itemize}

   \item[Blockchiffren]
    \begin{itemize}
     \item Aufteilung des Klartextes in (längere) Blöcke, die
      verschlüsselt werden
    \end{itemize}
  \end{description}
\end{enumerate}

\chapter{Substitionen}

Substitutionen werden unterschieden als:
\begin{enumerate}
 \item \highl{monoalphabetisch}: jeder Buchstabe des Klartextalphabets
  wird stets durch denselben Buchstaben des Geheimtextalphabets ersetzt

 \item \highl{polyalphabetisch} sonst
\end{enumerate}

\section{Monoalphabetische Substitutionen}

O.\,B.\,d.\,A. entspricht das Klartextalphabet $\Sigma$ dem Geheimtextalphabet $\Gamma$.
Wir legen uns weiter auf das Beispielalphabet $\{a,b,c,\dotsc,x,y,z\}$ fest
und schreiben es in der Form $X=\{0,1,2,\dotsc,\linebreak[1] 23,24,25\}$. Dann gilt:
$\abs{X} = 26$. Für $\abs{X}=n$ denken wir uns $X=\{0,1,2,\dotsc, n-2,\linebreak[1] n-1\}$.

\subsection{Verschlüsselungsverfahren}

Eine \highl{Verschlüssung} in diesem Rahmen ist eine Permution $\pi\colon X
\mapstoto X$ (Schlüssel). Aus einer Nachricht $m=m_{1}m_{2}\dotso m_{k}$ wird
der Geheimtext $c=\pi(m_{1})\pi(m_{2})\dotso \pi(m_{k})$. Es gibt hier $n!$
verschiedene Schlüssel, aber wir wissen bereits, dass dieses Verfahren
krypographisch auf Grund der \highl{Häufigkeitsverteilung} auch bei
\highl{Ciphertext-Only-Attakten} unsicher ist.

\subsection{Verschiebechiffre (Caesar)}

\begin{description}
 \item[Algorithmus:] $x\in X, x \mapsto x+1 \pmod{n}$
 \item[Schlüssel:] $i\in\{0,1,2,\dotsc,25\} = X$
 \item[Nachricht:] $m=m_{1}m_{2}\dotso m_{k}$
 \item[Geheimtext:] $c= (m_{1}+i \pmod{n}) (m_{2}+i \pmod{n}) \dotso (m_{k}+i
  \pmod{n}) = c_{1} c_{2} \dotso c_{k}$
 \item[Entschlüsselung:] $y\in X\colon y \mapsto y-1 \pmod{n}$ und es gilt: $m=
  (c_{1}-i \pmod{n}) (c_{2}-i \pmod{n}) \dotso (c_{k}-i \pmod{n}) = m_{1}
  m_{2}\dotso m_{k}$
\end{description}

Das Verfahren hat den Nachteil, das nur wenige ($n$) Schlüssel verfügbar sind
und das die Verschlüsselung gebrochen ist, wenn \textit{ein} Buchstabe übersetzt
ist.

Dies gibt Anlass zu folgender Verallgemeinerung.

\subsection{Tauschchiffren (affine Chiffren)}
\begin{description}
 \item[Algorithmus] $x\in X\colon x\mapsto a\cdot x+b \pmod{n}$
 \item[Schlüssel:] $(a,b), a, b\in X$ mit der Forderung, dass die Zuordnung
  bijektiv ist!

  Dazu muss gelten: $a$ und $n$ sind teilerfremd!

  (Beispiel: $n=26, a=13, b=0$ $E(2) = 13\cdot 2+0 \pmod{26} = 0 = 13 \cdot 0
  +0 \pmod{26} = E(0)$)
\end{description}

Es gibt also $\phi(n)$ Möglichkeiten $a$ zu wählen und insgesamt $\phi(n)\cdot
n$ Schlüssel $(a,b)$.

\texttt{text} = $19~04~23~19 \mapsto 04~07~24~04$ = \texttt{EHYE}, mit
$x\mapsto 5x+13$

Nachteile:
\begin{itemize}
 \item Verschlüsselung ist gekackt, wenn \textit{zwei} Buchstaben übersetzt
  sind.
 \item Häufigkeitsverteilung der natürlichen Sprache.
\end{itemize}

\section{Homophone Substitutionen}

\highl{Homophone Substitutionen} versuchen die strukturelle Schwäche der
monoalphabetischen Verschlüsselung, die durch die Häufigkeitsverteilung
der Buchstaben bei natürlichen Sprachen gegeben ist, aufzuheben.

Dazu führt man ein \textit{neues} und \textit{größeres} Geheimtextalphabet $Y$
und eine Abbildung $f\colon X\mapsto \mathfrak{P}(Y)$ ein, wobei verschiedene
Buchstaben disjunkten Teilmengen entsprechen. Für eine Nachricht
$m=m_{1}m_{2}\dotso m_{k}$ ist der Geheimtext $c=c_{1}c_{2}\dotso c_{k}$,
wobei $c_{i}$ zufällig aus $f(m_{i})$ gewäht wird. (Italien um 1400).

\begin{bsp}
  Für das Klartextalphabet $X=\{a,b,c\}$, wobei die Buchstaben mit den
  Wahrscheinlichkeiten 0,5\,\%, 0,35\,\% und 0,15\,\% vorkommen, verwenden wir das
  Geheimalphabet $Y=\{0,1,\dotsc,7\}$. Dazu definieren wir die Abbildung $f$
  wie folgt
  \begin{gather*}
    f(x) =
       \begin{cases}
         \{0, 3, 4, 7\} &\colon x= a\\
         \{1, 5, 6\} &\colon x=b\\
         \{2\} &\colon x=c
       \end{cases}
  \end{gather*}

  Der Buchstabe $b$ wird also durch die drei Zeichen 1, 5 und 6 codiert. Das
  Wort cbba könnte z.\,B. als 2514 oder 2663 verschlüsselt werden.
\end{bsp}

Der Vorteil einer solchen homophonen Substitution besteht darin, dass die
Häufigkeitsverteilung der Klartextbuchstaben zerstört wird, wenn für alle
$x\in X$, wobei $p(x)$ die relative Häufigkeit ist, mit der der Buchstabe $x$
in Texten auftritt, $f(x)$ so gewählt wird, dass $\frac{p(x)}{\abs{f(x)}}$ für
alle $x$ annähernd gleich ist!

Der Effekt des Ganzen ist, dass im Geheimtext alle Buchstaben des
Geheimtextalphabets~$Y$ etwa gleichwahrscheinlich auftreten!

\begin{bemerk}
  Es gibt ein homophones Verschlüsselungsverfahren mit folgender Eigenschaft:
  Für jeden Geheimtext~$c$ gibt es mindestens zwei verschiedene Schlüssel, die
  $c$ in zwei verschiedene, sinnvolle Klartexte überführen.
\end{bemerk}

\begin{table}
  \centering
  \begin{tabular}{c|*{6}{c}}
     & $x_{1}$ & $x_{2}$ & \dots & $x_{i}$ & \dots & $x_{n}$\\
    \hline
    $x_{1}$ & $y_{\frac{n^{2}}{9}}$ & $y_{\frac{7n^{2}}{8}}$ &
       \dots & $y_{\frac{n^{2}}{4}}$ & \dots & $y_{\frac{n^{2}}{2}}$\\
    $x_{2}$ & $y_{n^{2}}$ & $\ddots$\\
    \vdots &\\
    $x_{j}$ &\\
    \vdots & & & & & $\ddots$ & \vdots\\
    $x_{n}$ & & & & & \dots & $y_{\frac{n^{2}}{12}}$
  \end{tabular}
  \caption{Zuordnung von $n$ Zeichen des Klartextalph. auf $n^{2}$
    Zeichen des Geheimalph.}
  \label{tab:1}
\end{table}

Wie funktioniert dies? Das Klartextalphabet sei $X$ (mit $\abs{X}=n$) und
$Y$ (mit $\abs{Y}=n^{2}$) das Geheimtextalphabet. Der Schlüsselraum wird
beschrieben durch eine $n\times n$-Matrix. Die Zeilen und Spalten werden mit
den Buchstaben aus $X$ indiziert und die Eintragungen sind die (zufällig
angeordneten) Buchstaben von $Y$. Siehe \autoref{tab:1}. Wir definieren zwei
Abbildungen:
\begin{align*}
  f_{1}(x_{j}) &= \{ y\in Y\colon y \text{~steht in der $j$-ten Zeile} \}\\
  f_{2}(x_{i}) &= \{ y\in Y\colon y \text{~steht in der $i$-ten Spalte} \}
\end{align*}

Es sei $m=m_{1}m_{2}\dotso m_{k}$ der zu verschlüsselnde Klartext und
$l'=l_{1}'l_{2}'\dotso l_{k}'$ ein weiterer sinnvoller Klartext gleicher Länge.

Als Verschlüsselung für $m_{i}$ verwenden wir den Eintrag in der Matrix, der
im Schnittpunkt von $m_{i}=x_{r}$ und $l_{i}=x_{s}$ ($r$-ter Zeile und $s$-ter
Spalte) liegt.
\begin{gather*}
  m_{i}\mapsto c_{i}\in f_{1}(m_{i}) \cap f_{2}(l_{i})
\end{gather*}

Ein \highl{Brute-force-Angriff} bleibt bei solch einer Verschlüsselung
prinzipell wirkungslos, weil jeder Geheimtext in zwei verschiedene,
\textit{sinnvolle} Klartexte übersetzt werden kann!

Jedoch bleibt weiterhin der Nachteil bestehen, dass für alle $x\in X$ ist
$\abs{f(x)}$ gleich groß ist. Damit die Forderung, dass $\frac{p(x)}%
{\abs{f(x)}}$ für alle $x$ annähernd gleich ist, verletzt. Aber die Idee ist,
dass der Angreifer nicht sagen kann, welcher der beiden konkurrierenden
Klartexte der richtige ist.

% 25. 10. 2006

\begin{bsp}
  Das Klartextalphabet $X$ sei das deutsche Alphabet und wir wählen als
  Geheimtextalphabet $Y=\{00, 01, \dotsc, 10,11,\dotsc,99\}$
  ($\abs{Y}=100$). Die Zuordnung $f\colon X\rightarrow
  \mathfrak{P}(Y)$ wählen wir so, dass gilt: Für alle Buchstaben $x\in X$ ist $\abs{f(x)}\approx
  p(x)\cdot 100$.

  In der Tabelle mit Häufigkeiten der Buchstaben \autoref{tab:buchswsk} sehen
  wir, dass z.\,B. \texttt{c} mit der Wahrscheinlichkeit 3,06\,\% auftritt.
  Also wählen wir zufällig für \texttt{c} drei Zeichen aus $Y$, z.\,B. $07, 23, 42$.
\end{bsp}

\subsection{Ansatz zur Kryptoanalyse einer homophonen Verschlüsselung}

Eine weitere Idee für einen Angriff ist andere Unregelmäßigkeiten --~neben der
Häufigkeitsverteileung der Buchstaben~-- in der deutschen Sprache zu finden.
Dazu betrachten wir sogenannte \highl{Digramme} (Zweierfolgen von Buchstaben)
in Texten. Dafür gibt es insgesamt $2^{26}$ mögliche Paarungen. Beispiele für
Digramme sind \textit{en} und \textit{er}, die mit einer Wahrscheinlichkeit
von ca.~4\,\% in deutschen Texten auftreten. Das Digramm \textit{ch} tritt mit
einer Wahrscheinlichkeit von ca.~2,75\,\% und die Digramme \textit{de},
\textit{te}, \textit{nd}, \textit{ei}, \textit{ie}, \textit{es}, \textit{in}
treten mit der Wahrscheinlichkeit von ca.~2\,\% auf.

Damit haben wir bereits eine Anomalie gefunden. Wärend die Buchstaben
\textit{e} und \textit{n} häufig auftreten und auch das Digramm aus beiden
\textit{en} häufig auftritt, ist es im Fall von \textit{c}, \textit{h} und
\textit{ch} nicht so. Die einzelnen Buchstaben sind recht selten (siehe
\autoref{tab:buchswsk}), das Digramm jedoch tritt sehr häufig auf.

Ausgangspunkt: Verschlüsselung von \glq{}c\grq{}. Es $\abs{f(c)} =k$
(z.\,B. $k=3$) Dann müssen (etwa) folgende Relationen erfüllt sein:
$\abs{f(\mathtt{e})}\approx 6k, \abs{f(\mathtt{n})} \approx 3k,
\abs{f(\mathrm{i})} \approx 2\mathord{,}5k, \abs{f(\mathrm{r})} \approx
2\mathord{,}5k$

"`en"' wird auf $6k\cdot 3k = 18k^{2}$ verschiedene Weisen verschlüsselt.
"`ch"' wird auf $k\cdot 1\mathord{,}5k = 1\mathord{,}5k^{2}$ verschiedene Weisen verschlüsselt.

Ein Digramm, dass "`en"' verschlüsselt, tritt mit einer Häufigkeit von
$\frac{4\,\%}{18}\approx 0\mathord{,}25\,\%$ auf. Für "`ch"' ist die Häufigkeit
$\frac{2\mathord{,}5\,\%}{1\mathord{,}5\,\%}\approx 1\mathord{,}6\,\%$.

Dies ist ein Ansatz zunächst die Verschlüsselung für \textit{c} und
\textit{h} zu knacken. Vorraussetzung für einen solchen Angriff ist aber
ein wirklich langer Geheimtext!

\section{Polyalphabetische Verschlüssung}

Polyalphabetische Verschlüssung hat ebenfalls das Ziel, die Häufigkeit
der Buchstaben zu verwischen. Ein prominentes Beispiel ist
\highl{Vigenère-Chiffre} von dem franz. Diplomat Blaise Vigenère (16.\,Jh.),
die erst im 19.\,Jahrhundert gebrochen wurde.

\begin{table}
  \centering
  \begin{minipage}{14cm}
    \ttfamily\footnotesize
    ~~~%
    \setcounter{cnt}{1}%
    \whiledo{\thecnt < 27}{%
      \alph{cnt}~~%
      \stepcounter{cnt}%
    }\\
    \newcounter{cntline}\setcounter{cntline}{1}%
    \newcounter{cntcol}%
    \setcounter{cnt}{1}%
    \whiledo{\thecntline < 27}{%
      \ifthenelse{\thecnt > 26}{\addtocounter{cnt}{-26}}{}%
      \alph{cnt}~~%
      \setcounter{cntcol}{1}%
      \whiledo{\thecntcol < 27}{%
        \ifthenelse{\thecnt > 26}{\addtocounter{cnt}{-26}}{}%
        \Alph{cnt}~~%
        \stepcounter{cnt}%
        \stepcounter{cntcol}%
      }\\
      \stepcounter{cnt}%
      \stepcounter{cntline}%
    }
  \end{minipage}
  \caption{Das Vigenère-Quadrat.}
  \label{tab:vig}
\end{table}

Die Idee der Vigenère-Chiffre ist, dass jeder Buchstabe mit einer anderen
Caesar-Chiffre verschlüsselt wird, aber nicht zufällig, sondern strukturiert.
Mithilfe eines Schlüsselworts.

\begin{bsp}
  Als Schlüsselwort nehmen wir "`ALLGAEU"' und als Klartext "`emmentaler"'.

  \texttt{emmentaler}\\
  \texttt{ALLGAEUALLGAEU}\\
  \texttt{EXXKNXULPC}

  Verschlüsselung ist einfach.
\end{bsp}

\begin{bemerk}
  Wir sehen folgendes in dem Beispiel: "`e"' wird zu "`E"', "`K"' und
  "`P"'. Umgekehrt entsteht "`X"' aus "`m"' und "`t"'.

  Das ist eine neue Situation.
\end{bemerk}

\subsection{Formale Beschreibung}

zunächst allgemein: ein Klartextalphabet $X$ mit $\abs{X}=n$ (z.\,B.
$n=26$) und $d$ Geheimtextalphabete $Y_{0}, Y_{1}, \dotsc, Y_{d-1}$. Dazu
$d$ bijektive Abbildungen $f_{i}\colon X \mapstoto Y_{i}$
($i=0,\dotsc,d-1$) und eine surjektive Abbildung $h\colon\N\mapsto
\{0,1,\dotsc,d-1\}$ ($h(x)=x\pmod{d}$).

Klartext: $m=m_{1}m_{2}\dotso m_{t}$ ($m_{j}\in X$)\\
Geheimtext: $c= f_{h(1)}(m_{1}) f_{h(2)}(m_{2}) \dotso f_{h(t)}(m_{t}) =
c_{1} c_{2}\dotso c_{t}$\\
Schlüssel: ist bestimmt durch $h$ und $f_{0}, f_{1}, \dotsc, f_{d-1}$. Es
wird der "`Schlüsselstrom"' $f_{h(1)}, f_{h(2)}, \dotsc, f_{h(t)}$
erzeugt. Daher \highl{Stromchiffre}.

jetzt für Vigenère: $X=\{0,1,\dotsc,n-1\}$ und $n=26$
$Y_{0}=Y_{1}=\dotsb= Y_{d} = X$. Dabei ist $d$ die Länge des
Schlüsselworts. $h(x) = x\pmod{d}$ (für jede Position $x\in\N$).
$f_{i}(a) = a+ j_{i}\pmod{n}$ (für $a\in X$) für festes $j_{i}\in X$.
Der Schlüssel ist dabei $j_{0},j_{1},j_{2},\dotsc$.

Effekt: Unterschiedliche Buchstabenhäufigkeiten werden ausgeglichen!

Und weil's so schön war, noch ein
\begin{bsp}
  Statt dem Alphabet $\{a, b, c, \dotsc, x,y,z\}$ verwenden wir
  $X=\{0,1,\dotsc,25\}$. Als Schlüsselwort nehmen wir "`KRYPTO"' ($d=6$
  mit sechs verschidenen Buchstaben) als $10,17,24,15,19,14 =
  j_{0},j_{1}, j_{2}, j_{3}, j_{4}, j_{5}$. Klartext:
  "`kommemorgennicht"' = $10,14,12,12,04,12,14,17,06,04,13,13,08,02,07,19$

  Wir machen uns eine Tabelle.
  \begin{tabular}{l*{6}{|c}|}
    Schlüsselwort & 10 & 17 & 24 & 15 & 19 & 14\\
    \hline
    1.\,Zeile     & 10 & 14 & 12 & 12 & 04 & 12\\
                  & 20 & 05 & 10 & 01 & 23 & 00\\
    \hline\hline
    3.\, Zeile    & 14 & 17 & 06 & 04 & 13 & 13\\
                  & 24 & 08 & 04 & 19 & 06 & 01\\
    \hline\hline
    5.\,Zeile     & 08 & 02 & 07 & 19\\
                  & 18 & 19 & 05 & 08
  \end{tabular}

  Geheimtext: UFKBXAYIETGBSTFI
\end{bsp}

% 2006-10-30

\subsection{Analyse der polyalphabetischen Verschlüsselung}

Angriffspunkt: Die Verschlüsselung ist periodisch. Die Teiltexte sind
monoalphabetische verschlüsselt. Zwei Globalschritte: 1) Bestimmung der
Periode und 2) Entschlüsselung der monoalphabetischen Teiltexte mithilfe der
Häufigkeitsanalyse. Bemerkung: Warum funktioniert die Häufigkeitsanalyse bei
den Teiltexten? Obwohl die Teiltexte keine sinnvollen Texte sind, stellt sich
bei "`langen"' Texten die gleiche Häufigkeitsverteilung der Buchstabe ein.

Bei einer Periodenlänge~$d$ stehen die \highl{Teiltexte} an den Positionen
$k+nd$ mit $1\leq k \leq d$ und $n\in\N_{0}$.

Frage: Wie kann man $d$ bestimmten? Es folgen zwei verschiedene Möglichkeiten:

\subsubsection{Brute-force-Angriff auf polyalphabetische Verschlüsselung}

Teste systematisch $d=1,2,3,\dotsc$

Erstelle Häufigkeitsanalyse für die entstehenden Teiltexte. Falls eine
natürliche Häufigkeitsverteilung auftritt, dann nimm dieses $d$. (Die
Erfahrung zeigt, dass für unpassende $d$ die Häufiggkeitsverteilung nivelliert
ist.).

Dies Funktioniert nur für kleine $d$!

\subsubsection{Kasiski-Test}\index{Kasiski-Test}

(eigentlich von Charles Babbage 1854 entdeckt, aber von Kasiski das erste Mal
veröffentlicht)

Beobachtung: (Typische) Buchstabenfolgen (Teilwörter), die sich im Abstand
eines Vielfachen der Periodenlänge wiederholen, werden auf das gleiche Muster
abgebildet! Für "`genügend lang"' Texte kommt dies auch vor.

Ansatz: Suche alle mehrfach auftretenden Muster der Länge größer zwei.
Bestimme die Abstände, bestimme die Primfaktoren für die Abstände, entscheide
sich für häufig vorkommende Teiler (z.\,B. es treten fast immer 2 und 3 auf,
dann vermute, dass $d=6$ -- ich glaube, man sagt $\operatorname{ggT}$ dazu.),
teste mit dem brute-force-Angriff.

\subsubsection{Friedmann-Test}\index{Friedmann-Test}

von Wilhelm Friedmann (1893--1969); "`Mathematik hilft"', genauer "`Statistik
hilft"', beim Ausrechnen der Periodenlänge. Die entscheidende statistische
Größe ist der Koinzidenzindex~$I(t)$ für einen Text~$t$. Für ein Alphabet
$A=\{a_{1},\dotsc, a_{n}\}$ (mit $\abs{A}=n$) und einen Text~$t$ der
Länge~$l$ ist der \highl{Koinzidenzindex}~$I(t)$ die Wahrscheinlichkeit dafür,
dass an zwei zufällig gewählten Positionen in dem Text der selbe Buchstabe
steht.

Es sei $l_{i}$ die relative Häufigkeit (Anzahl der Vorkommen) des
Buchstaben~$a_{i}$, d.\,h.
\begin{gather*}
  l=\sum_{i=1}^{n} l_{i}
\end{gather*}
Die Anzahl der Mengen von zwei zufällig gewählten Positionen von $t$ ist
$\binom{l}{2}$.

Die Anzahl der Mengen von zwei zufällig gewählten Positionen mit gleichen
Buchstaben beträgt
\begin{gather*}
  \sum_{i=1}^{n} \binom{l_{i}}{2} = \sum_{i=1}^{n} \frac{l_{i}(l_{1}-1)}{2}
\end{gather*}

Jetzt können wir die Wahrscheinlichkeit, dass für eine zufällig gewählte Menge
von zwei zufällig gewählten Positionen zwei gleiche Buchstaben in $t$ stehen,
bestimmen:
\begin{gather*}
  I(t) = \frac{\sum_{i=1}^{n} l_{i}(l_{i}-1)}{l(l-1)}
\end{gather*}

Wir betrachten jetzt das Alphabet $A=\{a,b,c,\dotsc,x,y,z\}$ (codiert durch
$\{0,1,\dotsc,25\}$, also $n=26$). Fakt: für lange deutsche Texte gilt:
$I_{\mathrm{deutsch}}(t) = I_{d} \approx 0\mathord{,}0762$
Diese Größe wurde statistisch ermittelt.

Man stellt dagegen den \highl{Koinzidenzindex} für "`reine Zufallstexte"'. Für
solche Texte gilt: $l_{1}=l_{2}=\dotsb= l_{26}$
\begin{gather*}
  I = \frac{\sum_{i=1}^{26} l_{i}(l_{i}-1)}{l(l-1)}
     = \frac{\sum_{i=1}^{26} l_{i}^{2}}{l(l-1)}
     - \frac{\sum_{i=1}^{26} l_{i}}{l(l-1)}
     = \frac{\sum_{i=1}^{26}l_{i}^{2}}{l(l-1)}
     - \frac{1}{l(l-1)}
     = \frac{\sum_{i=1}^{26} l_{i}^{2}}{l^{2}(1-\frac{1}{l})} - \frac{1}{l-1}
     = \frac{l}{l-1} \sum_{i=1}^{26} \frac{l_{i}^{2}}{l^{2}} - \frac{1}{l-1}
  \intertext{für größe $l$}
  \approx \sum_{i=1}^{26} \frac{l_{i}^{2}}{l^{2}} = \sum_{i=1}^{26}
     \Big(\frac{l_{i}}{l}\Big)^{2} = \sum_{i=1}^{26}
     \Big(\frac{1}{26}\Big)^{2} = \frac{1}{26} = 0\mathord{,}0385 =: I_{z}
\end{gather*}

Fazit: Die Wahrscheinlichkeit an zufällig gewählten Positionen denselben
Buchstaben zu finden, ist in deutschen Texten doppelt so groß wie in
Zufallstexten.

Wir betrachten einen Geheimtext, der das Ergebnis einer polyalphabetischen
Verschlüsselung mit Periode~$d$ (und lang genug) ist. Wir betrachten die
Teiltexte $1, d+1, 2d+1,\dotsc; 2, d+2, 2d+2,\dotsc; 3, d+3,
2d+3,\dotsc;\dotsc$ Wenn die Teiltexte lang genug sind, stellen sich in den
Teiltexten die natürlichen Häufigkeiten ein, aber zwischen den Teiltexten
(d.\,h. von einer Spalte zu einer anderen) zufällige Häufigkeiten. Wählt man
zufällig zwei Positionen in einem Teiltext: $I_{d} = 0\mathord{,}0762$. Wählt
man zufällig zwei Positionen in unterschiedlichen Teiltexten: $I_{z}=
0\mathord{,}0385$.

\begin{bemerk}
  Aussage 2 ("`Wählt man zufällig zwei Positionen in unterschiedlichen
  Teiltexten: $I_{z}= 0\mathord{,}0385$."') tritt dann zu, wenn durch die
  verwendeten verschiedenen Permutationen (Verschiebungen) sich die
  Buchstabenhäufigkeiten nivellieren!
\end{bemerk}

Wir betrachten nun einen Geheimtext~$c$ der Länge~$l$ (mit Periode~$d$). Dann
haben die Teiltexte etwas die Länge~$\frac{l}{d}$. Dann gibt es etwa
\begin{gather*}
  \frac{1}{2} \cdot \frac{l}{d}\cdot (\frac{l}{d}-1)\cdot d = \frac{l(l-d)}{2d}
\end{gather*}
zufällige Paare in ein und demselben Teiltext über alle Teiltexte.

Und es gibt etwa
\begin{gather*}
  \frac{1}{2} \cdot l\cdot (l-\frac{l}{d}) = \frac{l^{2}(d-1)}{2d}
\end{gather*}
(das erste $l$ ist die Anzahl der Möglichkeiten für die erste Position;
$l-\frac{l}{d}$ ist die Anzahl der Möglichkeiten für die zweite Position)
zufällige Paare, die in verschiedenen Teiltexten liegen.

% 2006-11-01

Es wird auf die Tabelle mit der Verschlüsselung von KRYPTO im letzten Beispiel
bezug genommen. Text ist der 1.\,Spalte $1, 1+d, 1+2d$, 2.\,Spalte $2, 2+d,
2+2d$,\dots für große $l$ (im Vergleich zu $d$) ist der Text innerhalb einer
Spalte "`natürlich"' ($I_{d}$) und zwischen den Spalten "`zufällig"' ($I_{z}$).

Positionen innerhalb einer Spalte: $\frac{l(l-d)}{2d}$, Positionen in
verschiedene Spalten: $\frac{l^{2}(d-1)}{2d}$.

Wahrscheinlichkeit für zwei gleiche Buchstaben:
\begin{gather*}
  I(c) \approx \frac{\frac{l(l-d)}{2d}\cdot 0\mathord{,}0762 +
                 \frac{l^{2}(d-1)}{2d}\cdot 0\mathord{,}0385}%
                    { \frac{l(l-1)}{2} }\\
  d \approx \frac{0\mathord{,}0377 l}{(l-1) I(c) + 0\mathord{,}0762 -
     0\mathord{,}0385 l}\\
  I(c) = \frac{\sum_{i=1}^{26} l_{i}(l_{i}-1)}{l(l-1)}
\end{gather*}
Schätzwert für die Periodenlänge~$d$! Vergleich mit Brute-force-Methode und
Kasiski-Test.

Siehe Übung.

\subsection{Möglichkeiten der Verteidigung gegen die Analyse}

Ausgangspunk: Die oben formulierten Tests funktionieren nur für kleine
Periodenlängen ($d\ll l$)! Deshalb: 1) Betrachten von großen Periodenlängen,
technische Realisierung in der \highl{ENIGMA} -- 1920 deutsches Patent mit
drei Rotoren: Periodenlänge $26^{3}$, Einsatz im Krieg mit fünf Rotoren:
Periodenlänge $26^{5}$.

2.\,Ansatz: nicht periodische Verschlüsselung: a) mit einem
"`Schlüsselroman"', d.\,h. aus einem vorher gewählten Buch wird ein Text
ausgewählt -- Schlüssel ist dann (Seite, Zeile, Buchstabe). Aber dann
funktioniert wieder die Häufigkeitsanalyse, weil der Roman wieder die
Charakteristik einer natürlichen Sprache hat. (in diese Kategorie fällt auch
das anhängen des Klartextes an das Schlüsselwort.)

b) mit Zufallstexten, führt wieder zu \highl{One-Time-Pad} und damit zum
absolut sicheren Code -- aber unpraktikabel.

\chapter{Transpositionen}

Klartextbuchstaben bleiben Klartextbuchstaben, ändern aber ihr Position. Die
Häufigkeitsanalyse von Buchstaben als Angriff ist wirkungslos, da der Text nur
permutiert wurde. (Aber Digramme sind ein Versuch wert!)

Verschiedene Ansätze der Verschlüsselung:
\begin{itemize}
 \item \highl{Blocktransposition}: Klartext wird in Blöcker einer festen
  Länge~$k$ eingeteilt. Diese Blöcke werden derselben Permutation~$\pi$
  unterworfen. Beispiel: $a_{i_{1}}a_{i_{2}}\dotso a_{i_{k-1}}a_{i_{k}} =
  a_{i_{\pi(1)}} a_{i_{\pi(2)}}\dotso a_{i_{\pi(k-1)}}a_{\pi(i_{k})}$.

  Analyse:
  \begin{enumerate}[1.\,{Schritt}]
   \item Rate/Bestimme die Blocklänge~$k$
   \item Erzeuge durch geegnete Permutationen bekannte Anagramme. teste an
    anderen Blöcken
  \end{enumerate}
  Dies funktioniert sehr gut.

 \item \highl{Spaltentransposition}:
  \begin{enumerate}
   \item Klartext wird zeilenweise in ein Rechteck der Breite~$k$ eingelesen
    (Höhe hängt von der Länge~$l$ des Klartexts ab)
   \item permutiere die $k$~Spalten (wie oben)
   \item Lies den Geheimtext spaltenweise aus (Im Unterschied zur
    Blocktransposition, wo der Geheimtext zeilenweise ausgelesen wird.)
  \end{enumerate}
\end{itemize}

\begin{bemerk}
  Wenn für die Spaltentransposition die Identität als Permutation verwendet
  wird, hat man die \highl{Gartenzaunchiffre}.
\end{bemerk}

\begin{bsp}
  Klartext:
  \begin{verbatim}
  krypto  rptoky
  logieu  oieulg
  nddate  datend
  nsiche  scheni
  rheita  hitare
  \end{verbatim}
  Das letzte \textit{a} ist Füllmaterial, $k=6, \pi = (1, 5, 3, 6, 4, 2)$

  Text für Blockchiffre: "`rodsh\,piaci\,tetht\,oueea\,ygdie"'
\end{bsp}

Analyse:
\begin{enumerate}[1.\,{Schritt}]
 \item Schätze die Spaltenzahl~$k$, Teiler der Gesamtlänge~$l$
 \item Bestimmung benachbarter Spalten (suche nach Anagrammen)
\end{enumerate}

\begin{bsp}
  Die erste Zeile für $k=11$ enthält zu viele Konsonanten und die letzte Zeile
  zu viele Vokale für einen deutschen Text.

  Idee: 1. und letzte Spalte liegen nebeneinander, da auf ein \textit{c} sehr
  of ein \textit{k} oder ein \textit{h} folgt.

  Die sechse Spalte kommt vor die erste und dann können wir das Wort in der
  ersten Zeile erraten "`zwei"': 3., 5., 1. 6. 2. 4.
\end{bsp}

% 6.11.06

\chapter{Affinlineare Chiffren}

zugrundeliegende algebraische Struktur ist ein kommutativer Ring $R=[R,
+,\cdot]$ mit dem Einselement 1. Ein typisches Beispiel für einen
kommutativen Ring ist der Restklassenring modulo~$k$ ($k\in\N$).

ganze Zahlen $\Z$: $a\equiv_{k} b$ $:\Leftrightarrow$ $\exists l\in\Z\colon
a-b= l\cdot k$.

Restklassen: $a\in\Z\colon [a]_{k} = \{a+lk\colon l\in\Z\} = a+k\cdot\Z$
$[0]_{k}, [1]_{k},\dotsc, [k-1]_{k}$

Faktormenge $\Z_{k}:= \nicefrac{\Z}{\equiv_{k}} = \{ [0]_{k}, [1]_{k},\dotsc,
[k-1]_{k} \}$.

Übertrag der Addition und Multiplikation auf die Restklassen:
\begin{align*}
  [a]_{k} + [b]_{k} &= [a+b]_{k} &&\text{neutrales Element:~}[0]_{k}\\
  [a]_{k} \cdot [b]_{k} &= [a\cdot b]_{k} &&\text{Einselement:~}[1]_{k}\\
\end{align*}

für jedes $[a]_{k}$ gibt es ein entgegengesetztes Element $-[a]_{k} :=
[-a]_{k} = [k-a]_{k}$. Ein Element $[a]_{k}$ heißt \highl{Einheit}
$:\Leftrightarrow$ es existiert ein $[b]_{k}$ mit $[a]_{k} \cdot [b]_{k} =
[1]_{k}$ (in diesem Fall heißt $[b]_{k}$ \highl{invers} zu $[a]_{k}$)

Frage: Wann ist $[a]_{k}$ eine Einheit?

Es gibt ein $[b]_{k}$ mit $[a]_{k}\cdot [b]_{k} = [a\cdot b]_{k} = [1]_{k} =
1+k\Z$, d.\,h. es gibt ein $b$ und ein $l4$, so dass $ab= 1+kl$, also $ab
-kl=1$. Dies gilt gdw. $\operatorname{ggT}(a,b)=1$. Also gibt es in $\Z_{k}$
genau $\phi(k)$ Einheiten. Falls $k=p$ Primzahl, dann gibt es $\phi(p)=p-1$
Einheiten und $\Z_{p}$ ist ein Körper.

Kurzschreibweise: $\Z_{k} = \{0,1,2,\dotsc,k-1\}$

typisches Beispiel in der Kryptologie: $\Z_{26} = \{0,1,\dotsc,25\}$

Im Grunde sind alle endlichen Alphabete kommutative Ringe!

Vorteil: können mit Buchstaben rechnen. dies gilt bereits für die
Caesar-Chiffre.

Es gilt: $\abs{\Z_{26}} = 26, \phi(26) = \phi(2\cdot13) = \phi(2)\cdot\phi(13)
= 1\cdot12$ ($1,3,5,7,9,11,15,17,19,21,23,25$)

lineare Algebra: Wir betrachten $n\times n$-Matrizen, deren Einträge Elemente
aus einem beliebigen kommutativen Ring~$[R,+\cdot]$ sind.
\begin{gather*}
  R^{n\times n} = \{ \begin{pmatrix}
                       r_{11} & r_{12} & \dotso & r_{1n}\\
                       r_{21} & r_{22} & \dotso & r_{2n}\\
                       \vdots & \vdots & & \vdots\\
                       r_{n1} & r_{n2} & \dotso & r_{nn}
                     \end{pmatrix}
                    \colon r_{ij}\in R, 1\leq i,j \leq n\}
\end{gather*}

speziell: $\Z_{k}^{n\times n}$

Matrizenaddition und -multiplikation wie üblich $[R^{n\times n}, +, \cdot]$.

Bemerkung zu Zeilen- und Spaltenvektoren:
\begin{align*}
  R^{1\times n} &= \{ \begin{pmatrix}b_{1} & b_{2} & \dotso & b_{n}\end{pmatrix}
                    \colon b_{i}\in R, 1\leq i \leq n\}\\
  R^{n\times1} &= \{ \begin{pmatrix}b_{1} & b_{2}&\dotso&b_{n}\end{pmatrix}^{T}
                    \colon b_{i}\in R, 1\leq i \leq n\}\\
\end{align*}

Determinanten von quadratischen Matrizen: Es sei $A\in R^{n\times n},
A=(a_{ij})_{n\times n}$

Leibniz:
\begin{gather*}
  \det A := \sum_{\sigma\in S_{n}} \sgn(\sigma) \cdot \prod a_{1}\sigma_{(1)}
     a_{2}\sigma_{(2)} \dotso a_{n}\sigma_{(n)}\\
  \sgn(\sigma) = \begin{cases}
                   +1 &:\text{die Anzahl der Inversionen ist gerade}\\
                   -1 &:\text{die Anzahl der Inversionen ist ungerade}
                 \end{cases}
\end{gather*}

Beispiel: $n=1$ $A=(a_{11}), \sigma=\begin{pmatrix}1\\1\end{pmatrix},
\sgn(\sigma) = +1, \det A = a_{11}$

$n=2$ $A=\begin{pmatrix}a_{11}&a_{12}\\a_{21}&a_{22}\end{pmatrix},
\sigma_{1}=\begin{pmatrix}1&2\\1&2\end{pmatrix}, \sgn(\sigma_{1})=+1,
\sigma_{2}=\begin{pmatrix}1&2\\2&1\end{pmatrix}, \sgn(\sigma_{2})=-1,
\det A = a_{11} a_{22} - a_{12}a_{21}$

Laplace: Entwickeln einer Spalte oder Zeile:
\begin{gather*}
  \det A = \sum_{j=1}^{n} (-1)^{i+j} a_{ij} A_{ij}
\end{gather*}
wobei $A_{ij}$ diejenige Matrix ist, die durch Streichen der $i$-ten Zeile und
$j$-ten Spalte aus $A$ entsteht.

Frage: Wann besitzt $A$ eine Inverse? Es muss gelten:
\begin{gather*}
  A\cdot A^{-1} = A^{-1}\cdot A = E_{n} =
     \begin{pmatrix}
       1\\
       & 1 & & \text{\huge \smash{0}}\\
       & & \ddots\\
       & \text{\huge \smash{0}} & & 1\\
       & & & & 1\
     \end{pmatrix}_{n\times n}
\end{gather*}
$A$ besitzt eine Inverse $A^{-1}$ gdw. $\det A$ eine Inverse in $[R,+,\cdot]$
besitzt gdw. $\det A$ ist Einheit von $[R,+,\cdot]$. Dabei gilt: $A^{-1}\equiv
(\det A)^{-1} B$, wobei $(b_{ij})=(-1)^{i+j}\cdot \det A_{ij}$

Kryptologie: Affinlineare Blockchiffren

Klartext wird codiert in $\Z_{k}$, wird in Blöcke der Länge~$n$ eingeteilt,
die einzeln nach demselben Schema verschlüsselt werden.

Verschlüsselung: es sei $v=\begin{pmatrix}v_{1}& \dotso &v_{n}\end{pmatrix}
\in \Z_{k}^{1\times n}$ gegeben. $v$ wird verschlüsselt mit Hilfe von $A\in
\Z_{k}^{n\times n}$ und $b\in\Z_{k}^{1\times n}$ zu $v\mapsto v\cdot A+b$

Schlüssel: ist ein Paar $(A,b)$

Diese Abbildung ist injektiv gdw. $A$ ein Inverses $A^{-1}$ besitzt gdw.
$\operatorname{ggT}(\det A, k)=1$

Entschlüsselung: für $w=v\cdot A+b$ gilt $v=(w-b)A^{-1}$

Spezialfall: $b=0$: $w=v\cdot A$ liefert \highl{Hill-Chiffre} (1929).

Diese Verschlüsselung ist weder eine Substitution (ein Eintrag $w_{i}$ hängt
im Allgemeinen von allen $v_{1},\dotsc, v_{n}$ ab) noch keine Transposition.

Aber:
\begin{bsp}
  Die \highl{Vigenère-Verschlüsselung} ist affinlinear $v\mapsto v\cdot
  E_{n}+b$ mit der Einheitsmatrix~$E_{n}$ und dem Schlüsselwort~$b$
\end{bsp}

\begin{bsp}
  Blocktranspositionen, Permutationen $\sigma$ von $\{1,\dotsc,n\}$ Wir
  definieren die folgende Permutation $P_{\sigma}=(p_{ij})_{n\times n}$
  \begin{gather*}
    p_{ij} =
       \begin{cases}
         0 & \sigma(i) \ne j\\
         1 & \sigma(i) = j
       \end{cases}
  \end{gather*}
  mit dem Effekt $\begin{pmatrix}v_{1} & v_{2} & \dotso & v_{n}\end{pmatrix}
  P_{\sigma} = \begin{pmatrix}v_{\sigma(1)} & v_{\sigma(2)} & \dotso &
  v_{\sigma(n)}\end{pmatrix}$ und $P_{\sigma}^{-1} = P_{\sigma^{-1}}$
\end{bsp}

% 8.11.06

\section{Kryptoanalyse affin linearer Blockchiffren}

\highl{known-plaintext-attack}: Legen uns fest auf $\Z_{k}$ (als kommutativer
Ring) und Blocklänge~$n$, Schlüssel $(A,b)$ wobei $A\in\Z_{k}^{(n\times n)},
b\in\Z_{k}^{(1\times n)}$ und eine lineare Abbildung $v\mapsto v\cdot A+b$.

Annahme: für $n+1$ Klartextblöcke $m_{0},m_{1},\dotsc, m_{n}$ sind die
Geheimtextblöcke $c_{0},c_{1},\dotsc, c_{n}$ bekannt.

Wir betrachten folgende Matrix~$M$
\begin{gather*}
  M =
     \begin{pmatrix}
       m_{1}-m_{0}\\
       \vdots\\
       m_{n}-m_{0}
     \end{pmatrix}_{n\times n}
\end{gather*}
und nehmen an, dass $\det M$ eine Einheit in $\Z_{k}$ ist!

Außerdem sei
\begin{gather*}
  C =
     \begin{pmatrix}
       c_{1}-c_{0}\\
       \vdots\\
       c_{n}-c_{0}
     \end{pmatrix}
\end{gather*}

\begin{bemerk}
  Dies kommt nicht zu selten vor! (z.\,B. $\phi(26)=12$ ist die Anzahl der
  Einheiten in $\Z_{26}$)
\end{bemerk}

Denn es gilt für folgende Folge $x_{k}:=\frac{\phi(k)}{k}$
$\limsup_{k\rightarrow\infty} x_{k}=1$.

\begin{bemerk}
  In einer halbgeordneten Menge kann man definieren:
  \begin{gather*}
    \limsup_{k\rightarrow\infty} x_{k} = \inf\{ \sup\{ x_{l}\colon l\geq
       k\}\colon k\in\N\}
  \end{gather*}
  In vollständigen Verbänden existiert stets der Limes superior und Limes
  inferior und es gilt $\liminf_{k\rightarrow\infty} x_{k} \leq
  \limsup_{k\rightarrow\infty} x_{k}$.
\end{bemerk}

Es gilt außerdem für $\delta>0$:
\begin{gather*}
  \lim_{k\rightarrow\infty} \frac{\phi(k)}{k^{1-\delta}} = \infty
\end{gather*}

Es gilt: $M\cdot A=C$

\begin{align*}
  c_{0} &= m_{0}A + b\\
  c_{1} &= m_{1}A + b\\
  \dotso\\
  c_{n} &= m_{n} A+b
\end{align*}

\begin{gather*}
  \begin{pmatrix}
    c_{1}-c_{0} = m_{1}A - m_{0} A = (m_{1}-m_{0})A
    \dotso 
  \end{pmatrix}
\end{gather*}
\todo{Die Gleichungen noch ausfüllen.}

Nach Vorraussetzung ($\det M$ ist Einheit in $\Z_{k}$) existiert $M^{-1}$.
Hieraus folgt $A=M^{-1}C$ und weiter $b= c_{0}-m_{0}A$.

\begin{bemerk}
  Für \highl{Hill-Chiffren} (d.\,h. $b=0$) genügen $n$~Paare $(m_{j},c_{j})$.
\end{bemerk}

\begin{bsp}
  Es sei $k=26$ und $n=2$. Der Klartext sei "`HERBST"' und der Geheimtext sei
  "`SOMMER"'. Die Aufgabe ist den Schlüssel $(A,b)$ zu bestimmen.

  Bestimmen wir erstmal $M$: "`HERBST"' = $\underbrace{7~4}_{m_{0}}~
  \underbrace{17~1}_{m_{1}}~ \underbrace{18~19}_{m_{2}}$
  \begin{gather*}
    M =
       \begin{pmatrix}
         m_{1}-m_{0}\\
         m_{2}-m_{0}
       \end{pmatrix}
       =
       \begin{pmatrix}
          10 & 23\\
          11 & 15
        \end{pmatrix}
  \end{gather*}

  Bestimme $C$: "`SOMMER"' = $\underbrace{18~14}_{c_{0}}~
  \underbrace{12~12}_{c_{1}}~ \underbrace{4~17}_{c_{2}}$
  \begin{gather*}
    C =
       \begin{pmatrix}
         c_{1}-c_{0}\\
         c_{2}-c_{0}
       \end{pmatrix}
       =
       \begin{pmatrix}
         20 & 24\\
         12 & 3
       \end{pmatrix}
  \end{gather*}

  3. Schritt: Bestimme die Determinante von $M$
  \begin{gather*}
    \det M =
       \begin{pmatrix}
          10 & 23\\
          11 & 15
        \end{pmatrix} = 10\cdot15 - 23\cdot11 = -103 = 1 + (-4)\cdot26 \equiv
       1\pmod{26}
  \end{gather*}

  4. Schritt: Bestimme $M^{-1} = (\det M)^{-1} \begin{pmatrix}15 & -23\\-11 &
  10\end{pmatrix} \equiv \begin{pmatrix}15 & 3\\15 & 10\end{pmatrix}$.

  5. Schritt bestimme
  \begin{gather*}
    A = M^{-1}\cdot C =
       \begin{pmatrix}15 & 3\\15 & 10\end{pmatrix}\cdot
       \begin{pmatrix}20 & 24\\12 & 3\end{pmatrix}
       = \begin{pmatrix}336 & 369\\420 & 390\end{pmatrix}
       \equiv \begin{pmatrix}24 & 5\\4 & 0\end{pmatrix}
  \end{gather*}

  6. Schritt bestimmt $b$
  \begin{gather*}
    b = c_{0}-m_{0}
       = \begin{pmatrix}18 & 14\end{pmatrix}
       - \begin{pmatrix}7 & 4\end{pmatrix}
       \cdot \begin{pmatrix}24 & 5\\4 & 0\end{pmatrix}
       = \begin{pmatrix}18 & 14\end{pmatrix}
       - \begin{pmatrix}184 & 35\end{pmatrix}
       = \begin{pmatrix}18 & 14\end{pmatrix}
       - \begin{pmatrix}2 & 9\end{pmatrix}
       = \begin{pmatrix}16 & 5\end{pmatrix}
  \end{gather*}
\end{bsp}

\begin{bemerk}
  Alles gut ausrechenbar. Der Schutz besteht nur darin, den Schlüsselraum
  wesentlich größer machen.
\end{bemerk}

% 13.11.06

\section{Blockchiffren -- Allgemeines}

Wir bleiben zunächst noch bei den symmetrischen Verschlüsselungsverfahren und
versuchen durch eine Vergrößerung des Schlüsselraums die Verfahren sicherer zu
machen. Im Folgenden beschränken wir uns auf (rechnerfreundliche) Bitfolgen
$\subset\Z_{2}^{n}$.

Klartexte werden zerlegt in Blöcke einer frei wählbaren aber fixierten
Blocklänge~$n$. Wir betrachten Verschlüsselungen von Blöcken auf der
Metaebene:
\begin{itemize}
 \item gleich Blöcke werden gleich verschlüsselt -- in Analogie zur
  monoalphabetischen Verschlüsselung (lineare affine Blockchiffren) oder
 \item gleiche Blöcke werden in Abhängigkeit von ihrer Position auf
  verschiedene Weise verschlüsselt -- in Analogie zur polyalphabetischen
  Verschlüsselung.
\end{itemize}

Diese Bilder von Blöcken der Länge~$n$ sind wieder Blöcke der Länge~$n$ über
$\Z_{2}$.

Daraus ergibt sich eine maximale Anzahl an Blockchiffren von
\begin{gather*}
  (\underbrace{0,\dotsc,0,0}_{n}), (\underbrace{0,\dotsc,0,1}_{n}),\dotsc,
     (\underbrace{1,1,\dotsc,1}_{n}) -- 2^{n}~\text{Blöcke}\\
  (i_{1},i_{2},\dotsc, i_{n}), (i_{1}',i_{2}',\dotsc,i_{n}'), \dotsc --
     (2^{n})!~\text{Blöcke}\\
  \text{wobei: es gibt ein $\mu$ mit $i_{\mu}\ne i_{\mu}'$}
\end{gather*}

Beispiel: Blocklänge $n=64$

Approximation mithilfe der Stirling-Formel: Die Länge~$l$ eines Schlüssels ist
gegeben durch $l=\log (2^{n})!$.
\begin{align*}
  (2^{n})! &\approx \sqrt{\pi\cdot (2^{n+1})} \cdot (\frac{2^{n}}{l})^{2^{n}}\\
  l &\approx \log \big(\sqrt{\pi\cdot (2^{n+1})} \cdot
     (\frac{2^{n}}{l})^{2^{n}} \big)
     \approx 2^{n} (n-1\mathord{,}5) \approx 2^{n}\cdot n
\end{align*}

für $n=64$ bedeutet dies: $l\approx 2^{64}\cdot 2^{6} = 2^{70} \approx
10^{21}$. Dies bedeutet, die Speicherung \textit{eines} solchen Schlüssels
erfordert 1~Mrd. Festplatten mit je 100\,GB. Eine Konsequenz daraus für die
Praxis: "`kleine"' Teilmengen aus dem Schlüsselraum. Welche?

z.\,B. die linearen Chiffren erlauben eine Darstellung des Schlüssels mit
weniger Bits. Bei $n=64$ sind also $\{0,1\}$-Matrizen vom Typ $64\times 64$
zulässig mit Determinante~$1$. Der Schlüssel ist dann eine Matrix
$A\in\Z_{2}^{(64\times64)}$ und die Schlüssellänge ist $64\cdot64=4096$~Bits.

Wie viele solcher Schlüssel gibt es? Approximation: $\approx
0\mathord{,}29\cdot 2^{4096}\approx 2^{2^{12}}$ (Im Vergleich zu $2^{10^{21}}$)

Aufgabe:
\begin{gather*}
  (2^{64}-1)\cdot(2^{64}-2)\cdot \dotsm \cdot (2^{64}-2^{63})
\end{gather*}
verschiede Matrizen~$A$ mit $\det A=1$.

Hintereinanderschaltung von Blockchiffren \textit{verschiedenen} Typs führen
zu einer Erhöhung der Sicherheit. Oft realisiert man abwechselnde Folge von
Substitutionen und Transpositionen mit den Ziel folgende \highl{Eigenschaften
der Verschlüsselung} zu erreichen:
\begin{itemize}
 \item \highl{Diffusion}: Änderung eines Klartextbuchstaben bewirkt die
  Änderung von vielen Buchstaben des Geheimtexts -- Nachteil: kleine Fehler
  (Tippfehler) ändern den Text stark.
 \item \highl{Konfusion}: Jedes Bit des Chiffretextes hängt von mehr als einem
  Bit des Schlüssels ab.
\end{itemize}
(Dies Eigenschaften gehen zurück auf Claude Shannon -- Begründer der
Informationstheorie)

\section{Feistel-Chiffre}

Die Idee zur \highl[Feistel-Chiffre]{Feistel"=Chiffre} wurde 1971 bei IBM in
dem Projekt "`\href{http://de.wikipedia.org/wiki/Lucifer\_(Kryptographie)}{Lucifer}"'
entwickelt und ist heute Grundlage für viele symmetrische Blockchiffren unter
anderem dem heute am häufigsten eingesetzen Verschlüsselungsalgorithmus DES
--~dazu später mehr in \autoref{sec:des}. Als Erfinder der Feistel"=Chiffre
gilt
\href{http://de.wikipedia.org/wiki/Horst_Feistel}{Horst Feistel}, ein
Mitarbeiter des Projekts Lucifer.

Bei der Feistel"=Chiffre wird der Text durch eine alternierende Folge von
Substitutionen und Transpositionen verschlüsselt. Einen einzelnen Durchlauf
von Substitution und Transposition bezeichnet man als \highl{Runde}. Die
einzelnen Schlüssel für jede Runde werden dabei aus einem (Haupt"~)""Schlüssel
erzeugt.
\todo{Erklären, was die S-Box (Substitution) und die P-Box (Translation; von
  Permutation) ist.}
\todo{to produce a function with large amounts of what Claude Shannon
  described as ``confusion and diffusion.'' Bit shuffling creates the diffusion
  effect, while substitution is used for confusion.}

Eine Nachricht~$m\in\Z_{2}^{n}$ der Länge~$n$ (o.\,B.\,d.\,A. sei $n$ gerade)
wird in zwei gleichlange Teile~$L_{0}$ und $R_{0}$ zerlegt. Aus diesen beiden
wird durch die Zuordnung in \autoref{eq:feistel} ein neuer linker Teil~$L_{1}$
und ein neuer rechter Teil~$R_{1}$ gewonnen. Diese beiden Zeichenketten
wiederum werden als Eingabe für die nächste Runde verwendet. Die
\highl{Rundenzahl}~$r$ bestimmt dabei, wie oft ein solcher Durchlauf
stattfindet. In der letzten Runde wird die leicht modifizierte Vorschrift aus
\autoref{eq:feistel-last} verwendet, bei der die Transposition entfällt

\begin{align}\label{eq:feistel}
  \begin{split}
    L_{i} &= R_{i-1}\\
    R_{i} &= L_{i-1} \oplus f_{K_{i}}(R_{i-1})
  \end{split}
     &\text{für~}i=1,\dotsc,r-1\\
  \label{eq:feistel-last}
  \begin{split}
    L_{r} &= L_{r-1} \oplus f_{K_{r}}(R_{r-1})\\
    R_{r} &= R_{r-1}
  \end{split}
\end{align}
\begin{gather*}
  (L_{i-1}, R_{i-1})
     \xrightarrow{\text{Substitut.}}
     \bigl(L_{i-1} \oplus f_{K_{i}}(R_{i-1}), R_{i-1} \bigr)
     \xrightarrow{Transposit.}
     \bigl(R_{i-1}, L_{i-1}\oplus f_{K_{i}}(R_{i-1}) \bigr)
\end{gather*}
(Anm.: $\oplus$ ist das Exclusive-Oder \texttt{xor})

\begin{figure}
  \centering
  \input{feistel.pdf_t}
  \caption{Schematische Darstellung der Feistel"=Chiffre}
  \label{fig:feistel}
\end{figure}

Für die Entschlüsselung einer Nachricht kann man den gleichen Algorithmus mit
der umgekehrten Schlüsselfolge $K_{i}':= K_{r+1-i}$ (für $i=1,\dotsc,r$) auf
$c=(L_{0}', R_{0}')=(L_{r}, R_{r})$ verwenden und einfach die verschlüsselte
Nachricht nochmals verschlüsseln. Dies hat zum Einen den Vorteil, dass man die
gleiche Hard"~/""Software auf der Sender- und Empfängerseite einsetzen kann,
und zum Anderen kann die Funktion~$f$ sehr kompliziert sein, da man nicht
deren inverse Funktion benötigt.

Bei der Entschlüsselung gilt in allen Runden $i=1,\dotsc,r$ der Zusammenhang
$(L_{i}', R_{i}') = (L_{r-i}, R_{r-i})$ und für die letzte Runde ergibt sich
dann der Klartext der Nachricht als $(L_{r}', R_{r}') = (L_{0}, R_{0})$.

\begin{align*}
  (L_{1}', R_{1}') &= \bigl(R_{0}',\; L_{0}' \oplus f_{K_{1}'}(R_{0}')\bigr)
     &\text{nach \eqref{eq:feistel}}\\
  &= \bigl(R_{r},\; L_{r}\oplus f_{K_{r}}(R_{r}) \bigr) &\text{nach IV.}\\
  &= \bigl(R_{r-1},\; \bigl(L_{r-1} \oplus f_{K_{r}}(R_{r-1})\bigr) \oplus
     f_{K_{r}}(R_{r-1}) \bigr) &\text{nach \eqref{eq:feistel-last}}\\
  &= (R_{r-1}, L_{r-1}) &\text{da~}a\oplus a=a\displaybreak[0]\\[1.5ex]
  (L_{n}', R_{n}') &= \bigl(R_{n-1}',\; L_{n-1} \oplus f_{K_{n}'}(R_{n-1}')
     \bigr) & \text{nach \eqref{eq:feistel}}\\
  &= \bigl(L_{r-n+1},\; R_{r-n+1} \oplus f_{K_{r+1-n}}(L_{r-n+1})\bigr)
     &\text{nach IV.}\\
  &= \bigl(R_{r-n},\; \bigl(L_{r-n}\oplus f_{K_{r-n+1}}(R_{r-n})\bigr) \oplus
     f_{K_{r+1-n}}(R_{r-n}) &\text{nach \eqref{eq:feistel}}\\
  &= (R_{r-n}, L_{r-n})
\end{align*}

% 15.11.

Da die Schlüsselfolge $K_{1},\dotsc, K_{r}$ für die Ver- und Entschlüsselung
aus dem gleichen (Haupt"~)""Schlüssel erzeugt wird, ist die Feistel"=Chiffre
eine symmetrische Verschlüsselung.

Die Sicherheit der gesamten Verschlüsselung beruht auf der Eigenschaft, dass
die Substitution, genauer die Funktion~$f_{K_{i}}$, eine nicht lineare
Transformation ist. Wäre $f_{K_{i}}$ eine lineare Transformation, so wäre auch
die Verkettung von Substitution und Translation\footnote{$\begin{pmatrix}R&L
\end{pmatrix} = \begin{pmatrix}L& R\end{pmatrix}\cdot
(\begin{smallmatrix}0& 1\\1& 0\end{smallmatrix})$} in jeder Runde eine lineare
Transformation. Man könnte also den gesamten Verschlüsselungsvorgang mit einer
einzigen linearen Gleichung beschreiben. Die Funktion $\oplus$ ist
linear, da sich leicht zeigen lässt, dass $f(ax+by)=af(x)+bf(y)$ mit
$f(x)= f(x_1, x_2)= x_1\oplus x_2= x_1 + x_2 \mod 2$ für $x_1, x_2 \in
\mathbb{F}_2$ folgt.

Ist die Funktion~$f$ eine krytographisch sichere Pseudozufallsfunktion, so
haben Michael Luby unnd Charles Rackoff gezeigt, reichen drei Runden um eine
Pseudozufallspermutation zu erreichen. Mit vier Runden bekommt man sogar eine
starke Pseudozufallspermutation.\footnote{Geklaut aus der
\href{http://en.wikipedia.org/wiki/Feistel_cipher}{englischen Wikipedia}, die
selbst auf "`M. Luby and C. Rackoff. ``How to Construct Pseudorandom
Permutations and Pseudorandom Functions.'' In SIAM J. Comput.,
vol. 17, 1988, pp. 373-386."' verweist.}

% Angenommen: $f_{K_{i}}$ ist linear:
% \begin{gather*}
%   f_{K_{i}}(R_{i-1}) = R_{i-1}\cdot A_{i} + b\qquad
%      A_{i}\in \Z_{2}^{(n\times n)}, b_{i} \in \Z_{2}^{(1\times n)}
% \end{gather*}
% dann ist die Substitution:
% \begin{gather*}
%   (L_{i-1}\oplus f_{K_{i}}(R_{i-1}), R_{i-1}) = (L_{i-1}, R_{i-1})\cdot
%      \begin{pmatrix}
%        E_{n} & 0_{n}\\
%        A_{i} & E_{n}
%      \end{pmatrix}
%      + (b_{i}, 0)
% \end{gather*}

\section{DES -- Data Encryption Standard}\label{sec:des}

Der \highl{Data Encryption Standard} (\highl{DES}) wurde in den
1970ern von IBM für eine Ausschreibung des US~National Bureau of
Standards\footnote{wurde später in
  \href{http://www.nist.gov/}{National Institute of Standards and
    Technology (NIST)} umbenannt} entwickelt. Er basiert auf den
vorangegangenen Entwicklungen des Projekts Lucifer, das die
Feistel"=Chiffre entwickelt hatte. Am 23.\,November 1976 wurde DES als
Standard für die Verschlüsselung in den amerikanischen Bundesbehörden
anerkannt und im Januar 1977 erfolgte die Veröffentlichung als
\href{http://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf}{FIPS
  PUB 46}.

Die International Organization for Standardization~(ISO) übernahm den
Algorithmus unter der Bezeichnung "`Data Encipherment No.\,1"'~(DEA-1) in ihr
Verzeichnis.

Die Kryptographen Eli Biham und Adi Shamir entwickelten gegen Anfang
der 90er Jahre die differentielle Kryptoanalyse als Spezialform der
Kryptoanalyse. Dabei wird untersucht, wie sich das Chiffrat bei
unterschiedlichem Input ändert. Das Verfahren wandten sie auch auf DES
an\footnote{Biham, E. and A. Shamir. (1990). Differential
  Cryptanalysis of DES-like Cryptosystems. Advances in Cryptology "=
  CRYPTO
  '90. Springer-Verlag. 2?21.}\footnote{\href{http://www.cs.technion.ac.il/users/wwwb/cgi-bin/tr-get.cgi/1991/CS/CS0708.ps}{Eli
    Biham, Adi Shamir,"Differential Cryptanalysis of the Full 16-Round
    DES, CS 708, Proceedings of CRYPTO 92, Volume 740 of Lecture
    Notes in Computer Science, December 1991.}}.
Das Verfahren erfordert bei DES $2^{47}$ frei gewählte Klartexte und
nach Angaben von IBM war dieser Angriff seit 1974 bekannt. Eines der
Designziele von DES war die Absicherung gegen die differentielle
Kryptoanalyse.

Die fortschreitende Weiterentwicklung der Rechenkraft führte letztlich
dazu, dass ein Brute-Force-Angriff gegen DES erfolgreich wird. So
wurde 1997 das erste Mal eine verschlüsselte Nachricht gebrochen. Ein
Jahr später gelingt es der Electronic Frontier Foundation~(EFF) mit
dem eigens dafür angefertigten Supercomputer "`Deep Crack"', der 88
Milliarden Schlüssel pro Sekunde testen konnte, binnen 56~Stunden eine
Verschlüsselung zu brechen. Ein halbes Jahr später im Januar~1998
gelang es durch die Zusammenarbeit von Deep Crack und
\href{http://distributed.net}{distributed.net} einen DES"=Schlüssel in
22~Stunden und 15~Minuten zu ermitteln --~mehr als 245 Milliarden
Schlüssel wurden pro Sekunde getestet.

Im Jahr~1999 wird DES als Standard für die Verschlüsselung der
amerikanischen Bundesbehörden widerrufen und schließlich 2002 durch den
Advanced Encryption Standard~(AES) ersetzt.

DES arbeitet nach dem gleichen Prinzip wie die Feistel"=Chiffre und ist
damit eine symmetrische Blockchiffre. Die Schlüssellänge für die
Verschlüsselung beträgt 64~Bit, wobei ein Bit pro Byte als Prüfbit verwendet
wird, was den effektiven Schlüsselraum~$\mathcal{K} =\{0,1\}^{56}$ auf 56~Bit
reduziert.

DES arbeitet mit 16 Runden. Aus dem Schlüssel~$k\in\mathcal{K}$ werden
16~Teilschlüssel $k_{1}, k_{2},\dotsc, k_{16}$ der Länge $\abs{k}=16$
generiert, die jeweils in einem $SBB$ (Standard Building Block) verwendet
werden.

Die Nachricht wird in Blöcke~$m$ der Länge~64 aufgeteilt und nach einer
initialen Permutation~$IP$ in den 16~SBB tranformiert und anschließend noch
mal mit $IP^{-1}$ permutiert.

Schema:
\begin{gather*}
  % Eine Runde "`Zeichnen für arme Leute"' :-))
  \xrightarrow[64]{m}
     \raisebox{-1.6ex}{\framebox{\rule{0pt}{5.5ex}$IP$}}\:
     \begin{split}
       \xrightarrow[32]{}\\
       \xrightarrow[32]{}\\
     \end{split}
     \stackrel{K_{1}\downarrow 48}%
              {\raisebox{-1.6ex}{\framebox{\rule{0pt}{5.5ex}$SBB_{1}$}}}
     \begin{split}
       \xrightarrow[32]{}\\
       \xrightarrow[32]{}\\
     \end{split}
     \stackrel{K_{2}\downarrow 48}%
              {\raisebox{-1.6ex}{\framebox{\rule{0pt}{5.5ex}$SBB_{2}$}}}
     \dotso
     \stackrel{K_{15}\downarrow 48}%
              {\raisebox{-1.6ex}{\framebox{\rule{0pt}{5.5ex}$SBB_{15}$}}}
     \begin{split}
       \xrightarrow[32]{}\\
       \xrightarrow[32]{}\\
     \end{split}
     \stackrel{K_{16}\downarrow 48}%
              {\raisebox{-1.6ex}{\framebox{\rule{0pt}{5.5ex}$SBB_{16}$}}}
     \begin{split}
       \xrightarrow[32]{}\\
       \xrightarrow[32]{}\\
     \end{split}
     \:\raisebox{-1.6ex}{\framebox{\rule{0pt}{5.5ex}$IP^{-1}$}}
     \xrightarrow[64]{C}
     % und wer hat jetzt Lust das Bild auszumalen?
\end{gather*}

Runde~$i$: Die Eingabe wird in eine linke und reche Hälfte $(L,R)$ geteilt.
Die Ausgabe $(L', R')$ wird erzeugt durch $L'=R$ und $R'$ auf folgende Weise:
\begin{enumerate}
 \item Diffusionsschritt: Aus $R$ wird ein 48-Bit-Wort $R_{1}$ erzeugt
 \item $R_{2}= R_{1}\oplus K_{i}$
 \item Konfusionsschritt: aus $R_{2}$ wird durch eine nicht lineare
  Transformation~$S$ ein 32-Bit-Wort $R_{3}$ erzeugt

  $S$: Zerlegen in 8 Worte der Länge~6 und diese mit $S_{i}$ zur 8 Worten der
  Länge~4 verknuddeln und diese wieder zu einem 32-Bit-Wort zusammenkleben.
 \item Permutation von $R_{3}$ erzeugt $R_{4}$
 \item $R' = L\oplus R_{4}$
\end{enumerate}

\todo{Hier gab es ein tolles Schema. Wollen wir das?}

Vereinbarung: Die gesamte Transformation bei einem kompletten Durchlauf
beschreiben wir als $c= DES_{k}(m)$

Abwandlungen zur Erhöhung der Sicherheit von DES:
\begin{itemize}
 \item $c = DES_{k_{2}}\bigl( DES_{k_{1}}(m) \bigr)$ keine wesentliche
  Erhöhung der Sicherheit, da es einfach nur die Rundenzahl erhöht.

 \item $c = DES_{k_{1}}\bigl( DES_{k_{2}}^{-1}( DES_{k_{1}}(m) ) \bigr)$ mit
  chosen-plain-text-Angriff ist dies auch leicht knackbar.

 \item $c= DES_{k_{3}}\bigl( DES_{k_{2}}^{-1}( DES_{k_{1}}(m) ) \bigr)$
  wird als \highl{Triple-DES} (\highl{3DES}) bezeichnet.
\end{itemize}
Was ist der Unterschied zwischen $DES^{-1}_{k}$ und $DES_{k^{T}}$? DES
beschreibt auch, wie die Teilschlüssel erzeugt werden und daher ist $k^{T}$
nicht der permutierte Schlüssel, der bei $DES^{-1}_{k}$ verwendet wird.

\todo{Hier fehlt die Vorlesung vom 20.11.}

% 22.11.

\subsection{Differentielle Kryptoanalyse}

$A, A'\in\Z_{2}^{4}$ als Eingabe für $S_{1}$\\
$A\oplus A'$ ist die Input-Differenz\\
$S_{1}(A)\oplus S_{1}(A')$ ist die Output-Differenz\\
Für jeder Differenz $A^{*}\in\Z_{2}^{4}$ ($A^{*}\ne(0000)$) gibt es acht
Mengen $\{A,A'\} = \{A, A\oplus A^{*}\}$ mit dieser Differenz $A^{*}$

\begin{bsp}
  \begin{gather*}
    S_{1} =
       \begin{pmatrix}
         5& 2& 1& 6& 3& 4& 7& 0\\
         1& 4& 6& 2& 0& 7& 5& 3
       \end{pmatrix}
       \qquad A^{*}=(0011)\\
    \begin{array}{cc|c}
      A & A'& S_{1}(A)\oplus S_{1}(A')\\
      \hline
      (0000)& (0011)& (101)\oplus(110) = (011)\\
      (0001)& (0010)& (010)\oplus(001) = (011)\\
      (0100)& (0111)& (011)\oplus(000) = (011)\\
      (0101)& (0110)& (100)\oplus(111) = (011)\\
      \hline
      (1000)& (1011)& (001)\oplus(010) = (011)\\
      (1001)& (1010)& (100)\oplus(110) = (010)\\
      (1100)& (1111)& (000)\oplus(011) = (011)\\
      (1101)& (1110)& (111)\oplus(101) = (010)
    \end{array}
  \end{gather*}
\end{bsp}
Theoretisch sind acht verschiedene Ergebnisse möglich, aber einige treten
häufiger auf als andere. Es gibt 15 derartige Tabellen für $S_{1}$ und
$S_{2}$ (insgesamt 30).

unser Ansatz zunächst: Was passiert beider Verschlüsselung zweier
Klartextblöcke $(L_{i-1}, R_{i-1})_{12 Bit}$ und $(L_{i-1}', R_{i-1}')_{12 Bit}$ in Runde~$i$?
\begin{enumerate}[1.\,{Schritt}]
 \item Diffusion (oder Expansion) $D(R_{i-1})_{8 Bit}$
 \item $(D(R_{i-1})\oplus k_{i})_{8 Bit} = (A_{4 Bit}, B_{4 Bit})$
 \item $(S_{1}(A)_{3 Bit}, S_{2}(B)_{3 Bit})_{6 Bit} = f_{k_{i}}(R_{i-1})_{6
   Bit}$
\end{enumerate}

genauso für den zweiten Klartextblock $(L_{i-1}', R_{i-1}')$, aber genauer:
\begin{gather*}
  R_{i-1}'\\
  \downarrow\\
  D(R_{i-1}') = (\tilde{A}', \tilde{B}') \qquad k_{i} = ((k_{i}^{L})_{4Bit},
     (k_{i}^{R})_{4Bit})\\
  D(R_{i-1}')\oplus k_{i} = (\tilde{A}'\oplus k_{i}^{L}, \tilde{B}'\oplus
     k_{i}^{R}) = (A', B')\\
  \downarrow\\
  (S_{1}(A'), S_{2}(B')) = f_{k_{i}}(R_{i-1}')
\end{gather*}

Es gilt:
\begin{gather*}
  A\oplus A' = (\tilde{A} \oplus k_{i}^{L}) \oplus (\tilde{A}'\oplus
     k_{i}^{L}) = \tilde{A}\oplus \tilde{A}'\\
  B\oplus B' = (\tilde{B} \oplus k_{i}^{L}) \oplus (\tilde{B}'\oplus
     k_{i}^{L}) = \tilde{B}\oplus \tilde{B}'
\end{gather*}
aber die Output-Differenz $S_{1}(A)+S_{1}(A')$ hängt vom Schlüssel~$k_{i}^{L}$
ab. Wenn $S_{1}$ nicht linear ist, dann gilt i.\,A. nicht.
\begin{gather*}
  S_{1}(A)\oplus S_{1}(A') = S_{1}(A\oplus A')
\end{gather*}
Annahme: Wir kennen $\tilde{A}, \tilde{A}'$ und $S_{1}(A), S_{1}(A')$.

Es gilt:
\begin{enumerate}
 \item $A$ und $A'$ haben die Input-Differenz $A\oplus A' = A^{*} =
  \tilde{A}\oplus \tilde{A}'$
 \item $A$ und $A'$ haben die Output-Differenz $C^{*}=S_{1}(A)\oplus S_{1}(A')$
\end{enumerate}

Weiterhin gilt: $\{A, A'\}$ kommt in der Tabelle für $A^{*}$ vor und man
erkennt alle Möglichkeiten für $\{A,A'\}$ die Output-Differenz $C^{*}$ zu
bilder. Da $\tilde{A}$ und $C^{*}$ bekannt sind und $A=\tilde{A}\oplus
k_{i}^{L}$ ergben sich auf diese Weise Einschränkungen für die Wahl von
$k_{i}^{L}$.

\begin{bsp}
  Illustration am oberen Beispiel: $\tilde{A}=(0100), \tilde{A}'=(0110),
  C^{*}=S_{1}(A)\oplus S_{1}(A')=(010), \tilde{A}\oplus \tilde{A}' = (0011) =
  A^{*}$

  Tabelle: $A\in\{(1001), (1010), (1101), (1110)\}$ nun gilt weiter $k_{i}^{L}
  = A\oplus \tilde{A} cmi\{ (1101), (1110), (1001), (1010)\}$
\end{bsp}

Das war jetzt für einen Klartextblock, mit einem weitern Klartextblock kann
man eine weitere Schlüsselmenge finden. Der tatsächliche Schlüssel liegt im
Durchschnitt beider Teilmengen.

Dies Ganze so oft bis der (Runden"~)""Schlüssel eindeutig bestimmt ist.

\subsubsection{Differentielle Kryptoanalyse für ein System mit drei Runden}

Der obige Ansatz ist ausreichend für eine Analyse von drei Runden.
Ausgangspunk: zwei Klartextblöcke wie eben $(L_{0}, R_{0}), (L_{0}', R_{0}')$
und die zugehörigen Geheimtextblöcke $(L_{3}, R_{3}), (L_{3}', R_{3}')$. Es
gilt:
\begin{align*}
  L_{3} &= L_{2}\oplus f_{k_{3}}(R_{2}) = R_{1}\oplus f_{k_{3}}(R_{2}) =
     L_{0}\oplus f_{k_{1}}(R_{0})\oplus f_{k_{3}}(R_{2})\\
  L_{3}' &= L_{0}'\oplus f_{k_{1}}(R_{0}')\oplus f_{k_{3}}(R_{2}')
\end{align*}
Wir wählen die Klartextblöcke, so dass $R_{0}=R_{0}'$ gilt.
Setzen die Output-Differenz $L_{3}^{*} := L_{3}\oplus L_{3}'$.
\begin{gather*}
  L_{3}^{*} = \underbrace{L_{0}\oplus L_{0}'}_{=L_{0}^{*}} \oplus
     f_{k_{3}}(R_{2}) \oplus f_{k_{3}}(R_{2}')\\
  L_{3}^{*}\oplus L_{0}^{*} = f_{k_{3}}(R_{2}')\oplus f_{k_{3}}(R_{2}') =
     f_{k_{3}}(R_{3})\oplus f_{k_{3}}(R_{3}'), da R_{2}=R_{3} und R_{2}'=R_{3}'
\end{gather*}
Wir kennen also $R_{3}=R_{2}$ und damit $D(R_{2}) = (\tilde{A}, \tilde{B})$
und $R_{3}'=R_{2}'$ und damit $D(R_{2}') = (\tilde{A}', \tilde{B}')$.

Die linke Hälfte von $f_{k_{3}}(R_{3})\oplus f_{k_{3}}(R_{3}') =
S_{1}(\tilde{A})\oplus S_{1}(\tilde{A}')$ und sind in der Situation wie oben.

\todo{Hier fehlt die Vorlesung vom 27.11.}

% 29.11.

\subsection{Analyse für vier Runden}

Ansatz: Nichtgleichverteilung der Output-Differenzen.\\
Idee: Versuchen eine Situation nach einer Runde so zu erreichen, dass wir dann
die 3-Rundenanalyse ansetzten können.

Dazu wählen wir Paare von Klartextblöcken $(L_{0}, R_{0})$ und $(L_{0}',
R_{0}')$ mit folgenden Eigenschaften:
\begin{enumerate}
 \item $R_{0}^{*} = R_{0}\oplus R_{0}' = (001\,100)$

  Bei der Bildung von $f_{K_{1}}(R_{0})$ und $f_{K_{1}}(R_{0}')$ passiert
  folgendes:
  \begin{gather*}
    D(R_{0})\oplus D(R_{0}') = (00111100)
  \end{gather*}
  Input für $S_{1}$ ist $(0011)$ für $S_{2}$ ist es $(1100)$.

  für $(0011)$ erwarten wir mit Wahrscheinlichkeit $\frac{3}{4}$ den Output
  $(011)$ bei $S_{1}$ und für $(1100)$ erwarten wir mit Wahrscheinlichkeit
  $\frac{1}{2}$ den Output $(010)$ bei $S_{2}$.

  Wir betrachten die Outputs der beiden $S$-Boxen als unabhängig und erwarten
  deshalb mit Wahrscheinlichkeit $\frac{3}{4}\cdot\frac{1}{2}=\frac{3}{8}$
  eine Gesamt-Output-Differenz von $f_{K_{1}}(R_{0})\oplus f_{K_{1}}(R_{0}') =
  (011\,010)$

 \item $L_{0}^{*} = L_{0} \oplus L_{0}' = (011\,010)$

  $R_{1}= L_{0}\oplus f_{K_{1}}(R_{0}), R_{1}' = L_{0}'\oplus
  f_{K_{1}}(R_{0}')$. Für den Fall $f_{K_{1}}(R_{0}) \oplus f_{K_{1}}(R_{0}')
  = (011\,010)$ ergibt sich:
  \begin{align*}
    R_{1}\oplus R_{1}' &= (L_{0}\oplus L_{0}') \oplus (f_{K_{1}}(R_{0}) \oplus
       f_{K_{1}}(R_{0}))\\
    & = (011\,010) \oplus (011\,010) = (000\,000)
  \end{align*}
  Da $R_{1} = R_{0}$ und $L_{1}' = R_{0}'$ gilt mit Wahrscheinlichkeit
  $\frac{3}{8}$, dass $(L_{1}, R_{1})$ und $(L_{1}', R_{1}')$ die Eigenschaft
  $R_{1}=R_{1}'$ haben und $(L_{1}\oplus R_{1})\oplus (L_{1}', R_{1}') =
  (R_{0}\oplus R_{0}', 0\dotso 0) = (001\,100, 000000)$.
\end{enumerate}

Strategie: Wähle Klartextpaare $(L_{0}, R_{0})$ und $(L_{0}', R_{0}')$ mit der
Summe $(011\,010, 001\,100)$ und bestimme dazu $(L_{4}, R_{4})$ und $(L_{4}',
R_{4}')$. Angenommen es ist so, dass $R_{1}\oplus R_{1}' = (000\,000)$ (das
gilt in 3 von 8~Fällen), dann haben wir die Ausgangssituation zur Analyse der
Runden 2, 3 und 4 als 3-Rundenanalyse.

Dort, wo die Annahme korrekt ist, erhalten wir eine Menge möglicher Schlüssel
für $K_{4}^{L}$ bzw. $K_{4}^{R}$. Dort, wo die Annahme falsch ist (die
Mehrzahl der Fälle), erhalten wir irgendwelche (zufälligen) Bitfolgen von
acht Bits.

\section{Die Sicherheit von DES}

\begin{enumerate}
 \item Die Größe des Schlüsselraums ist $2^{56}$ (es güngig aber
  $2^{55}$~Schlüssel zu testen), mit erschöpfender Suche war 1977 war defakto
  nicht möglich.

  1997: setzt die RSA-Data-Security US\,\$~10\,000 für die Dechiffrierung
  eines DES-Textes aus. Nach 5 Monaten war der Schlüssel ermittelt von Ronald
  Vesper -- durch organisiertes Parallelrechnen via Internet (25\,\%
  des Schlüsselraums wurde getestet.)

  1998: setzt die RSA-Data-Security wieder einen Preis aus und nach 39~Tagen
  war wieder der Schlüssel gefunden, obwohl 85\,\% des Schlüsselraums
  durchsucht wurden.

  1999: Electronic Frontier Foundation, 1536 parallel arbeitende Spezialchips
  benötigen im Schnitt $4\frac{1}{2}$~Tag um den kompletten Schlüsselraus zu
  durchsuchen.

  Quelle: 
 \item Es gibt bei DES schwache Schlüssel, die für alle Runden den gleichen
  Rundenschlüssel erzeugen. Aber man kann diese auch einfach beim Einsatz
  vermeiden.

 \item Differentielle Kryptoanalyse funktioniert nicht, wenn man die $S$-Boxen
  geeignet wählt. (Nicht-Gleichverteilung vermeiden.)
\end{enumerate}

% 4.12.

\subsection{DES und differentielle Kryptoanalyse}

Die differentielle Kryptoanalyse war den Designern des DES bekannt und deshalb
folgte die Verteidigung. $S$-Boxen sind so konstruiert, dass für höchstens ein
Viertel der Zweiermengen $\{A, A'\}$ die Output-Differenzen $S(A)\oplus S(A')$
übereinstimmen. Mit der Folge, dass für einen Chosen-Plaintext-Angriff
$2^{47}$ Klartextblöcke benötigt werden. Ein Known-Plaintext-Angriff benötigt
$2^{55}$ Klartextblöcke. Dies ist nicht wesentlich weniger als für einen
Brute-Force-Angriff benötigt werden: $2^{56}$. Deshalb sind es 16~Runden!

\subsection{DES und lineare Kryptoanalyse}

Von M.\,Mitsui auf der Konferenz EUROCRYPT im Jahre 1993 vorgestellt. War den
Designern von DES nicht bekannt.

Weder die $S$-Boxen und damit auch die gesamte Verschlüsselung beschreibt eine
lineare Abbildung. Damit sicher gegen solche Angriffe.

Die Idee der \highl{linearen Kryptoanalyse} ist: Approximation der
Verschlüsselung durch lineare Abbildungen. Ansatz: Bilde \texttt{xor} für
einige Klartextbits und \texttt{xor} für eine Geheimtextbits und verknüpfe
beide mit \texttt{xor}. Das Ergebnis ist ein einzelnes Bit, das als die
\texttt{xor}-Verknüpfung einiger Schlüsselbits interpretiert wird. Das Ganze
wieder für eine bestimmte Wahrscheinlichkeit~$p$. Wenn $p\ne\frac{1}{2}$,
Ausnutzung der Asymetrie (insbesondere ist der fünfte $S$-Boxtyp des DES dafür
anfällig) liefert eine Einschränkung der Schlüssel.

In der Arbeit von M.\,Mitsui wurde gezeigt, dass man für einen
Known-Plaintext-Angriff nur $2^{43}$~Paare, d.\,h. sie ist besser als die
\highl{differentielle Kryptoanalyse}.

\subsection{DES realisiert Diffusion und Konfusion}

Diffusion: Die Änderung der Eingabe in eine $S$-Box in einem Bit ändert die
Ausgabe in mindestens zwei Bits.

Konfusion: Jedes Ausgabebit hängt nach fünf Runden von allen Eingabebits ab.

\subsection{DES hat keine Gruppeneigenschaft}

Die \highl{Gruppeneigenschaft} lässt sich folgender Maßen beschreiben:
\begin{gather*}
  \forall k_{1},k_{2}\in\mathcal{K} \exists k_{3}\colon
     DES_{k_{1}} \circ DES_{k_{2}} = E_{k_{3}}
\end{gather*}


Für DES gilt aber im Allgemeinen für je drei Schlüssel $k_{1},k_{2},k_{3}$:
\begin{gather*}
       DES_{k_{1}} \circ DES_{k_{2}} \ne E_{k_{3}}
\end{gather*}

Das heißt $2^{56}$ mögliche Schlüssel erzeugen eine viel größere Gruppe
innerhalb von $\mathcal{S}_{2^{64}}$. Beachte $\abs{\mathcal{S}_{2^{64}}} =
(2^{64})! > 10^{10^{20}}$

Gezeigt wurde (1993: David Coppersmith): Die Gruppe der DES-Verschlüsselungen
umfasst mehr als $10^{2500}$ Verschlüsselungen, die sich durch Kombination
ergeben.

Konsequenz: DES wird bei Mehrfachverschlüsselung sicherer.

\subsection{"`Meet-in-the-Middle"'-Angriff}

Doppelte Verschlüsselung bewirkt eine Vergrößerung des Schlüsselraums auf
$2^{112}$~Schlüssel. Der folgende Angriff beschränkt das Durchprobieren auf
$2^{57}$~Versuche bei extremen Speicherplatzbedarf.

Angenommen ein Angreifer kennt einen Klartext~$m$ und den doppelt chiffrierten
Klartext $c=E_{k_{2}}(E_{k_{1}}(m))$ und sucht das Paar $(k_{1}, k_{2})$.
\begin{enumerate}
 \item Berechne und speichere $DES_{k}(m)$ für alle Schlüssel~$k$
  ($2^{56}$~Stück).
 \item Berechne und speichere $DES^{-1}_{k}(c)$ für alle Schlüssel~$k$
  ($2^{56}$~Stück).
 \item Vergleiche beide Listen nach Stellen, die die Gestalt $DES_{k_{1}}(m) =
  DES^{-1}_{k_{2}}(c)$. Hierfür gilt $DES_{k_{2}}(DES_{k_{1}}(m))=c$ und damit
  hat man $(k_{1},k_{2})$.
\end{enumerate}

Unter Umständen gibt es mehrere Schlüsselpaare, dann muss man das Verfahren
nochmal mit einem anderen Paar $(m',c')$ wiederholen. Also sind für
$n$~Schlüssel $2n$~Berechnungen nötig, anstelle von $n^{2}$~Berechnungen. (es
sind noch $n\log n$~Vergleiche notwendig)

\subsection{Dennoch in der Praxis}
Denoch wird DES in der Praxis eingesetzt als: $DES_{k_{1}}\circ
DES_{k_{2}}\circ DES_{k_{3}}$ und $DES_{k_{1}}
\circ DES_{k_{2}}^{-1} \circ DES_{k_{1}}$, da DES schnell ist und weit
verbreitet/Hardware vorhanden.

\section{Weitere Blockchiffren}
\subsection{IDEA}

Beginn der 1990er Jahre von James Massey entwickelt. Anwendung im
PGP-Verfahren. Ist eine Blocktextchiffre mit der Blocklänge 64~Bit und
Schlüssellänge 128~Bit (Damit die eine erschöpfende Suche wesentlich großer
als bei DES). 8~Runden.

Prinzip: Jeder Block des Klartextes wird in vier Teilblöcke zu je 16~Bit
zerlegt, die in 8~Runden transformiert werden, wobei pro Runde sechs
Teilschlüssel eingesetzt werden für eine Verknüpfung von drei Operationen:
$\oplus$~--~\texttt{xor}, $\boxplus$~--~Addition modulo $2^{16}$,
$\odot$~--~Multiplikation modulo $2^{16}+1$

\begin{enumerate}
 \item $\alpha_{1} = x_{1}\odot k_{i_{1}}$
 \item $\alpha_{2} = x_{2}\oplus k_{i_{2}}$
 \item $\alpha_{3} = x_{3}\oplus k_{i_{3}}$
 \item $\alpha_{4} = x_{4}\odot k_{i_{4}}$
 \item $\beta_{1} = \alpha_{1} \oplus \alpha_{3}$
 \item $\beta_{2} = \alpha_{2} \oplus \alpha_{4}$
 \item $\gamma = \beta_{1} \odot k_{i_{5}}$
 \item $\delta = \beta_{2} \boxplus \gamma$
 \item $\epsilon = \delta \odot k_{i_{6}}$
 \item $\zeta = \gamma \boxplus \epsilon$
 \item $x_{1}' = \alpha_{1} \oplus \epsilon$
 \item $x_{3}' = \alpha_{3} \oplus \epsilon$
 \item $x_{2}' = \alpha_{2} \oplus \zeta$
 \item $x_{4}' = \alpha_{4} \oplus \zeta$
\end{enumerate}

Nach den 8~Runden gibt es eine Schlüssrunde:
\begin{enumerate}
 \item $x_{1}\odot k_{9_{1}}$
 \item $x_{2}\boxplus k_{9_{2}}$
 \item $x_{3}\boxplus k_{9_{3}}$
 \item $x_{4}\odot k_{9_{4}}$
\end{enumerate}

Bisher keine Sicherheitsprobleme bekannt und trotz der komplexeren Runden ist
es doppelt so schnell wie DES.

\subsection{RC-Familie}

Alle entwickelt in 1990ern von Ron Rivest -- RSA Data Security.
\help{Woher kommt das C im RC?}

RC2: Klartextblocklänge 64~Bit, Schlüssellänge ist variablen zwischen 48 und
1024~Bit. 1997
\help{Rundenzahl von RC2?}

RC5: 1995, Klartextblocklänge, Schlüssellänge und Rundenzahl variabel.
z.\,B. Klartextblocklänge~32, Schlüssellänge~128 und Rundenzahl~12 beliebt.)
ist sicher gegen differentielle und lineare Kryptoanalyse.

RC6: war in der letzten Ausscheidungsrunde für AES. 1998.

\clearpage
\appendix

\chapter{Literatur}
\begin{thebibliography}{99}
 \bibitem{schneier} Bruce Schneier: "`Angewandte Kryptographie"', Pearson
  Studium, 1996
 \bibitem{rothe} Jörg Rothe: "`Complexity theory and cryptology---an
  introduction to cryptocomplexity"', Springer, 2005
 \bibitem{buchmann} J.\,Buchmann: "`Einführung in die Kryptographie"',
  Springer, 1999
 \bibitem{menezes} A.\,J.\,Menezes, P.\,C.\,van Oorschot, S.\,A.\,Vanstone:
  "`Handbook of Applied Cryptography"', CRC Press, 1997
 \bibitem{trappe} Trappe, Washington: "`Introduction to cryptography by coding
  theory"', Prantice Hall, 2002
 \bibitem{watjen} D.\,Wätjen: "`Kryptographie -- Grundlagen, Algorithmen,
  Protokolle"', Spektrum, 2004
 \bibitem{douglas} Douglas Stinson: "`Cryptography---Theory and praxis"', CRC
  Press, 1995
 \bibitem{bauer} F.\,Bauer: "`Entzifferte Geheimnisse"', Springer, 2000
 \bibitem{beutelspacher} A.\,Beutelspacher, J.\,Schwenk, K.-D.\,Wolfenstetter:
  "`Moderne Verfahren der Kryptographie"', Vieweg, \todo{Jahr finden}
 \bibitem{delfs} H.\,Delfs, H.\, Knebl: "`Introduction to cryptography"',
  Springer, 2002
 \bibitem{goldreich} O.\,Goldreich: "`Foundamentals of cryptography"',
  Cambridge, 2001
 \bibitem{diffihellman} W.\,Diffie, M.\,Hellman: "`New directions in
  cryptography"', IEEE Transaction on information theory 22, Seiten
  644--654, 1976
 \bibitem{adleman} L.\,Adleman, R.\,Rivest, A.\,Shamir: "`On digital
  signatures and public key cryptosystems"', MIT Press, 1977
\end{thebibliography}

\chapter{Übungsaufgaben}
\section{Blatt 1}

Der folgende mit Vigenère-Chiffrierung deutschsprachige Text ist zu
entschlüsseln. (Die Blockstruktur dient lediglich der besseren Lesbarkeit.)

\subsection*{Aufgabe 1}
Bestimmen Sie eine mögliche Periodenlänge~$d$
\begin{enumerate}[a)]
 \item mit Hilfe des Kasiski-Tests.
 \item mit Hilfe des Friedman-Tests.
 \item Formulieren Sie eine Hypothese für $d$.
\end{enumerate}

\subsection*{Aufgabe 2}
Bestimmen Sie gemäß $d$ eine Häufigkeitsverteilung und leiten Sie daraus ein
Schlüsselwort ab.

\subsection*{Aufgabe 3}
Bestimmen Sie den Klartext.

\begin{verbatim}
  FSGEXV  EVIISA  MGYFNX  EJTMUR  MPNYME  FMPSIH  EFIXUE  HQFOOU
  PGIAVI  KJSWLT  IIZJIJ  ELXVOT  YBKMEC  GYUELW  RHEHOR  ONIFVS
  EHKCJS  WLFEEL  JIBNTS  VTIMGY  JSNECT  IBRQVE  HXJDHF  YVTSYP
  EEIYWX  JLNRRU  UYVCJC  BELDHZ  YVSKFE  IUERXV  TGCFKF  IHIZOF
  UGYFSP  IIGABV  VOGYRL  FGYRUM  AHKVOK  FEIUER  XRVFTY  XFHIII
  JGEIZU  ZOIZOE  LFVLAH  RKFNMT  IBCBIQ  VUHXVS  SOGYFN  ILEFSY
  MEFSSR  KBXORU  TEGEEU  IEDLCE  NVRDHN  IE
\end{verbatim}

\section{Blatt 2}

\subsection*{Aufgabe 1}
\begin{enumerate}
 \item Verschlüsseln Sie die Nachricht $m=\mathrm{WASSER}$ mit Hilfe der
  Hill-Chiffre und verwenden Sie die Matrix
  \begin{gather*}
    K =
    \begin{pmatrix}
      7 & 3\\
      5 & 8
    \end{pmatrix}
  \end{gather*}

 \item Bestimmen Sie die enschrechende Matrix zur Entschlüsselung und wenden
  Sie diese auf den in a) erhaltenen Geheimtext an.
\end{enumerate}

\subsection*{Aufgabe 2}
Bestimmen Sie eine $2\times 2$-Matrix~$M$, durch die die Nachricht "`hund"'
mit der Hill-Chiffre in den Geheimtext "`AFFE"' umgewandelt wird.

\subsection*{Aufgabe 3}
Wir definieren die Abbildung $\Phi_{a,b}\colon \Z_{26}\rightarrow\Z_{26}$ durch
\begin{gather*}
  \Phi_{a,b}(x) := (ax+b) \pmod{26}
\end{gather*}
Bestimmen Sie diejenigen ganzen Zahlen $a,b$, für die die Abbildung
$\Phi_{a,b}$ bijektiv ist.

\textbf{Bemerkung:} Diese Abbildung kann zum Verschlüsseln verwendet werden
(affine Chiffre)

\section{Blatt 3}

Der folgende Text wurde mit der Vigenère-Chiffrierung verschlüsselt. Die
Blockstruktur dient lediglich der besseren Lesbarkeit.

\subsection*{Aufgabe 1}

Bestimmen Sie eine mögliche Periodenlänge~$d$
\begin{enumerate}
 \item mithilfe des Kasiski-Tests.
 \item mithilfe des Friedmann-Tests.
 \item Formulieren Sie eine Hypothese für $d$.
\end{enumerate}

\subsection*{Aufgabe 2}

Bestimmen Sie gemäß $d$ eine Häufigkeitsverteilung und leiten Sie darauf ein
Schlüsselwort ab.

\subsection*{Aufgabe 3}

Bestimmen Sie den Klartext.

\begin{verbatim}
  UEQPC  VCKAH  VNRZU  RNLAO  KIRVG  JTDVR  VRICV  IDLMY
  IYSBC  COJQS  ZNYMB  VDLOK  FSLMW  EFRZA  VIQMF  JTDIH
  CIFPS  EBXMF  FTDMH  ZGNMW  KAXAU  VUHJH  NUULS  VSJIP
  JCKTI  VSVMZ  JENZS  KAHZS  UIHQV  IBXMF  FIPLC  XEQXO
  CAVBV  RTWMB  LNGNI  VRLPF  VTDMH  ZGNMW  KRXVR  QEKVR
  LKDBS  EIPUC  EAWJS  BAPMB  VSZCF  UEGIT  LEUOS  JOUOH
  UAVAG  ZEZIS  YRHVR  ZHUMF  RREMW  KNLKV  KGHAH  FEUBK
  LRGMB  JIHLI  IFWMB  ZHUMP  LEUWG  RBHZO  LCKVW  THWDS
  ILDAG  VNEMJ  FRVQS  VIQMU  VSWMZ  CTHII  WGDJS  XEOWS
  JTKIH  KEQ
\end{verbatim}

\chapter{Lösungen}
\section{Blatt 1}
\subsection*{Aufgabe 1}
\begin{enumerate}[a)]
 \item Kasiski-Test (Wiederholung von Zeichenketten länger als 2), Beispiele:
  \begin{tabular}{l|l}
    KFEIUERX & $50 = 2\cdot 5\cdot 5$\\
    TIB & $138 = 2\cdot3\cdot23$\\
    IZO
       LAH
       GYR
  \end{tabular}

 \item Friedman-Test: $I(c) = 0,0483$ und $d\approx3\mathord{,}93$.

 \item Wir entscheiden uns für $d=5$.
\end{enumerate}

\subsection*{Aufgabe 2}
Schlüsselwort "`bauer"'.

Es bleibt: suchen 5 Caesar-Chiffren
1. Spalte: B für E, d.\,h. B für A (Verschiebung 1)\\
2. Spalte: A für E, d.\,h. A für A (Verschiebung 0)\\
3. Spalte: U für E, d.\,h. U für A (Verschiebung 3)\\
4. Spalte: E für E, d.\,h. E für A (Verschiebung 4)\\
5. Spalte: R für E, d.\,h. R für A (Verschiebung 13)\\

\todo{Ich bin mir nicht mehr sicher, ob das so richtig war. Bitte gegenprüfen.}

\subsection*{Aufgabe 3}
Es mag ueberraschen, dass man von einem vorgelegten monoalphabetisch
chiffrierten Text leichter sagen kann, ob er englisch oder franzoesisch ist
als ihn zu entschluesseln. Dies gilt natuerlich auch fuer Klartext. Es gibt
ein einfaches Verfahren genuegend langen Klartext auf Zugehoerigkeit zu einer
bekannten Sprache zu untersuchen ohne seine Syntax und Semantik zu betrachten.

\section{Blatt 2}
\subsection*{Aufgabe 1}

\begin{enumerate}
 \item
  $m=WASSER$\\
  $22~0, 18~18, 4~17$\\
  $w_{1} = v_{1}\cdot K = 24~14$\\
  $w_{2} = v_{2}\cdot K = 8~16$\\
  $w_{3} = v_{3}\cdot K = 9~18$\\
  $c=YOIJS$

 \item $K^{-1}$ kann man mit dem erweiterten euklidischen Algorithmus
  bestimmen.
  \begin{gather*}
    K^{-1} = \begin{pmatrix}4& 5\\17& 23\end{pmatrix}\\
    b_{ij} = \frac{1}{\det K} (-1)^{i+j} K_{ji}\\
    b_{11} = 7\cdot8\pmod{26} = 56\pmod{26} = 4\\
    b_{12} = -7\cdot 3\pmod{26} = -21\pmod{26} = 5\\
    b_{21} = -7\cdot5\pmod{26} = -35\pmod{26} = 17\\
    b_{22} = 7\cdot7\pmod{26} = 49\pmod{26} = 23\\
    \det K = 7\cdot8 - 3\cdot5 \pmod{26} = 41\pmod{26} = 15 \\
    \det(K^{-1}) = 7
  \end{gather*}
\end{enumerate}

\subsection*{Aufgabe 2}
hund = 7~20~13~3\\
AFFE = 0~5~5~4

\begin{gather*}
  M \cdot \begin{pmatrix}7& 13\\20 & 3\end{pmatrix} =
     \begin{pmatrix}
       0& 5\\
       20& 3
     \end{pmatrix}\\
  M =
     \begin{pmatrix}
       15& 13\\4& 9
     \end{pmatrix} \cdot
     \begin{pmatrix}
       0& 5\\
       20& 3
     \end{pmatrix} =
     \begin{pmatrix}
       20& 19\\13& 23
     \end{pmatrix}
\end{gather*}

\subsection*{Aufgabe 3}
Bijektivität unabhängig von $b$
\begin{gather*}
  ax_{1} + b \equiv_{26} ax_{2}+ b \quad\Leftrightarrow\quad
     ax_{1} \equiv_{26} ax_{2}
\end{gather*}
falls $\ggT(26, a) = 1$, dann $x_{1}\equiv_{26} x_{2}$.
falls $\ggT(26, a) = g$, dann $x_{1}\equiv_{\frac{26}{g}} x_{2}$.

\begin{gather*}
  ax\equiv
\end{gather*}

Wenn $a$ teilerfremd zu 26, dann sind alle $\phi$ bijektiv. Wenn alle $a$
nicht teilerfremd zu 26, dann gibt es keine bijektiven Abbildungen.
\todo{bessere Erklärung}

$\exists l\in\Z\colon a(x_{1}-x_{2}) = k\cdot 26$

\section{Blatt 3}

\subsection*{Aufgab 3}
Den hoechsten Organisationsstand erfuhr die Kryptologie in Venedig, wo sie in
Form einer staatlichen Buerotaetigkeit ausgeuebt wurde. Es gab
Schluesselsekretaere die ihr Buero im Dogenpalast hatten und fuer ihre
Taetigkeit rund zehn Dukaten im Monat bekamen. Es wurde dafuer gesorgt, dass
sie waehrend ihrer Arbeit nicht gestoert wurden. Sie durften ihre bueros aber
auch nicht verlassen, bevor sie eine gestellte Aufgabe geloest hatten.

\clearpage
\pdfbookmark[0]{Index}{index}
\printindex

\end{document}
