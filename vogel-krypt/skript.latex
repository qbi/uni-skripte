% Einige zusätzliche Informationen für rubber
%  rubber erkennt nicht, dass die Datei weg kann, daher sagen wir es ihm
% rubber: clean $base.thm
%  rubber soll nach Änderungen an der Datei nochmal bauen
% rubber: watch $base.thm
% rubber: makeidx.tool      xindy
% rubber: makeidx.language  german-din
% rubber: makeidx.modules   indexstyle.xdy
%
% scrreprt trifft am Besten die Bedürfnisse eines Skripts, das ganze wird
% zweiseitig (twoside), d.h. es wird zwischen linker und rechter Seite
% unterschieden, und wir verwenden zwischen den Absätzen einen Abstand
% von einer halben Zeile (halfparskip) und dafür keinen Absatzeinzug,
% wobei die letzte Zeile eines Absatzes zu min. 1/4 leer ist.

\documentclass[halfparskip*,german,draft,twoside]{scrreprt}

\usepackage[l2tabu]{nag}  % nag überprüft den Text auf verältete Befehle
                          % oder solche, die man nicht in LaTeX verwenden
                          % soll -- l2tabu-Checker in LaTeX
\usepackage{ifthen}
\usepackage{makeidx}
\usepackage[final]{graphicx}  % Für Grafiken
\usepackage{color}
\usepackage[draft=false,colorlinks,bookmarksnumbered,linkcolor=blue]{hyperref}

\usepackage[latin1]{inputenc}
\usepackage{ngerman}
% \usepackage{nicefrac}
% \usepackage{tabularx}

\usepackage{lmodern}		% Latin Modern
% \usepackage{type1ec}           % cm-super
\usepackage[T1]{fontenc}        % T1-Schriften notwendig für PDFs
\usepackage{textcomp}           % wird benötigt, damit der \textbullet
                                % für itemize in lmodern gefunden wird.

\usepackage[intlimits,leqno]{amsmath}
\usepackage[all,warning]{onlyamsmath}  % warnt bei Verwendung von nicht
                                       % amsmath-Umgebungen z.\,B. $$...$$
\usepackage{amssymb}     % wird für \R, \C,... gebraucht
\usepackage{fixmath}     % ISO-konforme griech. Buchstaben

\usepackage[thmmarks,hyperref]{ntheorem} % für die Theorem-Umgebungen
                                         % (satz, defini, bemerk)
\usepackage{xspace}      % wird weiter unten gebraucht
\usepackage{slashbox}    % für schräge Striche links oben in der
                         % Tabelle; s. texdoc slashbox

\usepackage{paralist}    % besseres enumerate und itemize und neue
                         % compactenum/compactitem; s. texdoc paralist

\usepackage{svn}         % Zum Auswerten und ordentlichen Darstellen der
                         % SVN-Schlüsselwörter (s. vor \begin{document})
                         % dafür muss in SVN noch das Flag svn:keywords
                         % auf "LastChangedRevision LastChangedDate"
                         % gesetzt werden
\usepackage{ifpdf}       % Erkennung, ob PDF generiert wird; nützlich zur
                         % Unterscheidung bei Grafiken \input{XYZ.pdf_t}
\usepackage{ellipsis}    % Korrektur für \dots
\usepackage{fixltx2e}
\usepackage[final]{microtype} % Verbesserung der Typographie

% Damit auch die Zeichen im Mathemode in Überschriften fett sind
% <news:lzfyyvx3pt.fsf@tfkp12.physik.uni-erlangen.de>
\addtokomafont{sectioning}{\boldmath}

% nach dem Theoremkopf wird ein Zeilenumbruch eingefügt, die Schrift des
% Körpers ist normal und der Kopf wird fett gesetzt
\theoremstyle{break}
\theorembodyfont{\normalfont}
\theoremheaderfont{\normalfont\bfseries}
\theoremnumbering{arabic}

% Die folgenden Umgebungen werden einzeln nummeriert und am Ende jedes
% Kapitels zurückgesetzt
\newtheorem{satz}{Satz}[chapter]
\newtheorem{bemerk}{Bemerkung}[chapter]
\newtheorem{defini}{Definition}[chapter]
\newtheorem{bsp}{Beispiel}[chapter]
\newtheorem{festl}{Festlegung}[chapter]

% Die folgenden Theoremumgebungen bekommen keine Nummer
\theoremstyle{nonumberbreak}
\newtheorem{fakt}{Fakt}

\theoremheaderfont{\scshape}
\theorembodyfont{\normalfont}
% Das Zeichen am Ende eines Beweises
\theoremsymbol{\ensuremath{_\blacksquare}}
% \theoremsymbol{q.\,e.\,d.}
\newtheorem{proof}{Beweis:}

% Hier die Definition, wie \autoref die Umgebungen nennen soll, die mit
% \newtheorem definiert wurden
\newcommand*{\satzautorefname}{Satz}
\newcommand*{\bemerkautorefname}{Bemerkung}
\newcommand*{\definiautorefname}{Definition}
\newcommand*{\bspautorefname}{Beispiel}
\newcommand*{\festlautorefname}{Festlegung}
% Zwischen Unter- und Unterunterabschnitten sollte nicht unterschieden
% werden.
\renewcommand*{\subsectionautorefname}{Abschnitt}
\renewcommand*{\subsubsectionautorefname}{Abschnitt}

\pagestyle{headings}

\newcommand*{\R}{\mathbb{R}}      % reelle Zahlen
\newcommand*{\C}{\mathbb{C}}      % komplexe Zahlen
\newcommand*{\N}{\mathbb{N}}      % natürliche Zahlen
\newcommand*{\Q}{\mathbb{Q}}      % gebrochene Zahlen
\newcommand*{\Z}{\mathbb{Z}}      % ganze Zahlen

% Wenn irgendwo Unklarheiten zum Inhalt im Skript auftreten, können sie
% einfach mit \help{Ich verstehe das nicht} hervorgehoben werden. Dies
% macht es leichter sie alle zu finden und auch ganz einfach
% auszublenden, indem man den Befehl einfach leer definiert
\newcommand*{\help}[1]{\textcolor{green}{help: #1}}

% \todo ist das gleiche wie \help nur für offene Aufgaben
\newcommand*{\todo}[1]{\textcolor{red}{todo: #1}}

% Um wichtige Begriffe im Text überall gleich vorzuheben (gleiches
% Markup), sollte dieser Befehl verwendet werden. Das Argument wird
% automatisch als Indexeintrag verwendet. Dieser kann aber auch als
% optionales Argument selbst bestimmt werden.
\newcommand*{\highl}[2][]{\textbf{\boldmath{#2}}%
  \ifthenelse{\equal{#1}{}}{\index{#2}}{\index{#1}}%
}

% Definition für Xindy für die Trennung der einzelnen Abschnitte im
% Index. siehe auch die Datei indexstyle.xdy
\newcommand*{\indexsection}{\minisec}

% Für Leute, die nicht gern o.\,B.\,d.\,A. jedesmal eintippen wollen
\newcommand*{\obda}{o.\,B.\,d.\,A.\xspace}

% Diese Befehle sind dafür gedacht, dass die Symbole für "genau dann wenn"
% im ganzen Dokument gleich aussehen. Außerdem erlaubt es eine schnelle
% Veränderung aller Stellen, falls der Prof. doch nicht mehr gdw nimmt,
% sondern \Leftrightarrow.
\newcommand*{\gdw}{\ifthenelse{\boolean{mmode}}%
			       {\mspace{8mu}gdw\mspace{8mu}}%
			       {$gdw$\xspace}}
\newcommand*{\gdwdef}{\ifthenelse{\boolean{mmode}}%
			       {\mspace{8mu}gdw_{def}\mspace{8mu}}%
			       {$gdw_{def}$\xspace}}

% Um sicherzustellen, dass jeder Betrag-/jede Norm links und rechts die
% Striche bekommt, sind diese Befehle da. Damit kann man nicht die
% rechten Striche vergessen und es wird etwas übersichtlicher. (Vorschlag
% ist aus amsldoc) \abs[\big]{\abs{a}-\abs{b}} \leq \abs{a+b}
\newcommand*{\abs}[2][]{#1\lvert#2#1\rvert}
\newcommand*{\norm}[2][]{#1\lVert#2#1\rVert}

% Das original Epsilon sieht nicht so toll aus
\renewcommand*{\epsilon}{\varepsilon}
% ... und mancheinem gefällt auch das Phi nicht
\renewcommand*{\phi}{\varphi}

% Manchmal möchte man Begriffe erklären oder etwas aufzählen, das aber
% nicht fett gedruckt werden soll. Dazu diese Umdefinition einer
% description mit normaler Schrift
\newenvironment*{mdescription}%
               {\renewcommand{\descriptionlabel}[1]%
			      {\hspace\labelsep\normalfont ##1}%
		 \begin{description}}%
		 {\end{description}}

% rubber: depend fmc.mp
\iffalse\includegraphics{fmc.1}\fi
% rubber: clean fmc.1 fmc.2 fmc.3 fmc.4 fmc.5 fmc.6 fmc.7 fmc.8 fmc.9 fmc.10
% rubber: clean fmc.11 fmc.12 fmc.13 fmc.14 fmc.15 fmc.16 fmc.17 fmc.18 fmc.19
% rubber: clean fmc.20 fmc.21 fmc.22 fmc.23 fmc.24 fmc.25 fmc.26 fmc.log
\newcommand*{\fmc}[1]{\startfmc#1\Endfmc}
\newcounter{Zeichen}
\newcommand*{\Endfmc}{}
\makeatletter
\newcommand*{\startfmc}[1]{%
  \ifx#1\Endfmc%
  \else%
    \setcounter{Zeichen}{\the\lccode`#1}%
    \ifthenelse{\theZeichen < 97 \OR \theZeichen>122}{#1}%
               { \addtocounter{Zeichen}{-96}%
                 \includegraphics{fmc.\theZeichen}%
               }%
    \expandafter\startfmc%
  \fi%
}
\makeatother

\makeindex

\SVN $LastChangedRevision$
\SVN $LastChangedDate$

\newcounter{cnt}
\setcounter{cnt}{1}
\whiledo{\thecnt < 27}{%
  \DeclareGraphicsRule{.\thecnt}{\ifpdf mps\else eps\fi}{*}{}%
  \stepcounter{cnt}%
}

\begin{document}

\title{Kryptologie -- von einer Geheimwissenschaft zu einer Wissenschaft
  von den Geheimnissen}
\author{Dr.\, Jörg Vogel}
\date{WS 2006/07}
\maketitle

\clearpage
\chapter*{Vorwort}

% entspricht Vorlage: 426

\begin{itshape}
  Dieses Dokument wurde als Skript für die auf der
  Titelseite genannte Vorlesung erstellt und wird jetzt im Rahmen des
  Projekts
  "`\href{http://www.minet.uni-jena.de/~joergs/skripte/}
  {Vorlesungsskripte der Fakultät für Mathematik}
  \href{http://www.minet.uni-jena.de/~joergs/skripte/}{und Informatik}"'
  weiter betreut. Das
  Dokument wurde nach bestem Wissen und Gewissen angefertigt. Denoch
  garantiert weder der auf der Titelseite genannte Dozent, die Personen,
  die an dem Dokument mitgewirkt haben, noch die
  Mitglieder des Projekts für dessen Fehlerfreiheit. Für etwaige Fehler
  und dessen Folgen wird von keiner der genannten Personen eine Haftung
  übernommen. Es steht jeder Person frei, dieses Dokument zu lesen, zu
  verändern oder auf anderen Medien verfügbar zu machen, solange ein
  Verweis auf die Internetadresse des Projekts
  \url{http://www.minet.uni-jena.de/~joergs/skripte/}
  enthalten ist.

  Diese Ausgabe trägt die Versionsnummer~\SVNLastChangedRevision\ und ist
  vom \SVNDate. Eine (mögliche) aktuellere Ausgabe ist auf der Webseite
  des Projekts verfügbar.

  Jeder ist dazu aufgerufen Verbesserungen, Erweiterungen und
  Fehlerkorrekturen für das Skript einzureichen bzw. zu melden oder diese
  selbst einzupflegen -- einfach eine E-Mail an die
  \href{mailto:skripte@listserv.uni-jena.de}{Mailingliste
  \texttt{<skripte@listserv.uni-jena.de>}} senden. Weitere Informationen
  sind unter der oben genannten Internetadresse verfügbar.

  Hiermit möchten wir allen Personen, die an diesem Skript mitgewirkt
  haben, vielmals danken:
  \begin{itemize}
   \item \href{mailto:joerg@alea.gnuu.de}{Jörg Sommer
    \texttt{<joerg@alea.gnuu.de>}} (2006)
  \end{itemize}
\end{itshape}

\clearpage
\pdfbookmark[0]{Inhaltsverzeichnis}{inhaltsverzeichnis}
\tableofcontents

\clearpage
\pdfbookmark[0]{Auflistung der Sätze}{theoremlist}
\chapter*{Auflistung der Theoreme}

\pdfbookmark[1]{Sätze}{satzlist}
\section*{Sätze}
\theoremlisttype{optname}
\listtheorems{satz}

\pdfbookmark[1]{Definitionen und Festlegungen}{definilist}
\section*{Definitionen und Festlegungen}
% \theoremlisttype{all}
\listtheorems{defini,festl}

\chapter{Einführung in die Kryptologie}

\begin{defini}
  Kryptologie ist die Wissenschaft von der sicheren \textit{Übertragung}
  (und Speicherung) von Nachrichten! Die Übertragung erfolgt über
  \highl{Kanäle}: Boten, Kupferleitungen, Glasfaser, drahtlose
  Verbindungen, \dots
\end{defini}

Beeinträchtigungen bei der Übertragung
\begin{itemize}
 \item zufällige Störungen -- der Boote stürzt in eine Felsspalte
 \item systematische (physikalische bedingte) Störungen --
 \item passive Beeinträchtigungen -- Abhören von Telefongesprächen,
  Auslesen von Speichermedien
 \item aktive Beeinträchtigungen -- fälschen von Nachrichten und Daten
\end{itemize}
Mit den ersten beiden Punkten beschäftigt sich die Kodierungstheorie. Die
passiven und aktiven Beeinträchtigungen sind Gegenstand der Kryptologie.

Anforderungen an kryptologische Verfahren:
\begin{itemize}
 \item Geheimhaltung -- Lesen der Nachricht für Unbefugte möglichst
  schwierig zu machen
 \item Authentifizierung -- Identitätsnachweis des Senders; Empfänger
  weiß, dass die Nachricht nicht von einem Unbefugten stammt
 \item Integrität -- Nachricht wurde während der Übertragung nicht
  geändert, ohne das es bemerkt wird
 \item Verbindlichkeit -- Sender kann nicht leugnen, dass die Nachricht
  von ihm stammt
\end{itemize}

Die Anforderungen haben sich mit der Zeit geändert.
\begin{center}
  \begin{tabular}{p{.3\linewidth}|p{.3\linewidth}}
    früher & heute\\
    \hline
    Geheimhaltungen (bei militärischen Anwendungen) & zivile Anwendungen
       durch enormen Zuwachs der Kommunikation in Netzwerken
  \end{tabular}
\end{center}

\section{Grundbegriffe}
\begin{description}
 \item[Sender:] (Alice) Nachricht + Schlüssel (Klartext, plain text)
 \item[Verfahren:] Geheimtext (Chiffretext, Kryptogramm) --
  Verschlüsselungsverfahren, Chiffrierung, encryption
 \item[Übertragung:] Problem der Codierungstheorie
 \item[Empfänger:] (Bob) Schlüssel
 \item[Verfahren:] Entschlüsselung, Dechiffrierung, decryption
 \item[Klartext]
\end{description}

\begin{defini}[Kryptosystem]
  Bestandteile eines \highl{Kryptosystems}
  \begin{enumerate}
   \item Eine Menge von Nachrichten: \highl{Klartextraum} $\mathcal{M}$
    ($\subseteq\Sigma^{\ast}$), $m\in\mathcal{M}$ ist eine \highl{Nachricht}
    (Klartext)
   \item \highl{Chiffretextraum} $\mathcal{C}$ ($\subseteq\Gamma^{\ast}$) (die
    verschlüsselte Botschaft), $c\in\mathcal{C}$ ist eine Geheimtext
    (Chiffretext)
   \item \highl{Schlüsselraum} $\mathcal{K}$: jeder \highl{Schlüssel} $k\in\mathcal{K}$ ist
    ein Paar $k=(k_{e}, k_{d})$ zur Verschlüsselung $k_{e}$ und
    Entschlüsselung $k_{d}$
   \item \highl{Verschlüsselungsalgorithmus} $E\colon\mathcal{M}\times
    \mathcal{K}\rightarrow\mathcal{C}$ für den gilt $E(m, k_{e}) = c$,
    wobei für $m_{1}\ne m_{2}$ gilt $E(m_{1}, k_{e}) \ne E(m_{2}, k_{e})$
   \item \highl{Entschlüsselungsalgorithmus} $D\colon \mathcal{C}\times\mathcal{K}
    \rightarrow \mathcal{M}$ mit der Forderung $D(c, k_{d}) = m$
  \end{enumerate}
  Ein Kryptosystem $\mathcal{S}$ ist also damit ein Fünftupel
  $\mathcal{S}=(\mathcal{M}, \mathcal{C}, \mathcal{K}, E, D)$.
\end{defini}

\begin{defini}
  Ein Kryptosystem $\mathcal{S}$ heißt \highl{symmetrisch}, falls $k_{e}\ne
  k_{d}$ (bzw. $k_{d}$ sich "`leicht"' (polynomiell) aus $k_{e}$ berechnen lässt).

  Ein Kryptosystem $\mathcal{S}$ heißt \highl{asymmetrisch}, falls die
  Kenntnis von $k_{e}$ praktisch nichts über $k_{d}$ aussagt.
\end{defini}

Konsequenzen:
\begin{enumerate}
 \item Vor der Übertragung müssen sich Sender und Empfänger über das
  Verfahren einigen.
 \item Viele Schlüssel sind eine notwendige Vorraussetzung für die
  Sicherheit eines Verfahrens.
 \item Vor der Übertragung müssen sich Alice und Bob auf ein
  Schlüsselpaar $k=(k_{e},k_{d})$ einigen.
 \item Der Schlüssel $k_{d}$ muss geheim gehalten werden.
\end{enumerate}

\begin{bemerk}
  zu 3) Brauchen eine sichere Übertragung des Schlüssels! Warum dann
  nicht gleich die Nachricht selbst sicher übertragen?
  \begin{itemize}
   \item Im Allgemeinen ist die Nachricht wesentlich länger als der
    Schlüssel.
   \item Der Zeitpunkt der Schlüsselübergabe ist frei wählbar.
   \item Mit demselben Schlüssel lassen sich mehrere Schlüssel
    verschlüsseln.
  \end{itemize}
\end{bemerk}

\begin{defini}[Das Kerkhoff'sche Prinzip]
  Die \highl{Sicherheit} eines Kryptosystems hängt nur von der
  Geheimhaltung des Schlüssels ab nicht von der Geheimhaltung des
  Algorithmus'.
\end{defini}

Nochmal zur Erläuterung einiger Begriffe: Kryptologie besteht aus zwei
Teilen: der Kryptographie -- Die Kunst des Verschlüsselns -- und
Kryptoanalyse -- Die Kunst des Codebrechens.

% 18.10.2006

Ein Beispiel zur Kryptographie:
\begin{bsp}[praktische Kryptographie]
  Der
  \href{http://de.wikipedia.org/wiki/Freimaurer-Alphabet}{\highl{Freimaurercode}}
  (zweite Zeile) arbeitet ohne Schlüssel; Es wird jeder Buchstabe des Alphabets durch
  ein Geheimzeichen ersetzt. Damit ist der Freimaurercode kein
  Kryptosystem, da das Kerkhoff'sche Pinzip verlettzt ist: Die Sicherheit
  des Kryptosystems hängt von der Geheimhaltung des Algorithmus' ab.
  \begin{center}\ttfamily\large
    dieser satz ist geheim\\
    \fmc{dieser~satz~ist~geheim}\\
    UZVJVI JRKQ ZJK XVYVZD\\
    TFZZGR EDFY ABX IFFHXY
  \end{center}

  Beim \highl{Caesarcode} (dritte Zeile) wird jeder Buchstabe des Alphabets für sich
  durch den Buchstaben, der $x$ Positionen weiter hinten steht.
  $x\in\{1,2,\dotsc,25\} = \mathcal{K}$ ist der Schlüsel dieses
  Kryptosystems -- im obigen Beispiel ist $x=17$. nicht sicher

  \highl{One-Time-Pad} (vierte Zeile) Algorithmus: wähle (unabhängig und
  gleichverteilt) für jeden einzelnen Buchstaben eine Position
  $x=\{0,1,2,\dotsc,25\}$, um die dieser Buchstabe verschoben wird. Der
  Schlüssel ist ein $n$-Tupel $c=(x_{1},x_{2},\dotsc, x_{n})$ für eine
  Nachricht $m=(m_{1},m_{2},\dotsc, m_{n})$. Dieses Kryptosystem schützt
  sich nicht nur durch den großen Schlüsselraum $26^{n}$, sondern auch
  dadurch, dass jeder beliebige Text mit dem geeigneten Schlüssel erzeugt
  werden kann.
\end{bsp}

zur Kryptoanalyse: qualitative Unterscheidungen:
\begin{description}
 \item[vollständiges Aufbrechen:] der Schlüssel $k_{d}$ wird entdeckt.
  (jede Nachricht $m$, dir mit $k_{e}$ verschlüsselt wird, kann
  entschlüsselt werden)

 \item[globale Deduktion:] ohne Kenntniss von $k_{d}$ wird eine zu $D(\_,
  k_{d})$ äquivalente Übersetzung gefunden.

 \item[lokale Deduktion:] finden des Klartextes für einen einzelnen
  Chiffretext.
\end{description}

Arten von \highl{Angriffen} auf eine Kryptosystem:
\begin{description}
 \item[Cypthertext-Only-Attack:] Der Kryptoanalytiker verfügt über eine
  gewisse Menge von Geheimtexten.

 \item[Known-Plaintext-Attack:] Für einen gewissen Chiffretext ist der
  Klartext bekannt.

 \item[Chosen-Plaintext-Attack:] Für einen beliebigen Klartext ist es
  möglich sich den zugehörigen Chiffretext zu besorgen. (Typisch für
  public key-Verfahren)

 \item[Angriff durch Gewalt/Erpressung/Entführung]
 \item[Brute-Force-Attack:] Alle möglichen Schlüssel austesten.
\end{description}

Der Angreifer heißt Otto -- im wahren Leben heißt er Eve.

Klassifikation der Verfahren entsprechend der Sicherheit:
\begin{description}
 \item[uneingeschränkt sicher:] one-time-pad
 \item[praktisch sicher:] in praktikabler Zeit keine Lösung; Die
  Tageszeitung von Morgen erst nächste Woche entschlüsseln.
 \item[unsicher:] z.\,B. \highl{Caesarcode}
\end{description}

\subsection{Beispiel einer praktischen Kryptoanalyse}
Bedeuten "`viele"' Schlüssel "`hohe"' Sicherheit? \textit{Ansatz}:
Anstelle der Verschiebung der Buchstaben (beim Caesarcode) betrachten wir
eine Permutation der Buchstaben. -- Diese Zuordnung nennt man
\highl{monoalphabetisch}: Jedem Buchstaben wird ein Zeichen zugeordnung
\help{stimmt das? ist das die Definition?}.

Die Klartextbuchstaben: a b c d \dots x y z\\
Permutation (der Schlüssel): V J C E \dots A H D

Wieviele Schlüssel gibt es? $26! = 403\,291\,461\,126\,605\,635\,584\,000\,000$

Trotz dieses großen Schlüsselraums ist es möglich die Verschlüsselung zu
brechen.

\highl{Häufigkeitsanalyse:}
\begin{description}
 \item[1.\,Schritt] Buchstaben zählen:
  \texttt{C}: 62-mal, \texttt{Z}: 31-mal, \texttt{T}: 29-mal, \texttt{A}:
  27-mal, \texttt{F}: 22-mal, \texttt{L}: 20-mal, \texttt{J}: 19-mal, \dots
  \help{Tabelle mit Häufigkeiten der Buchstaben im Deutsch besorgen.}

 \item[2.\,Schritt] Häufige Buchstaben ersetzen: \texttt{C} entspricht
  \texttt{e}.

  Da die Zeichenfolge \texttt{ZZ} vorkommt, ist eine weiterer Ansatz,
  dass das \texttt{Z} dem \texttt{n} entspricht

  Aus den Teilen \texttt{CHZ} (\texttt{eHn}) und \texttt{CHZCZ}
  (\texttt{eHnen}) kann man schließen, dass das \texttt{H} dem \texttt{i}
  entspricht.

  Auffällig ist die Häufung des Wortes \texttt{CT} (\texttt{eT}). Dies
  könnte \texttt{er} oder \texttt{es} sein.

  Ebenso fällt das Wort \texttt{LCT} auf. Möglich: \texttt{der} oder
  \texttt{des}. Da "`der"' häufiger in deutschen Texten vorkommt,
  verwenden wir \texttt{r} für \texttt{T} und \texttt{d} für \texttt{L}.

 \item[3.\,Schritt] Lücken schließen:
  \begin{itemize}
   \item \texttt{iUn} ist sehr wahrscheinlich \texttt{ihn}; \texttt{U}
    entspricht \texttt{h}.

   \item \texttt{eJ} ist nicht \texttt{er} oder \texttt{ei} (da
    \texttt{r} und \texttt{i} schon vergeben), also \texttt{es};
    \texttt{J} entspricht \texttt{s}

   \item \texttt{dAJJ} ist \texttt{dass}; \texttt{A} ist \texttt{a}

   \item \texttt{UAFFe} ist \texttt{haFFe}, also \texttt{hatte};
    \texttt{F} ist \texttt{t}

   \item Erster Teilsatz: "`es hatte ein Wann einen eseN,"'; Aus dem
    Kontext folgt: \texttt{W} entspricht \texttt{m} und \texttt{N} ist
    \texttt{e}.

   \item weiter: "`der sDhOn LauGe Sahre die saeDVe"'; \texttt{D}
    entspricht \texttt{c}, \texttt{O} ist \texttt{o}, \texttt{G} ist
    \texttt{g} und \texttt{S} ist \texttt{j} und \texttt{V} ist \texttt{k}.
  \end{itemize}
\end{description}

% 23. Okt. 2006

\section{Klassische symmetrische Verfahren}

symbolisch: Zwei identische (daher symmetrisch) Schlüssel -- einer beim
Empfänger, einer beim Sender --, die beide eine Schatzkiste öffnen.

2 Unterscheidungsmerkmale:
\begin{enumerate}
 \item \highl{Substitution} vs. \highl{Translation}
  \begin{description}
   \item[Substitution]
    \begin{itemize}
     \item jeder Buchstabe wird verschlüssel durch ein Geheimtextalphabet
     \item jeder Buchstabe an seinem Platz
    \end{itemize}

   \item[Translation]
    \begin{itemize}
     \item jeder Buchstabe seine Gestalt
     \item die Buchstaben ändern ihre Position
    \end{itemize}
  \end{description}

  heute: Verallgemeinerung durch Kombination beider "`Urformen"'.

 \item \highl{Stromchiffren} vs. \highl{Blockchiffren}
  \begin{description}
   \item[Stromchiffren]
    \begin{itemize}
     \item jeder Buchstabe wird einzeln für sich verschlüsselt

     \item häufig wird für eine Nachricht $m=m_{1}m_{2}\dotso m_{n}$ und
      einen Anfangsschlüssel $k$ ein "`Strom von Schlüsseln"'
      $k_{1},k_{2},\dotsc, k_{n}$ erzeugt.
    \end{itemize}

   \item[Blockchiffren]
    \begin{itemize}
     \item Aufteilung des Klartextes in (längere) Blöcke, dir
      verschlüsselt werden
    \end{itemize}
  \end{description}
\end{enumerate}

\chapter{Substitionen}

Substitutionen werden unterschieden als:
\begin{enumerate}
 \item \highl{monoalphabetisch}: jeder Buchstabe des Klartextalphabets
  wird stets durch denselben Buchstaben des Geheimtextalphabets ersetzt

 \item \highl{polyalphabetisch} sonst
\end{enumerate}

\section{Monoalphabetische Substitutionen}

O.\,B.\,d.\,A. ist Klartextalphabet $\Sigma =$ Geheimtextalphabet $\Gamma$.
Wir legen uns weiter auf das Beispielalphabet $\{a,b,c,\dotsc,x,y,z\}$ fest
und schreiben es in der Form $X=\{0,1,2,\dotsc, 23,24,25\}$. Dann gilt:
$\abs{X} = 26$. Für $\abs{X}=n$ denken wir uns $X=\{0,1,2,\dotsc, n-2, n-1\}$.

\subsection{Verschlüsselungsverfahren}

Eine \highl{Verschlüssung} in diesem Rahmen ist eine Permution $\pi\colon X
\mapsto> X$ (Schlüssel). Aus einer Nachricht $m=m_{1}m_{2}\dotso m_{k}$ wird
der Geheimtext $c=\pi(m_{1})\pi(m_{2})\dotso \pi(m_{k})$. Es gibt hier $n!$
verschiedene Schlüssel, aber wir wissen bereits, dass dieses Verfahren
krypographisch auf Grund der \highl{Häufigkeitsverteilung} auch bei
\highl{Ciphertext-Only-Attakten} unsicher ist.

\subsection{Verschiebechiffre (Caesar)}

\begin{description}
 \item[Algorithmus:] $x\in X, x \mapsto x+1 \pmod{n}$
 \item[Schlüssel:] $i\in\{0,1,2,\dotsc,25\} = X$
 \item[Nachricht:] $m=m_{1}m_{2}\dotso m_{k}$
 \item[Geheimtext:] $c= (m_{1}+i \pmod{n}) (m_{2}+i \pmod{n}) \dotso (m_{k}+i
  \pmod{n}) = c_{1} c_{2} \dotso c_{k}$
 \item[Entschlüsselung:] $y\in X\colon y \mapsto y-1 \pmod{n}$ und es gilt: $m=
  (c_{1}-i \pmod{n}) (c_{2}-i \pmod{n}) \dotso (c_{k}-i \pmod{n}) = m_{1}
  m_{2}\dotso m_{k}$
\end{description}

Nachteile des Ganzen:
\begin{itemize}
 \item wenige ($n$) Schlüssel
 \item Verschlüsselung ist geknackt, wenn \textit{ein} Buchstabe übersetzt ist
\end{itemize}

Dies gibt Anlass zu folgender Verallgemeinerung.

\subsection{Tauschchiffren (affine Chiffren)}
\begin{description}
 \item[Algorithmus] $x\in X\colon x\mapsto a\cdot x+b \pmod{n}$
 \item[Schlüssel:] $(a,b), a, b\in X$ mit der Forderung, dass die Zuordnung
  bijektiv ist!

  Dazu muss gelten: $a$ und $n$ sind teilerfremd!

  (Beispiel: $n=26, a=13, b=0$ $E(2) = 13\cdot 2+0 \pmod{26} = 0 = 13 \cdot 0
  +0 \pmod{26} = E(0)$)
\end{description}

Es gibt also $\phi(n)$ Möglichkeiten $a$ zu wählen und insgesamt $\phi(n)\cdot
n$ Schlüssel $(a,b)$.

\texttt{text} = $19~04~23~19 \mapsto 04~07~24~04$ = \texttt{EHYE}, mit
$x\mapsto 5x+13$

Nachteile:
\begin{itemize}
 \item Verschlüsselung ist gekackt, wenn \textit{zwei} Buchstaben übersetzt
  sind.
 \item Häufigkeitsverteilung der natürlichen Sprache.
\end{itemize}

\section{Homophone Substitutionen}

\highl{Homophone Substitutionen} versuchen die strukturelle Schwäche, die
durch die Häufigkeitsverteilung der Buchstaben bei natürlichen Sprachen
gegeben ist, der monoalphabetischen Verschlüsselung aufzuheben.

Dafür führt man ein \textit{neues} und \textit{größeres} Geheimtextalphabet
$Y=\Gamma$ und eine Abbildung $f\colon X\mapsto \mathfrak{P}(Y)$ \help{sollte
das nicht $\mathfrak{P}(X)$ sein?} ein, wobei verschiedene Buchstaben
disjunkten Teilmengen entsprechen. Für eine Nachricht $m=m_{1}m_{2}\dotso
m_{k}$ ist der Geheimtext $c=c_{1}c_{2}\dotso c_{k}$, wobei $c_{i}$ zufällig
aus $f(m_{i})$ gewäht wird. (Italien um 1400).

Der Vorteil einer solchen homophonen Substitution besteht darin, dass die
Häufigkeitsverteilung der Klartextbuchstaben wird zerstört, unter folgender
Randbedingung: für $x\in X$ sei $p(x)$ die relative Häufigkeit mit der der
Buchstabe $x$ in Texten auftritt. Dann wird $f(x)$ so gewählt, dass
$\frac{p(x)}{\abs{f(x)}} \approx konst.$ ist!

Der Effekt des Ganzen ist: Im Geheimtext treten alle Buchstaben aus
$\bigcup_{x\in X} f(x)$ etwa gleichwahrscheinlich auf!

\begin{bemerk}
  Es gibt ein homophones Verschlüsselungsverfahren mit folgender Eigenschaft:
  Für jeden Geheimtext~$c$ gibt es mindestens zwei verschiedene Schlüssel, die
  $c$ in zwei verschiedene sinnvolle Klartexte überführen.
\end{bemerk}

Wie funktioniert dies? Das Klartextalphabet sei $X$ (mit $\abs{X}=n$). Dann
ist das Geheimtextalphabet $Y = \{1,2,\dotsc,n^{2}\}$. Der Schlüsselraum wird
beschrieben durch eine $n\times n$-Matrix. Die Zeilen und Spalten werden mit
den Buchstaben aus $X$ indiziert.
\begin{table}
  \centering
  \begin{tabular}{c|*{6}{c}}
     & $x_{1}$ & $x_{2}$ & \dots & $x_{i}$ & \dots & $x_{n}$\\
    \hline
    $x_{1}$ &\\
    $x_{2}$ &\\
    \dots &\\
    $x_{j}$ &\\
    \dots &\\
    $x_{n}$ &
  \end{tabular}
  \caption{Das ist eine leere Tabelle}
\end{table}

Die Eintragungen sind die (zufälligen angeordneten) Buchstaben von $Y$. Wir
definieren zwei Abbildungen:
\begin{align*}
  f_{1}(x_{j}) = \{ y\in Y\colon y \text{~steht in der $j$-ten Zeile} \}\\
  f_{2}(x_{i}) = \{ y\in Y\colon y \text{~steht in der $i$-ten Spalte} \}
\end{align*}

Es sei $m=m_{1}m_{2}\dotso m_{k}$ der zu verschlüsselnde Klartext. Suchen
einen weiteren Klartext $l'=l_{1}'l_{2}'\dotso l_{k}'$ gleicher Länge.

Verschlüsselung: $m_{i}\mapsto c_{i}\in f_{1}(m_{i}) \cap f_{2}(l_{i})$.
$c_{i}$ ist der Eintrag in der Matrix, der im Schnittpunkt von $m_{i}=x_{r}$
und $l_{i}=x_{s}$ ($r$-ter Zeile und $s$-ter Spalte).

Ein \highl{Brute-force-Angriff} bleibt prinzipell wirkungslos, weil jeder
Geheimtext in zwei verschiedene Klartexte übersetzt werden kann!

Es bleibt ein Nachteil: für alle $x\in X$ ist $\abs{f(x)}$ gleich groß. Damit
ist $\frac{p(x)}{\abs{f(x)}}$ verletzt. Aber die Idee ist, dass der Angreifer
nicht sagen kann, welcher der beiden konkorierenden Klartexte der richtige ist.

\clearpage
\pdfbookmark[0]{Index}{index}
\printindex

\end{document}
