% ToDo:
%   + Es sollte Befehle für Klartext und Chiffretext geben, damit die Texte im
%     gesamten Dokument gleich aussehen. z.\,B. \klartext=\texttt\uppercase
%     und \chiffretext=\texttt\lowercase; \MakeUppercase \MakeLowercase
%     \bstv = Buchstabe verschlüsselt
%     \bstu = Buchstabe unverschlüsselt
%     \textv = Text verschlüsselt
%     \textu = Text unverschlüsselt

% Einige zusätzliche Informationen für rubber
%  rubber erkennt nicht, dass die Datei weg kann, daher sagen wir es ihm
% rubber: clean $base.thm
%  rubber soll nach Änderungen an der Datei nochmal bauen
% rubber: watch $base.thm
% rubber: makeidx.tool      xindy
% rubber: makeidx.language  german-din
% rubber: makeidx.modules   indexstyle.xdy
%
% scrreprt trifft am Besten die Bedürfnisse eines Skripts, das ganze wird
% zweiseitig (twoside), d.h. es wird zwischen linker und rechter Seite
% unterschieden, und wir verwenden zwischen den Absätzen einen Abstand
% von einer halben Zeile (halfparskip) und dafür keinen Absatzeinzug,
% wobei die letzte Zeile eines Absatzes zu min. 1/4 leer ist.

\documentclass[halfparskip*,german,draft,twoside]{scrreprt}

\usepackage[l2tabu]{nag}  % nag überprüft den Text auf verältete Befehle
                          % oder solche, die man nicht in LaTeX verwenden
                          % soll -- l2tabu-Checker in LaTeX
\usepackage{ifthen}
\usepackage{makeidx}
\usepackage[final]{graphicx}  % Für Grafiken
\usepackage{color}
\usepackage[draft=false,colorlinks,bookmarksnumbered,linkcolor=blue]{hyperref}

\usepackage[latin1]{inputenc}
\usepackage{ngerman}

\usepackage{lmodern}		% Latin Modern
\usepackage[T1]{fontenc}        % T1-Schriften notwendig für PDFs
\usepackage{textcomp}           % wird benötigt, damit der \textbullet
                                % für itemize in lmodern gefunden wird.

\usepackage[intlimits,leqno]{amsmath}
\usepackage[all,warning]{onlyamsmath}  % warnt bei Verwendung von nicht
                                       % amsmath-Umgebungen z.\,B. $$...$$
\usepackage{amssymb}     % wird für \R, \C,... gebraucht
\usepackage{fixmath}     % ISO-konforme griech. Buchstaben

\usepackage[thmmarks,hyperref]{ntheorem} % für die Theorem-Umgebungen
                                         % (satz, defini, bemerk)
\usepackage{paralist}    % besseres enumerate und itemize und neue
                         % compactenum/compactitem; s. texdoc paralist

\usepackage{svn}         % Zum Auswerten und ordentlichen Darstellen der
                         % SVN-Schlüsselwörter (s. vor \begin{document})
                         % dafür muss in SVN noch das Flag svn:keywords
                         % auf "LastChangedRevision LastChangedDate"
                         % gesetzt werden
\usepackage{ifpdf}       % Erkennung, ob PDF generiert wird; nützlich zur
                         % Unterscheidung bei Grafiken \input{XYZ.pdf_t}
\usepackage{ellipsis}    % Korrektur für \dots
\usepackage{fixltx2e}
\usepackage[final]{microtype} % Verbesserung der Typographie

% Damit auch die Zeichen im Mathemode in Überschriften fett sind
% <news:lzfyyvx3pt.fsf@tfkp12.physik.uni-erlangen.de>
\addtokomafont{sectioning}{\boldmath}

% nach dem Theoremkopf wird ein Zeilenumbruch eingefügt, die Schrift des
% Körpers ist normal und der Kopf wird fett gesetzt
\theoremstyle{break}
\theorembodyfont{\normalfont}
\theoremheaderfont{\normalfont\bfseries}
\theoremnumbering{arabic}

% Die folgenden Umgebungen werden einzeln nummeriert und am Ende jedes
% Kapitels zurückgesetzt
\newtheorem{satz}{Satz}[chapter]
\newtheorem{bemerk}{Bemerkung}[chapter]
\newtheorem{defini}{Definition}[chapter]
\newtheorem{bsp}{Beispiel}[chapter]
\newtheorem{festl}{Festlegung}[chapter]

% Die folgenden Theoremumgebungen bekommen keine Nummer
\theoremstyle{nonumberbreak}
\newtheorem{fakt}{Fakt}

\theoremheaderfont{\scshape}
\theorembodyfont{\normalfont}
% Das Zeichen am Ende eines Beweises
\theoremsymbol{\ensuremath{_\blacksquare}}
% \theoremsymbol{q.\,e.\,d.}
\newtheorem{proof}{Beweis:}

% Hier die Definition, wie \autoref die Umgebungen nennen soll, die mit
% \newtheorem definiert wurden
\newcommand*{\satzautorefname}{Satz}
\newcommand*{\bemerkautorefname}{Bemerkung}
\newcommand*{\definiautorefname}{Definition}
\newcommand*{\bspautorefname}{Beispiel}
\newcommand*{\festlautorefname}{Festlegung}
% Zwischen Unter- und Unterunterabschnitten sollte nicht unterschieden
% werden.
\renewcommand*{\subsectionautorefname}{Abschnitt}
\renewcommand*{\subsubsectionautorefname}{Abschnitt}

\pagestyle{headings}

\newcommand*{\R}{\mathbb{R}}      % reelle Zahlen
\newcommand*{\C}{\mathbb{C}}      % komplexe Zahlen
\newcommand*{\N}{\mathbb{N}}      % natürliche Zahlen
\newcommand*{\Q}{\mathbb{Q}}      % gebrochene Zahlen
\newcommand*{\Z}{\mathbb{Z}}      % ganze Zahlen
\newcommand*{\F}{\mathbb{F}}      % für $\F_{2}=\{0,1\}$

% Wenn irgendwo Unklarheiten zum Inhalt im Skript auftreten, können sie
% einfach mit \help{Ich verstehe das nicht} hervorgehoben werden. Dies
% macht es leichter sie alle zu finden und auch ganz einfach
% auszublenden, indem man den Befehl einfach leer definiert
\newcommand*{\help}[1]{\textcolor{green}{help: #1}}

% \todo ist das gleiche wie \help nur für offene Aufgaben
\newcommand*{\todo}[1]{\textcolor{red}{todo: #1}}

% Um wichtige Begriffe im Text überall gleich vorzuheben (gleiches
% Markup), sollte dieser Befehl verwendet werden. Das Argument wird
% automatisch als Indexeintrag verwendet. Dieser kann aber auch als
% optionales Argument selbst bestimmt werden.
\newcommand*{\highl}[2][]{\textbf{\boldmath{#2}}%
  \ifthenelse{\equal{#1}{}}{\index{#2}}{\index{#1}}%
}

% Definition für Xindy für die Trennung der einzelnen Abschnitte im
% Index. siehe auch die Datei indexstyle.xdy
\newcommand*{\indexsection}{\minisec}

% Um sicherzustellen, dass jeder Betrag-/jede Norm links und rechts die
% Striche bekommt, sind diese Befehle da. Damit kann man nicht die
% rechten Striche vergessen und es wird etwas übersichtlicher. (Vorschlag
% ist aus amsldoc) \abs[\big]{\abs{a}-\abs{b}} \leq \abs{a+b}
\newcommand*{\abs}[2][]{#1\lvert#2#1\rvert}
\newcommand*{\norm}[2][]{#1\lVert#2#1\rVert}

% Das original Epsilon sieht nicht so toll aus
\renewcommand*{\epsilon}{\varepsilon}
% ... und mancheinem gefällt auch das Phi nicht
\renewcommand*{\phi}{\varphi}

% Manchmal möchte man Begriffe erklären oder etwas aufzählen, das aber
% nicht fett gedruckt werden soll. Dazu diese Umdefinition einer
% description mit normaler Schrift
\newenvironment*{mdescription}%
               {\renewcommand{\descriptionlabel}[1]%
			      {\hspace\labelsep\normalfont ##1}%
		 \begin{description}}%
		 {\end{description}}

% rubber: depend fmc.mp
\iffalse\includegraphics{fmc.1}\fi
% rubber: clean fmc.1 fmc.2 fmc.3 fmc.4 fmc.5 fmc.6 fmc.7 fmc.8 fmc.9 fmc.10
% rubber: clean fmc.11 fmc.12 fmc.13 fmc.14 fmc.15 fmc.16 fmc.17 fmc.18 fmc.19
% rubber: clean fmc.20 fmc.21 fmc.22 fmc.23 fmc.24 fmc.25 fmc.26 fmc.log
\newcommand*{\fmc}[1]{\startfmc#1\Endfmc}
\newcounter{Zeichen}
\newcommand*{\Endfmc}{}
\makeatletter
\newcommand*{\startfmc}[1]{%
  \ifx#1\Endfmc%
  \else%
    \setcounter{Zeichen}{\the\lccode`#1}%
    \ifthenelse{\theZeichen < 97 \OR \theZeichen>122}{#1}%
               {\addtocounter{Zeichen}{-96}%
                 \includegraphics{fmc.\theZeichen}%
               }%
    \expandafter\startfmc%
  \fi%
}
\makeatother

% Dr. Vogel gebraucht gern das Zeichen |->> für bijektive Abbildungen.
% <news:ehom5s$bk9$1@news.BelWue.DE> <news:ehqi2q$bb4$02$1@news.t-online.com>
\makeatletter
\newcommand*{\mapstoto}{%
  \mathrel{%
    \ifpdf
      \pdfliteral direct{%
        /Span<</ActualText<FEFF2905>>>BDC%
      }%
    \fi
    \mathrel{\mapstochar\twoheadrightarrow}%
    \ifpdf
      \pdfliteral direct{EMC}%
    \fi
  }%
}
\def\@palette@rlap#1#2{%
  \rlap{$#1#2$}%
}
\makeatother

\makeindex

\SVN $LastChangedRevision$
\SVN $LastChangedDate$

\newcounter{cnt}
\setcounter{cnt}{1}
\whiledo{\thecnt < 27}{%
  \DeclareGraphicsRule{.\thecnt}{\ifpdf mps\else eps\fi}{*}{}%
  \stepcounter{cnt}%
}

\begin{document}

\title{Kryptologie -- von einer Geheimwissenschaft zu einer Wissenschaft
  von den Geheimnissen}
\author{Dr.\, Jörg Vogel}
\date{WS 2006/07}
\maketitle

\clearpage
\chapter*{Vorwort}

% entspricht Vorlage: 426

\begin{itshape}
  Dieses Dokument wurde als Skript für die auf der
  Titelseite genannte Vorlesung erstellt und wird jetzt im Rahmen des
  Projekts
  "`\href{http://www.minet.uni-jena.de/~joergs/skripte/}
  {Vorlesungsskripte der Fakultät für Mathematik}
  \href{http://www.minet.uni-jena.de/~joergs/skripte/}{und Informatik}"'
  weiter betreut. Das
  Dokument wurde nach bestem Wissen und Gewissen angefertigt. Denoch
  garantiert weder der auf der Titelseite genannte Dozent, die Personen,
  die an dem Dokument mitgewirkt haben, noch die
  Mitglieder des Projekts für dessen Fehlerfreiheit. Für etwaige Fehler
  und dessen Folgen wird von keiner der genannten Personen eine Haftung
  übernommen. Es steht jeder Person frei, dieses Dokument zu lesen, zu
  verändern oder auf anderen Medien verfügbar zu machen, solange ein
  Verweis auf die Internetadresse des Projekts
  \url{http://www.minet.uni-jena.de/~joergs/skripte/}
  enthalten ist.

  Diese Ausgabe trägt die Versionsnummer~\SVNLastChangedRevision\ und ist
  vom \SVNDate. Eine (mögliche) aktuellere Ausgabe ist auf der Webseite
  des Projekts verfügbar.

  Jeder ist dazu aufgerufen Verbesserungen, Erweiterungen und
  Fehlerkorrekturen für das Skript einzureichen bzw. zu melden oder diese
  selbst einzupflegen -- einfach eine E-Mail an die
  \href{mailto:skripte@listserv.uni-jena.de}{Mailingliste
  \texttt{<skripte@listserv.uni-jena.de>}} senden. Weitere Informationen
  sind unter der oben genannten Internetadresse verfügbar.

  Hiermit möchten wir allen Personen, die an diesem Skript mitgewirkt
  haben, vielmals danken:
  \begin{itemize}
   \item \href{mailto:joerg@alea.gnuu.de}{Jörg Sommer
    \texttt{<joerg@alea.gnuu.de>}} (2006)
  \end{itemize}
\end{itshape}

\clearpage
\pdfbookmark[0]{Inhaltsverzeichnis}{inhaltsverzeichnis}
\tableofcontents

\clearpage
\pdfbookmark[0]{Auflistung der Sätze}{theoremlist}
\chapter*{Auflistung der Theoreme}

\pdfbookmark[1]{Sätze}{satzlist}
\section*{Sätze}
\theoremlisttype{optname}
\listtheorems{satz}

\pdfbookmark[1]{Definitionen und Festlegungen}{definilist}
\section*{Definitionen und Festlegungen}
% \theoremlisttype{all}
\listtheorems{defini,festl}

\chapter{Einführung in die Kryptologie}

\begin{defini}
  Kryptologie ist die Wissenschaft von der sicheren \textit{Übertragung}
  (und Speicherung) von Nachrichten. Die Übertragung erfolgt über
  \highl{Kanäle}. Diese können Boten, Kupferleitungen, Glasfaser, drahtlose
  Verbindungen und einiges mehr sein.
\end{defini}

Beeinträchtigungen bei der Übertragung
\begin{itemize}
 \item zufällige Störungen -- der Boote stürzt in eine Felsspalte
 \item systematische (physikalische bedingte) Störungen --
 \item passive Beeinträchtigungen -- Abhören von Telefongesprächen,
  Auslesen von Speichermedien
 \item aktive Beeinträchtigungen -- fälschen von Nachrichten und Daten
\end{itemize}
Mit den ersten beiden Punkten beschäftigt sich die Kodierungstheorie. Die
passiven und aktiven Beeinträchtigungen sind Gegenstand der Kryptologie.

Anforderungen an kryptologische Verfahren:
\begin{itemize}
 \item Geheimhaltung -- Lesen der Nachricht für Unbefugte möglichst
  schwierig zu machen
 \item Authentifizierung -- Identitätsnachweis des Senders; Empfänger
  weiß, dass die Nachricht nicht von einem Unbefugten stammt
 \item Integrität -- Nachricht wurde während der Übertragung nicht
  geändert, ohne das es bemerkt wird
 \item Verbindlichkeit -- Sender kann nicht leugnen, dass die Nachricht
  von ihm stammt
\end{itemize}

Die Anforderungen haben sich mit der Zeit geändert.
\begin{center}
  \begin{tabular}{p{.3\linewidth}|p{.3\linewidth}}
    früher & heute\\
    \hline
    Geheimhaltungen (bei militärischen Anwendungen) & zivile Anwendungen
       durch enormen Zuwachs der Kommunikation in Netzwerken
  \end{tabular}
\end{center}

\section{Grundbegriffe}
\begin{description}
 \item[Sender:] (Alice) Nachricht + Schlüssel (Klartext, plain text)
 \item[Verfahren:] Geheimtext (Chiffretext, Kryptogramm) --
  Verschlüsselungsverfahren, Chiffrierung, encryption
 \item[Übertragung:] Problem der Codierungstheorie
 \item[Empfänger:] (Bob) Schlüssel
 \item[Verfahren:] Entschlüsselung, Dechiffrierung, decryption
 \item[Klartext]
\end{description}

\begin{defini}[Kryptosystem]
  Bestandteile eines \highl{Kryptosystems}
  \begin{enumerate}
   \item Eine Menge von Nachrichten: \highl{Klartextraum} $\mathcal{M}$
    ($\subseteq\Sigma^{\ast}$), $m\in\mathcal{M}$ ist eine \highl{Nachricht}
    (Klartext)
   \item \highl{Chiffretextraum} $\mathcal{C}$ ($\subseteq\Gamma^{\ast}$) (die
    verschlüsselte Botschaft), $c\in\mathcal{C}$ ist eine Geheimtext
    (Chiffretext)
   \item \highl{Schlüsselraum} $\mathcal{K}$: jeder \highl{Schlüssel} $k\in\mathcal{K}$ ist
    ein Paar $k=(k_{e}, k_{d})$ zur Verschlüsselung $k_{e}$ und
    Entschlüsselung $k_{d}$
   \item \highl{Verschlüsselungsalgorithmus} $E\colon\mathcal{M}\times
    \mathcal{K}\rightarrow\mathcal{C}$ für den gilt $E(m, k_{e}) = c$,
    wobei für $m_{1}\ne m_{2}$ gilt $E(m_{1}, k_{e}) \ne E(m_{2}, k_{e})$
   \item \highl{Entschlüsselungsalgorithmus} $D\colon \mathcal{C}\times\mathcal{K}
    \rightarrow \mathcal{M}$ mit der Forderung $D(c, k_{d}) = m$
  \end{enumerate}
  Ein Kryptosystem $\mathcal{S}$ ist also damit ein Fünftupel
  $\mathcal{S}=(\mathcal{M}, \mathcal{C}, \mathcal{K}, E, D)$.
\end{defini}

\begin{defini}
  Ein Kryptosystem $\mathcal{S}$ heißt \highl{symmetrisch}, falls $k_{e}\ne
  k_{d}$ (bzw. $k_{d}$ sich "`leicht"' (polynomiell) aus $k_{e}$ berechnen lässt).

  Ein Kryptosystem $\mathcal{S}$ heißt \highl{asymmetrisch}, falls die
  Kenntnis von $k_{e}$ praktisch nichts über $k_{d}$ aussagt.
\end{defini}

Konsequenzen:
\begin{enumerate}
 \item Vor der Übertragung müssen sich Sender und Empfänger über das
  Verfahren einigen.
 \item Viele Schlüssel sind eine notwendige Vorraussetzung für die
  Sicherheit eines Verfahrens.
 \item Vor der Übertragung müssen sich Alice und Bob auf ein
  Schlüsselpaar $k=(k_{e},k_{d})$ einigen.
 \item Der Schlüssel $k_{d}$ muss geheim gehalten werden.
\end{enumerate}

\begin{bemerk}
  zu 3) Man braucht eine sichere Übertragung des Schlüssels! Warum
  kann dann nicht gleich die Nachricht selbst sicher übertragen werden?
  \begin{itemize}
   \item Im Allgemeinen ist die Nachricht wesentlich länger als der
    Schlüssel.
   \item Der Zeitpunkt der Schlüsselübergabe ist frei wählbar.
   \item Mit demselben Schlüssel lassen sich mehrere Schlüssel
    verschlüsseln.
  \end{itemize}
\end{bemerk}

\begin{defini}[Das Kerkhoff'sche Prinzip]
  Die \highl{Sicherheit} eines Kryptosystems hängt nur von der
  Geheimhaltung des Schlüssels ab nicht von der Geheimhaltung des
  Algorithmus'.
\end{defini}

Nochmal zur Erläuterung einiger Begriffe: Kryptologie besteht aus zwei
Teilen: der \highl{Kryptographie} -- Die Kunst des Verschlüsselns -- und
\highl{Kryptoanalyse} -- Die Kunst des Codebrechens.

% 18.10.2006

Ein Beispiel zur Kryptographie:
\begin{bsp}[praktische Kryptographie]
  Der
  \href{http://de.wikipedia.org/wiki/Freimaurer-Alphabet}{\highl{Freimaurercode}}
  (zweite Zeile) arbeitet ohne Schlüssel; Es wird jeder Buchstabe des Alphabets durch
  ein Geheimzeichen ersetzt. Damit ist der Freimaurercode kein
  Kryptosystem, da das Kerkhoff'sche Pinzip verletzt ist: Die Sicherheit
  des Kryptosystems hängt von der Geheimhaltung des Algorithmus' ab.
  \begin{center}\ttfamily\large
    dieser satz ist geheim\\
    \fmc{dieser~satz~ist~geheim}\\
    UZVJVI JRKQ ZJK XVYVZD\\
    TFZZGR EDFY ABX IFFHXY
  \end{center}

  Beim \highl{Caesarcode} (dritte Zeile) wird jeder Buchstabe des Alphabets für sich
  durch den Buchstaben, der $x$ Positionen weiter hinten steht.
  $x\in\{1,2,\dotsc,25\} = \mathcal{K}$ ist der Schlüsel dieses
  Kryptosystems -- im obigen Beispiel ist $x=17$. nicht sicher

  \highl{One-Time-Pad} (vierte Zeile) Algorithmus: wähle (unabhängig und
  gleichverteilt) für jeden einzelnen Buchstaben eine Position
  $x=\{0,1,2,\dotsc,25\}$, um die dieser Buchstabe verschoben wird. Der
  Schlüssel ist ein $n$-Tupel $c=(x_{1},x_{2},\dotsc, x_{n})$ für eine
  Nachricht $m=(m_{1},m_{2},\dotsc, m_{n})$. Dieses Kryptosystem schützt
  sich nicht nur durch den großen Schlüsselraum $26^{n}$, sondern auch
  dadurch, dass jeder beliebige Text mit dem geeigneten Schlüssel erzeugt
  werden kann.
\end{bsp}

zur Kryptoanalyse: qualitative Unterscheidungen:
\begin{description}
 \item[vollständiges Aufbrechen:] der Schlüssel $k_{d}$ wird entdeckt.
  (jede Nachricht $m$, dir mit $k_{e}$ verschlüsselt wird, kann
  entschlüsselt werden)

 \item[globale Deduktion:] ohne Kenntniss von $k_{d}$ wird eine zu $D(\_,
  k_{d})$ äquivalente Übersetzung gefunden.

 \item[lokale Deduktion:] finden des Klartextes für einen einzelnen
  Chiffretext.
\end{description}

Arten von \highl{Angriffen} auf eine Kryptosystem:
\begin{description}
 \item[Cyphertext-Only-Attack:] Der Kryptoanalytiker verfügt über eine
  gewisse Menge von Geheimtexten.

 \item[Known-Plaintext-Attack:] Für einen gewissen Chiffretext ist der
  Klartext bekannt.

 \item[Chosen-Plaintext-Attack:] Für einen beliebigen Klartext ist es
  möglich, sich den zugehörigen Chiffretext zu besorgen. (Typisch für
  Public-Key-Verfahren)

  \item[Adaptive-chosen-plaintext-Attack] Spezialfall der obigen
  Attacke. Hier wählt der Kryptoanalytiker einen Klartext basierend
  auf dem Ergebnis der vorigen Verschlüsselung.

  \item[Chosen-Ciphertext-Attack] Verschiedene Chiffrate können
  entschlüsselt werden und es besteht Zugriff zum entschlüsselten Text.

  \item[Chosen-Key-Attack] Man hat Wissen über die Beziehungen
  verschiedener Schlüssel untereinander (i.\,d.\,R. nicht praktisch
  relevant)

 \item[Rubber-Hose-Cryptanalysis] Angriff durch Gewalt/Erpressung/Entführung
  
 \item[Brute-Force-Attack:] Alle möglichen Schlüssel austesten. Dieses
  Verfahren sollte das effektivste sein.
\end{description}

Der Angreifer heißt Otto -- im wahren Leben heißt er Eve.

Klassifikation der Verfahren entsprechend der Sicherheit:
\begin{description}
 \item[uneingeschränkt sicher:] one-time-pad
 \item[praktisch sicher:] in praktikabler Zeit keine Lösung; Die
  Tageszeitung von Morgen erst nächste Woche entschlüsseln.
 \item[unsicher:] z.\,B. \highl{Caesarcode}
\end{description}

\subsection{Beispiel einer praktischen Kryptoanalyse}
Bedeuten "`viele"' Schlüssel "`hohe"' Sicherheit? \textit{Ansatz}:
Anstelle der Verschiebung der Buchstaben (beim Caesarcode) betrachten wir
eine Permutation der Buchstaben. -- Diese Zuordnung nennt man
\highl{monoalphabetisch}: Jedem Buchstaben des Klartexts wird ein
Zeichen des Chiffretexts zugeordnet.

Die Klartextbuchstaben: a b c d \dots x y z\\
Permutation (der Schlüssel): V J C E \dots A H D

Wieviele Schlüssel gibt es? $26! = 403\,291\,461\,126\,605\,635\,584\,000\,000$

Trotz dieses großen Schlüsselraums ist es möglich die Verschlüsselung zu
brechen.

\highl{Häufigkeitsanalyse:}
\begin{enumerate}[1.\,{Schritt:}]
 \item Buchstaben zählen:
  \texttt{C}: 62-mal, \texttt{Z}: 31-mal, \texttt{T}: 29-mal, \texttt{A}:
  27-mal, \texttt{F}: 22-mal, \texttt{L}: 20-mal, \texttt{J}: 19-mal, \dots

  \begin{table}
    \centering
    \begin{tabular}{cc*{3}{||cc}}
      Bst. & Wsk. & Bst. & Wsk. & Bst. & Wsk. & Bst. & Wsk.\\
      \hline
      E & 17,40\,\% & D & 5,08\,\% & O & 2,51\,\% & V & 0,67\,\%\\
      N & 9,78\,\%  & H & 4,76\,\% & B & 1,89\,\% & ß & 0,31\,\%\\
      I & 7,55\,\%  & U & 4,35\,\% & W & 1,89\,\% & J & 0,27\,\%\\
      S & 7,27\,\%  & L & 3,44\,\% & F & 1,66\,\% & Y & 0,04\,\%\\
      R & 7,00\,\%  & C & 3,06\,\% & K & 1,21\,\% & X & 0,03\,\%\\
      A & 6,51\,\%  & G & 3,01\,\% & Z & 1,13\,\% & Q & 0,02\,\%\\
      T & 6,15\,\%  & M & 2,53\,\% & P & 0,79\,\% & \\
    \end{tabular}
    \parbox{12cm}{
      \caption{Häufigkeitsverteilung der Buchstaben der deutschen
        Sprache. Die Buchstaben ä, ö, ü wurden wie ae, oe, ue gezählt.
        \textit{Quelle:
        \href{http://de.wikipedia.org/wiki/Buchstabenh\%C3\%A4ufigkeit}%
             {Wikipedia}}}}
    \label{tab:buchswsk}
  \end{table}

 \item Häufige Buchstaben ersetzen: \texttt{C} entspricht
  \texttt{e}.

  Da die Zeichenfolge \texttt{ZZ} vorkommt, ist eine weiterer Ansatz,
  dass das \texttt{Z} dem \texttt{n} entspricht

  Aus den Teilen \texttt{CHZ} (\texttt{eHn}) und \texttt{CHZCZ}
  (\texttt{eHnen}) kann man schließen, dass das \texttt{H} dem \texttt{i}
  entspricht.

  Auffällig ist die Häufung des Wortes \texttt{CT} (\texttt{eT}). Dies
  könnte \texttt{er} oder \texttt{es} sein.

  Ebenso fällt das Wort \texttt{LCT} auf. Möglich: \texttt{der} oder
  \texttt{des}. Da "`der"' häufiger in deutschen Texten vorkommt,
  verwenden wir \texttt{r} für \texttt{T} und \texttt{d} für \texttt{L}.

 \item Lücken schließen:
  \begin{itemize}
   \item \texttt{iUn} ist sehr wahrscheinlich \texttt{ihn}; \texttt{U}
    entspricht \texttt{h}.

   \item \texttt{eJ} ist nicht \texttt{er} oder \texttt{ei} (da
    \texttt{r} und \texttt{i} schon vergeben), also \texttt{es};
    \texttt{J} entspricht \texttt{s}

   \item \texttt{dAJJ} ist \texttt{dass}; \texttt{A} ist \texttt{a}

   \item \texttt{UAFFe} ist \texttt{haFFe}, also \texttt{hatte};
    \texttt{F} ist \texttt{t}

   \item Erster Teilsatz: "`es hatte ein Wann einen eseN,"'; Aus dem
    Kontext folgt: \texttt{W} entspricht \texttt{m} und \texttt{N} ist
    \texttt{e}.

   \item weiter: "`der sDhOn LauGe Sahre die saeDVe"'; \texttt{D}
    entspricht \texttt{c}, \texttt{O} ist \texttt{o}, \texttt{G} ist
    \texttt{g} und \texttt{S} ist \texttt{j} und \texttt{V} ist \texttt{k}.
  \end{itemize}
\end{enumerate}

% 23. Okt. 2006

\section{Klassische symmetrische Verfahren}

symbolisch: Zwei identische (daher symmetrisch) Schlüssel -- einer beim
Empfänger, einer beim Sender --, die beide eine Schatzkiste öffnen.

2 Unterscheidungsmerkmale:
\begin{enumerate}
 \item \highl{Substitution} vs. \highl{Translation}
  \begin{description}
   \item[Substitution]
    \begin{itemize}
     \item jeder Buchstabe wird durch ein Geheimtextalphabet
      verschlüsselt.
     \item jeder Buchstabe an seinem Platz
    \end{itemize}

   \item[Translation]
    \begin{itemize}
     \item jeder Buchstabe seine Gestalt
     \item die Buchstaben ändern ihre Position
    \end{itemize}
  \end{description}

  heute: Verallgemeinerung durch Kombination beider "`Urformen"'.

 \item \highl{Stromchiffren} vs. \highl{Blockchiffren}
  \begin{description}
   \item[Stromchiffren]
    \begin{itemize}
     \item jeder Buchstabe wird einzeln für sich verschlüsselt

     \item häufig wird für eine Nachricht $m=m_{1}m_{2}\dotso m_{n}$ und
      einen Anfangsschlüssel $k$ ein "`Strom von Schlüsseln"'
      $k_{1},k_{2},\dotsc, k_{n}$ erzeugt.
    \end{itemize}

   \item[Blockchiffren]
    \begin{itemize}
     \item Aufteilung des Klartextes in (längere) Blöcke, die
      verschlüsselt werden
    \end{itemize}
  \end{description}
\end{enumerate}

\chapter{Substitionen}

Substitutionen werden unterschieden als:
\begin{enumerate}
 \item \highl{monoalphabetisch}: jeder Buchstabe des Klartextalphabets
  wird stets durch denselben Buchstaben des Geheimtextalphabets ersetzt

 \item \highl{polyalphabetisch} sonst
\end{enumerate}

\section{Monoalphabetische Substitutionen}

O.\,B.\,d.\,A. ist Klartextalphabet $\Sigma =$ Geheimtextalphabet $\Gamma$.
Wir legen uns weiter auf das Beispielalphabet $\{a,b,c,\dotsc,x,y,z\}$ fest
und schreiben es in der Form $X=\{0,1,2,\dotsc,\linebreak[1] 23,24,25\}$. Dann gilt:
$\abs{X} = 26$. Für $\abs{X}=n$ denken wir uns $X=\{0,1,2,\dotsc, n-2,\linebreak[1] n-1\}$.

\subsection{Verschlüsselungsverfahren}

Eine \highl{Verschlüssung} in diesem Rahmen ist eine Permution $\pi\colon X
\mapstoto X$ (Schlüssel). Aus einer Nachricht $m=m_{1}m_{2}\dotso m_{k}$ wird
der Geheimtext $c=\pi(m_{1})\pi(m_{2})\dotso \pi(m_{k})$. Es gibt hier $n!$
verschiedene Schlüssel, aber wir wissen bereits, dass dieses Verfahren
krypographisch auf Grund der \highl{Häufigkeitsverteilung} auch bei
\highl{Ciphertext-Only-Attakten} unsicher ist.

\subsection{Verschiebechiffre (Caesar)}

\begin{description}
 \item[Algorithmus:] $x\in X, x \mapsto x+1 \pmod{n}$
 \item[Schlüssel:] $i\in\{0,1,2,\dotsc,25\} = X$
 \item[Nachricht:] $m=m_{1}m_{2}\dotso m_{k}$
 \item[Geheimtext:] $c= (m_{1}+i \pmod{n}) (m_{2}+i \pmod{n}) \dotso (m_{k}+i
  \pmod{n}) = c_{1} c_{2} \dotso c_{k}$
 \item[Entschlüsselung:] $y\in X\colon y \mapsto y-1 \pmod{n}$ und es gilt: $m=
  (c_{1}-i \pmod{n}) (c_{2}-i \pmod{n}) \dotso (c_{k}-i \pmod{n}) = m_{1}
  m_{2}\dotso m_{k}$
\end{description}

Nachteile des Ganzen:
\begin{itemize}
 \item wenige ($n$) Schlüssel
 \item Verschlüsselung ist geknackt, wenn \textit{ein} Buchstabe übersetzt ist
\end{itemize}

Dies gibt Anlass zu folgender Verallgemeinerung.

\subsection{Tauschchiffren (affine Chiffren)}
\begin{description}
 \item[Algorithmus] $x\in X\colon x\mapsto a\cdot x+b \pmod{n}$
 \item[Schlüssel:] $(a,b), a, b\in X$ mit der Forderung, dass die Zuordnung
  bijektiv ist!

  Dazu muss gelten: $a$ und $n$ sind teilerfremd!

  (Beispiel: $n=26, a=13, b=0$ $E(2) = 13\cdot 2+0 \pmod{26} = 0 = 13 \cdot 0
  +0 \pmod{26} = E(0)$)
\end{description}

Es gibt also $\phi(n)$ Möglichkeiten $a$ zu wählen und insgesamt $\phi(n)\cdot
n$ Schlüssel $(a,b)$.

\texttt{text} = $19~04~23~19 \mapsto 04~07~24~04$ = \texttt{EHYE}, mit
$x\mapsto 5x+13$

Nachteile:
\begin{itemize}
 \item Verschlüsselung ist gekackt, wenn \textit{zwei} Buchstaben übersetzt
  sind.
 \item Häufigkeitsverteilung der natürlichen Sprache.
\end{itemize}

\section{Homophone Substitutionen}

\highl{Homophone Substitutionen} versuchen die strukturelle Schwäche der
monoalphabetischen Verschlüsselung, die durch die Häufigkeitsverteilung
der Buchstaben bei natürlichen Sprachen gegeben ist, aufzuheben.

Dazu führt man ein \textit{neues} und \textit{größeres} Geheimtextalphabet $Y$
und eine Abbildung $f\colon X\mapsto \mathfrak{P}(Y)$ ein, wobei verschiedene
Buchstaben disjunkten Teilmengen entsprechen. Für eine Nachricht
$m=m_{1}m_{2}\dotso m_{k}$ ist der Geheimtext $c=c_{1}c_{2}\dotso c_{k}$,
wobei $c_{i}$ zufällig aus $f(m_{i})$ gewäht wird. (Italien um 1400).

\begin{bsp}
  Für das Klartextalphabet $X=\{a,b,c\}$, wobei die Buchstaben mit den
  Wahrscheinlichkeiten 0,5\,\%, 0,35\,\% und 0,15\,\% vorkommen, verwenden wir das
  Geheimalphabet $Y=\{0,1,\dotsc,7\}$. Dazu definieren wir die Abbildung $f$
  wie folgt
  \begin{gather*}
    f(x) =
       \begin{cases}
         \{0, 3, 4, 7\} &\colon x= a\\
         \{1, 5, 6\} &\colon x=b\\
         \{2\} &\colon x=c
       \end{cases}
  \end{gather*}

  Der Buchstabe $b$ wird also durch die drei Zeichen 1, 5 und 6 codiert. Das
  Wort cbba könnte z.\,B. als 2514 oder 2663 verschlüsselt werden.
\end{bsp}

Der Vorteil einer solchen homophonen Substitution besteht darin, dass die
Häufigkeitsverteilung der Klartextbuchstaben zerstört wird, wenn für alle
$x\in X$, wobei $p(x)$ die relative Häufigkeit ist, mit der der Buchstabe $x$
in Texten auftritt, $f(x)$ so gewählt wird, dass $\frac{p(x)}{\abs{f(x)}}$ für
alle $x$ annähernd gleich ist!

Der Effekt des Ganzen ist, dass im Geheimtext alle Buchstaben des
Geheimtextalphabets~$Y$ etwa gleichwahrscheinlich auftreten!

\begin{bemerk}
  Es gibt ein homophones Verschlüsselungsverfahren mit folgender Eigenschaft:
  Für jeden Geheimtext~$c$ gibt es mindestens zwei verschiedene Schlüssel, die
  $c$ in zwei verschiedene, sinnvolle Klartexte überführen.
\end{bemerk}

\begin{table}
  \centering
  \begin{tabular}{c|*{6}{c}}
     & $x_{1}$ & $x_{2}$ & \dots & $x_{i}$ & \dots & $x_{n}$\\
    \hline
    $x_{1}$ & $y_{\frac{n^{2}}{9}}$ & $y_{\frac{7n^{2}}{8}}$ &
       \dots & $y_{\frac{n^{2}}{4}}$ & \dots & $y_{\frac{n^{2}}{2}}$\\
    $x_{2}$ & $y_{n^{2}}$ & $\ddots$\\
    \vdots &\\
    $x_{j}$ &\\
    \vdots & & & & & $\ddots$ & \vdots\\
    $x_{n}$ & & & & & \dots & $y_{\frac{n^{2}}{12}}$
  \end{tabular}
  \caption{Zuordnung von $n$ Zeichen des Klartextalph. auf $n^{2}$
    Zeichen des Geheimalph.}
  \label{tab:1}
\end{table}

Wie funktioniert dies? Das Klartextalphabet sei $X$ (mit $\abs{X}=n$) und
$Y$ (mit $\abs{Y}=n^{2}$) das Geheimtextalphabet. Der Schlüsselraum wird
beschrieben durch eine $n\times n$-Matrix. Die Zeilen und Spalten werden mit
den Buchstaben aus $X$ indiziert und die Eintragungen sind die (zufällig
angeordneten) Buchstaben von $Y$. Siehe \autoref{tab:1}. Wir definieren zwei
Abbildungen:
\begin{align*}
  f_{1}(x_{j}) &= \{ y\in Y\colon y \text{~steht in der $j$-ten Zeile} \}\\
  f_{2}(x_{i}) &= \{ y\in Y\colon y \text{~steht in der $i$-ten Spalte} \}
\end{align*}

Es sei $m=m_{1}m_{2}\dotso m_{k}$ der zu verschlüsselnde Klartext und
$l'=l_{1}'l_{2}'\dotso l_{k}'$ ein weiterer sinnvoller Klartext gleicher Länge.

Als Verschlüsselung für $m_{i}$ verwenden wir den Eintrag in der Matrix, der
im Schnittpunkt von $m_{i}=x_{r}$ und $l_{i}=x_{s}$ ($r$-ter Zeile und $s$-ter
Spalte) liegt.
\begin{gather*}
  m_{i}\mapsto c_{i}\in f_{1}(m_{i}) \cap f_{2}(l_{i})
\end{gather*}

Ein \highl{Brute-force-Angriff} bleibt bei solch einer Verschlüsselung
prinzipell wirkungslos, weil jeder Geheimtext in zwei verschiedene,
\textit{sinnvolle} Klartexte übersetzt werden kann!

Jedoch bleibt weiterhin der Nachteil bestehen, dass für alle $x\in X$ ist
$\abs{f(x)}$ gleich groß ist. Damit die Forderung, dass $\frac{p(x)}%
{\abs{f(x)}}$ für alle $x$ annähernd gleich ist, verletzt. Aber die Idee ist,
dass der Angreifer nicht sagen kann, welcher der beiden konkurrierenden
Klartexte der richtige ist.

% 25. 10. 2006

\begin{bsp}
  Das Klartextalphabet $X$ sei das deutsche Alphabet und wir wählen als
  Geheimtextalphabet $Y=\{00, 01, \dotsc, 10,11,\dotsc,99\}$
  ($\abs{Y}=100$). Die Zuordnung $f\colon X\rightarrow
  \mathfrak{P}(Y)$ wählen wir so, dass gilt: Für alle Buchstaben $x\in X$ ist $\abs{f(x)}\approx
  p(x)\cdot 100$.

  In der Tabelle mit Häufigkeiten der Buchstaben \autoref{tab:buchswsk} sehen
  wir, dass z.\,B. \texttt{c} mit der Wahrscheinlichkeit 3,06\,\% auftritt.
  Also wählen wir zufällig für \texttt{c} drei Zeichen aus $Y$, z.\,B. $07, 23, 42$.
\end{bsp}

\subsection{Ansatz zur Kryptoanalyse einer homophonen Verschlüsselung}

Eine weitere Idee für einen Angriff ist andere Unregelmäßigkeiten --~neben der
Häufigkeitsverteileung der Buchstaben~-- in der deutschen Sprache zu finden.
Dazu betrachten wir sogenannte \highl{Digramme} (Zweierfolgen von Buchstaben)
in Texten. Dafür gibt es insgesamt $2^{26}$ mögliche Paarungen. Beispiele für
Digramme sind \textit{en} und \textit{er}, die mit einer Wahrscheinlichkeit
von ca.~4\,\% in deutschen Texten auftreten. Das Digramm \textit{ch} tritt mit
einer Wahrscheinlichkeit von ca.~2,75\,\% und die Digramme \textit{de},
\textit{te}, \textit{nd}, \textit{ei}, \textit{ie}, \textit{es}, \textit{in}
treten mit der Wahrscheinlichkeit von ca.~2\,\% auf.

Damit haben wir bereits eine Anomalie gefunden. Wärend die Buchstaben
\textit{e} und \textit{n} häufig auftreten und auch das Digramm aus beiden
\textit{en} häufig auftritt, ist es im Fall von \textit{c}, \textit{h} und
\textit{ch} nicht so. Die einzelnen Buchstaben sind recht selten (siehe
\autoref{tab:buchswsk}), das Digramm jedoch tritt sehr häufig auf.

Ausgangspunkt: Verschlüsselung von \glq{}c\grq{}. Es $\abs{f(c)} =k$
(z.\,B. $k=3$) Dann müssen (etwa) folgende Relationen erfüllt sein:
$\abs{f(\mathtt{e})}\approx 6k, \abs{f(\mathtt{n})} \approx 3k,
\abs{f(\mathrm{i})} \approx 2\mathord{,}5k, \abs{f(\mathrm{r})} \approx
2\mathord{,}5k$

"`en"' wird auf $6k\cdot 3k = 18k^{2}$ verschiedene Weisen verschlüsselt.
"`ch"' wird auf $k\cdot 1\mathord{,}5k = 1\mathord{,}5k^{2}$ verschiedene Weisen verschlüsselt.

Ein Digramm, dass "`en"' verschlüsselt, tritt mit einer Häufigkeit von
$\frac{4\,\%}{18}\approx 0\mathord{,}25\,\%$ auf. Für "`ch"' ist die Häufigkeit
$\frac{2\mathord{,}5\,\%}{1\mathord{,}5\,\%}\approx 1\mathord{,}6\,\%$.

Dies ist ein Ansatz zunächst die Verschlüsselung für \textit{c} und
\textit{h} zu knacken. Vorraussetzung für einen solchen Angriff ist aber
ein wirklich langer Geheimtext!

\section{Polyalphabetische Verschlüssung}

Polyalphabetische Verschlüssung hat ebenfalls das Ziel, die Häufigkeit
der Buchstaben zu verwischen. Ein prominentes Beispiel ist
\highl{Vigenère-Chiffre} von dem franz. Diplomat Blaise Vigenère (16.\,Jh.),
die erst im 19.\,Jahrhundert gebrochen wurde.

\begin{table}
  \centering
  \begin{minipage}{14cm}
    \ttfamily\footnotesize
    ~~~%
    \setcounter{cnt}{1}%
    \whiledo{\thecnt < 27}{%
      \alph{cnt}~~%
      \stepcounter{cnt}%
    }\\
    \newcounter{cntline}\setcounter{cntline}{1}%
    \newcounter{cntcol}%
    \setcounter{cnt}{1}%
    \whiledo{\thecntline < 27}{%
      \ifthenelse{\thecnt > 26}{\addtocounter{cnt}{-26}}{}%
      \alph{cnt}~~%
      \setcounter{cntcol}{1}%
      \whiledo{\thecntcol < 27}{%
        \ifthenelse{\thecnt > 26}{\addtocounter{cnt}{-26}}{}%
        \Alph{cnt}~~%
        \stepcounter{cnt}%
        \stepcounter{cntcol}%
      }\\
      \stepcounter{cnt}%
      \stepcounter{cntline}%
    }
  \end{minipage}
  \caption{Das Vigenère-Quadrat.}
  \label{tab:vig}
\end{table}

Die Idee der Vigenère-Chiffre ist, dass jeder Buchstabe mit einer anderen
Caesar-Chiffre verschlüsselt wird, aber nicht zufällig, sondern strukturiert.
Mithilfe eines Schlüsselworts.

\begin{bsp}
  Als Schlüsselwort nehmen wir "`ALLGAEU"' und als Klartext "`emmentaler"'.
  \todo{Viginere-Quadrat einfügen}

  ALLGAEUALLGAEU\\
  emmentaler\\
  EXXKNXULPC

  Verschlüsselung ist einfach.
\end{bsp}

\begin{bemerk}
  Wir sehen folgendes in dem Beispiel: "`e"' wird zu "`E"', "`K"' und
  "`P"'. Umgekehrt entsteht "`X"' aus "`m"' und "`t"'.

  Das ist eine neue Situation.
\end{bemerk}

\subsection{Formale Beschreibung}

zunächst allgemein: ein Klartextalphabet $X$ mit $\abs{X}=n$ (z.\,B.
$n=26$) und $d$ Geheimtextalphabete $Y_{0}, Y_{1}, \dotsc, Y_{d-1}$. Dazu
$d$ bijektive Abbildungen $f_{i}\colon X \mapstoto Y_{i}$
($i=0,\dotsc,d-1$) und eine surjektive Abbildung $h\colon\N\mapsto
\{0,1,\dotsc,d-1\}$ ($h(x)=x\pmod{d}$).

Klartext: $m=m_{1}m_{2}\dotso m_{t}$ ($m_{j}\in X$)\\
Geheimtext: $c= f_{h(1)}(m_{1}) f_{h(2)}(m_{2}) \dotso f_{h(t)}(m_{t}) =
c_{1} c_{2}\dotso c_{t}$\\
Schlüssel: ist bestimmt durch $h$ und $f_{0}, f_{1}, \dotsc, f_{d-1}$. Es
wird der "`Schlüsselstrom"' $f_{h(1)}, f_{h(2)}, \dotsc, f_{h(t)}$
erzeugt. Daher \highl{Stromchiffre}.

jetzt für Vigenère: $X=\{0,1,\dotsc,n-1\}$ und $n=26$
$Y_{0}=Y_{1}=\dotsb= Y_{d} = X$. Dabei ist $d$ die Länge des
Schlüsselworts. $h(x) = x\pmod{d}$ (für jede Position $x\in\N$).
$f_{i}(a) = a+ j_{i}\pmod{n}$ (für $a\in X$) für festes $j_{i}\in X$.
Der Schlüssel ist dabei $j_{0},j_{1},j_{2},\dotsc$.

Effekt: Unterschiedliche Buchstabenhäufigkeiten werden ausgeglichen!

Und weil's so schön war, noch ein
\begin{bsp}
  Statt dem Alphabet $\{a, b, c, \dotsc, x,y,z\}$ verwenden wir
  $X=\{0,1,\dotsc,25\}$. Als Schlüsselwort nehmen wir "`KRYPTO"' ($d=6$
  mit sechs verschidenen Buchstaben) als $10,17,24,15,19,14 =
  j_{0},j_{1}, j_{2}, j_{3}, j_{4}, j_{5}$. Klartext:
  "`kommemorgennicht"' = $10,14,12,12,04,12,14,17,06,04,13,13,08,02,07,19$

  Wir machen uns eine Tabelle.
  \begin{tabular}{l*{6}{|c}|}
    Schlüsselwort & 10 & 17 & 24 & 15 & 19 & 14\\
    \hline
    1.\,Zeile     & 10 & 14 & 12 & 12 & 04 & 12\\
                  & 20 & 05 & 10 & 01 & 23 & 00\\
    \hline\hline
    3.\, Zeile    & 14 & 17 & 06 & 04 & 13 & 13\\
                  & 24 & 08 & 04 & 19 & 06 & 01\\
    \hline\hline
    5.\,Zeile     & 08 & 02 & 07 & 19\\
                  & 18 & 19 & 05 & 08
  \end{tabular}

  Geheimtext: UFKBXAYIETGBSTFI
\end{bsp}

% 2006-10-30

\subsection{Analyse der polyalphabetischen Verschlüsselung}

Angriffspunkt: Die Verschlüsselung ist periodisch. Die Teiltexte sind
monoalphabetische verschlüsselt. Zwei Globalschritte: 1) Bestimmung der
Periode und 2) Entschlüsselung der monoalphabetischen Teiltexte mithilfe der
Häufigkeitsanalyse. Bemerkung: Warum funktioniert die Häufigkeitsanalyse bei
den Teiltexten? Obwohl die Teiltexte keine sinnvollen Texte sind, stellt sich
bei "`langen"' Texten die gleiche Häufigkeitsverteilung der Buchstabe ein.

Bei einer Periodenlänge~$d$ stehen die \highl{Teiltexte} an den Positionen
$k+nd$ mit $1\leq k \leq d$ und $n\in\N_{0}$.

Frage: Wie kann man $d$ bestimmten? Es folgen zwei verschiedene Möglichkeiten:

\subsubsection{Brute-force-Angriff auf polyalphabetische Verschlüsselung}

Teste systematisch $d=1,2,3,\dotsc$

Erstelle Häufigkeitsanalyse für die entstehenden Teiltexte. Falls eine
natürliche Häufigkeitsverteilung auftritt, dann nimm dieses $d$. (Die
Erfahrung zeigt, dass für unpassende $d$ die Häufiggkeitsverteilung nivelliert
ist.).

Dies Funktioniert nur für kleine $d$!

\subsubsection{Kasiski-Test}\index{Kasiski-Test}

(eigentlich von Charles Babbage 1854 entdeckt, aber von Kasiski das erste Mal
veröffentlicht)

Beobachtung: (Typische) Buchstabenfolgen (Teilwörter), die sich im Abstand
eines Vielfachen der Periodenlänge wiederholen, werden auf das gleiche Muster
abgebildet! Für "`genügend lang"' Texte kommt dies auch vor.

Ansatz: Suche alle mehrfach auftretenden Muster der Länge größer zwei.
Bestimme die Abstände, bestimme die Primfaktoren für die Abstände, entscheide
sich für häufig vorkommende Teiler (z.\,B. es treten fast immer 2 und 3 auf,
dann vermute, dass $d=6$ -- ich glaube, man sagt $\operatorname{ggT}$ dazu.),
teste mit dem brute-force-Angriff.

\subsubsection{Friedmann-Test}\index{Friedmann-Test}

von Wilhelm Friedmann (1893--1969); "`Mathematik hilft"', genauer "`Statistik
hilf"', beim Ausrechnen der Periodenlänge. Die entscheidende statistische
Größe ist der Koinzidenzindex~$I(t)$ für einen Text~$t$. Für ein Alphabet
$A=\{a_{1},\dotsc, a_{n}\}$ (mit $\abs{A}=n$) und einen Text~$t$ der
Länge~$l$ ist der \highl{Koinzidenzindex}~$I(t)$ die Wahrscheinlichkeit dafür,
dass an zwei zufällig gewählten Positionen in dem Text der selbe Buchstabe
steht.

Es sei $l_{i}$ die relative Häufigkeit (Anzahl der Vorkommen) des
Buchstaben~$a_{i}$, d.\,h.
\begin{gather*}
  l=\sum_{i=1}^{n} l_{i}
\end{gather*}
Die Anzahl der Mengen von zwei zufällig gewählten Positionen von $t$ ist
$\binom{l}{2}$.

Die Anzahl der Mengen von zwei zufällig gewählten Positionen mit gleichen
Buchstaben beträgt
\begin{gather*}
  \sum_{i=1}^{n} \binom{l_{i}}{2} = \sum_{i=1}^{n} \frac{l_{i}(l_{1}-1)}{2}
\end{gather*}

Jetzt können wir die Wahrscheinlichkeit, dass für eine zufällig gewählte Menge
von zwei zufällig gewählten Positionen zwei gleiche Buchstaben in $t$ stehen,
bestimmen:
\begin{gather*}
  I(t) = \frac{\sum_{i=1}^{n} l_{i}(l_{i}-1)}{l(l-1)}
\end{gather*}

Wir betrachten jetzt das Alphabet $A=\{a,b,c,\dotsc,x,y,z\}$ (codiert durch
$\{0,1,\dotsc,25\}$, also $n=26$). Fakt: für lange deutsche Texte gilt:
$I_{\mathrm{deutsch}}(t) = I_{d} \approx 0\mathord{,}0762$
Diese Größe wurde statistisch ermittelt.

Man stellt dagegen den \highl{Koinzidenzindex} für "`reine Zufallstexte"'. Für
solche Texte gilt: $l_{1}=l_{2}=\dotsb= l_{26}$
\begin{gather*}
  I = \frac{\sum_{i=1}^{26} l_{i}(l_{i}-1)}{l(l-1)}
     = \frac{\sum_{i=1}^{26} l_{i}^{2}}{l(l-1)}
     - \frac{\sum_{i=1}^{26} l_{i}}{l(l-1)}
     = \frac{\sum_{i=1}^{26}l_{i}^{2}}{l(l-1)}
     - \frac{1}{l(l-1)}
     = \frac{\sum_{i=1}^{26} l_{i}^{2}}{l^{2}(1-\frac{1}{l})} - \frac{1}{l-1}
     = \frac{l}{l-1} \sum_{i=1}^{26} \frac{l_{i}^{2}}{l^{2}} - \frac{1}{l-1}
  \intertext{für größe $l$}
  \approx \sum_{i=1}^{26} \frac{l_{i}^{2}}{l^{2}} = \sum_{i=1}^{26}
     \Big(\frac{l_{i}}{l}\Big)^{2} = \sum_{i=1}^{26}
     \Big(\frac{1}{26}\Big)^{2} = \frac{1}{26} = 0\mathord{,}0385 =: I_{z}
\end{gather*}

Fazit: Die Wahrscheinlichkeit an zufällig gewählten Positionen denselben
Buchstaben zu finden, ist in deutschen Texten doppelt so groß wie in
Zufallstexten.

Wir betrachten einen Geheimtext, der das Ergebnis einer polyalphabetischen
Verschlüsselung mit Periode~$d$ (und lang genug) ist. Wir betrachten die
Teiltexte $1, d+1, 2d+1,\dotsc; 2, d+2, 2d+2,\dotsc; 3, d+3,
2d+3,\dotsc;\dotsc$ Wenn die Teiltexte lang genug sind, stellen sich in den
Teiltexten die natürlichen Häufigkeiten ein, aber zwischen den Teiltexten
(d.\,h. von einer Spalte zu einer anderen) zufällige Häufigkeiten. Wählt man
zufällig zwei Positionen in einem Teiltext: $I_{d} = 0\mathord{,}0762$. Wählt
man zufällig zwei Positionen in unterschiedlichen Teiltexten: $I_{z}=
0\mathord{,}0385$.

\begin{bemerk}
  Aussage 2 ("`Wählt man zufällig zwei Positionen in unterschiedlichen
  Teiltexten: $I_{z}= 0\mathord{,}0385$."') tritt dann zu, wenn durch die
  verwendeten verschiedenen Permutationen (Verschiebungen) sich die
  Buchstabenhäufigkeiten nivellieren!
\end{bemerk}

Wir betrachten nun einen Geheimtext~$c$ der Länge~$l$ (mit Periode~$d$). Dann
haben die Teiltexte etwas die Länge~$\frac{l}{d}$. Dann gibt es etwa
\begin{gather*}
  \frac{1}{2} \cdot \frac{l}{d}\cdot (\frac{l}{d}-1)\cdot d = \frac{l(l-d)}{2d}
\end{gather*}
zufällige Paare in ein und demselben Teiltext über alle Teiltexte.

Und es gibt etwa
\begin{gather*}
  \frac{1}{2} \cdot l\cdot (l-\frac{l}{d}) = \frac{l^{2}(d-1)}{2d}
\end{gather*}
(das erste $l$ ist die Anzahl der Möglichkeiten für die erste Position;
$l-\frac{l}{d}$ ist die Anzahl der Möglichkeiten für die zweite Position)
zufällige Paare, die in verschiedenen Teiltexten liegen.

% 2006-11-01

Es wird auf die Tabelle mit der Verschlüsselung von KRYPTO im letzten Beispiel
bezug genommen. Text ist der 1.\,Spalte $1, 1+d, 1+2d$, 2.\,Spalte $2, 2+d,
2+2d$,\dots für große $l$ (im Vergleich zu $d$) ist der Text innerhalb einer
Spalte "`natürlich"' ($I_{d}$) und zwischen den Spalten "`zufällig"' ($I_{z}$).

Positionen innerhalb einer Spalte: $\frac{l(l-d)}{2d}$, Positionen in
verschiedene Spalten: $\frac{l^{2}(d-1)}{2d}$.

Wahrscheinlichkeit für zwei gleiche Buchstaben:
\begin{gather*}
  I(c) \approx \frac{\frac{l(l-d)}{2d}\cdot 0\mathord{,}0762 +
                 \frac{l^{2}(d-1)}{2d}\cdot 0\mathord{,}0385}%
                    { \frac{l(l-1)}{2} }\\
  d \approx \frac{0\mathord{,}0377 l}{(l-1) I(c) + 0\mathord{,}0762 -
     0\mathord{,}0385 l}\\
  I(c) = \frac{\sum_{i=1}^{26} l_{i}(l_{i}-1)}{l(l-1)}
\end{gather*}
Schätzwert für die Periodenlänge~$d$! Vergleich mit Brute-force-Methode und
Kasiski-Test.

Siehe Übung.

\subsection{Möglichkeiten der Verteidigung gegen die Analyse}

Ausgangspunk: Die oben formulierten Tests funktionieren nur für kleine
Periodenlängen ($d\ll l$)! Deshalb: 1) Betrachten von großen Periodenlängen,
technische Realisierung in der \highl{ENIGMA} -- 1920 deutsches Patent mit
drei Rotoren: Periodenlänge $26^{3}$, Einsatz im Krieg mit fünf Rotoren:
Periodenlänge $26^{5}$.

2.\,Ansatz: nicht periodische Verschlüsselung: a) mit einem
"`Schlüsselroman"', d.\,h. aus einem vorher gewählten Buch wird ein Text
ausgewählt -- Schlüssel ist dann (Seite, Zeile, Buchstabe). Aber dann
funktioniert wieder die Häufigkeitsanalyse, weil der Roman wieder die
Charakteristik einer natürlichen Sprache hat. (in diese Kategorie fällt auch
das anhängen des Klartextes an das Schlüsselwort.)

b) mit Zufallstexten, führt wieder zu \highl{One-time-pad} und damit zum
absolut sicheren Code -- aber unpraktikabel.

\chapter{Transpositionen}

Klartextbuchstaben bleiben Klartextbuchstaben, ändern aber ihr Position. Die
Häufigkeitsanalyse von Buchstaben als Angriff ist wirkungslos, da der Text nur
permutiert wurde. (Aber Digramme sind ein Versuch wert!)

Verschiedene Ansätze der Verschlüsselung:
\begin{itemize}
 \item \highl{Blocktransposition}: Klartext wird in Blöcker einer festen
  Länge~$k$ eingeteilt. Diese Blöcke werden derselben Permutation~$\pi$
  unterworfen. Beispiel: $a_{i_{1}}a_{i_{2}}\dotso a_{i_{k-1}}a_{i_{k}} =
  a_{i_{\pi(1)}} a_{i_{\pi(2)}}\dotso a_{i_{\pi(k-1)}}a_{\pi(i_{k})}$.

  Analyse:
  \begin{enumerate}[1.\,{Schritt}]
   \item Rate/Bestimme die Blocklänge~$k$
   \item Erzeuge durch geegnete Permutationen bekannte Anagramme. teste an
    anderen Blöcken
  \end{enumerate}
  Dies funktioniert sehr gut.

 \item \highl{Spaltentransposition}:
  \begin{enumerate}
   \item Klartext wird zeilenweise in ein Rechteck der Breite~$k$ eingelesen
    (Höhe hängt von der Länge~$l$ des Klartexts ab)
   \item permutiere die $k$~Spalten (wie oben)
   \item Lies den Geheimtext spaltenweise aus (Im Unterschied zur
    Blocktransposition, wo der Geheimtext zeilenweise ausgelesen wird.)
  \end{enumerate}
\end{itemize}

\begin{bemerk}
  Wenn für die Spaltentransposition die Identität als Permutation verwendet
  wird, hat man die \highl{Gartenzaunchiffre}.
\end{bemerk}

\begin{bsp}
  Klartext:
  \begin{verbatim}
  krypto  rptoky
  logieu  oieulg
  nddate  datend
  nsiche  scheni
  rheita  hitare
  \end{verbatim}
  Das letzte \textit{a} ist Füllmaterial, $k=6, \pi = (1, 5, 3, 6, 4, 2)$

  Text für Blockchiffre: "`rodsh\,piaci\,tetht\,oueea\,ygdie"'
\end{bsp}

Analyse:
\begin{enumerate}[1.\,{Schritt}]
 \item Schätze die Spaltenzahl~$k$, Teiler der Gesamtlänge~$l$
 \item Bestimmung benachbarter Spalten (suche nach Anagrammen)
\end{enumerate}

\begin{bsp}
  Die erste Zeile für $k=11$ enthält zu viele Konsonanten und die letzte Zeile
  zu viele Vokale für einen deutschen Text.

  Idee: 1. und letzte Spalte liegen nebeneinander, da auf ein \textit{c} sehr
  of ein \textit{k} oder ein \textit{h} folgt.

  Die sechse Spalte kommt vor die erste und dann können wir das Wort in der
  ersten Zeile erraten "`zwei"': 3., 5., 1. 6. 2. 4.
\end{bsp}

\todo{Hier fehlt die Vorlesung vom 6.11.}

% 8.11.06

\section{Kryptoanalyse affin linearer Blockchiffren}

\highl{known-plaintext-attack}: Legen uns fest auf $\Z_{k}$ (als kommutativer
Ring) und Blocklänge~$n$, Schlüssel $(A,b)$ wobei $A\in\Z_{k}^{(n\times n)},
b\in\Z_{k}^{(1\times n)}$ und eine lineare Abbildung $v\mapsto v\cdot A+b$.

Annahme: für $n+1$ Klartextblöcke $m_{0},m_{1},\dotsc, m_{n}$ sind die
Geheimtextblöcke $c_{0},c_{1},\dotsc, c_{n}$ bekannt.

Wir betrachten folgende Matrix~$M$
\begin{gather*}
  M =
     \begin{pmatrix}
       m_{1}-m_{0}\\
       \vdots\\
       m_{n}-m_{0}
     \end{pmatrix}_{n\times n}
\end{gather*}
und nehmen an, dass $\det M$ eine Einheit in $\Z_{k}$ ist!

Außerdem sei
\begin{gather*}
  C =
     \begin{pmatrix}
       c_{1}-c_{0}\\
       \vdots\\
       c_{n}-c_{0}
     \end{pmatrix}
\end{gather*}

\begin{bemerk}
  Dies kommt nicht zu selten vor! (z.\,B. $\phi(26)=12$ ist die Anzahl der
  Einheiten in $\Z_{26}$)
\end{bemerk}

Denn es gilt für folgende Folge $x_{k}:=\frac{\phi(k)}{k}$
$\limsup_{k\rightarrow\infty} x_{k}=1$.

\begin{bemerk}
  In einer halbgeordneten Menge kann man definieren:
  \begin{gather*}
    \limsup_{k\rightarrow\infty} x_{k} = \inf\{ \sup\{ x_{l}\colon l\geq
       k\}\colon k\in\N\}
  \end{gather*}
  In vollständigen Verbänden existiert stets der Limes superior und Limes
  inferior und es gilt $\liminf_{k\rightarrow\infty} x_{k} \leq
  \limsup_{k\rightarrow\infty} x_{k}$.
\end{bemerk}

Es gilt außerdem für $\delta>0$:
\begin{gather*}
  \lim_{k\rightarrow\infty} \frac{\phi(k)}{k^{1-\delta}} = \infty
\end{gather*}

Es gilt: $M\cdot A=C$

\begin{align*}
  c_{0} &= m_{0}A + b\\
  c_{1} &= m_{1}A + b\\
  \dotso\\
  c_{n} &= m_{n} A+b
\end{align*}

\begin{gather*}
  \begin{pmatrix}
    c_{1}-c_{0} = m_{1}A - m_{0} A = (m_{1}-m_{0})A
    \dotso 
  \end{pmatrix}
\end{gather*}
\todo{Die Gleichungen noch ausfüllen.}

Nach Vorraussetzung ($\det M$ ist Einheit in $\Z_{k}$) existiert $M^{-1}$.
Hieraus folgt $A=M^{-1}C$ und weiter $b= c_{0}-m_{0}A$.

\begin{bemerk}
  Für \highl{Hill-Chiffren} (d.\,h. $b=0$) genügen $n$~Paare $(m_{j},c_{j})$.
\end{bemerk}

\begin{bsp}
  Es sei $k=26$ und $n=2$. Der Klartext sei "`HERBST"' und der Geheimtext sei
  "`SOMMER"'. Die Aufgabe ist den Schlüssel $(A,b)$ zu bestimmen.

  Bestimmen wir erstmal $M$: "`HERBST"' = $\underbrace{7~4}_{m_{0}}~
  \underbrace{17~1}_{m_{1}}~ \underbrace{18~19}_{m_{2}}$
  \begin{gather*}
    M =
       \begin{pmatrix}
         m_{1}-m_{0}\\
         m_{2}-m_{0}
       \end{pmatrix}
       =
       \begin{pmatrix}
          10 & 23\\
          11 & 15
        \end{pmatrix}
  \end{gather*}

  Bestimme $C$: "`SOMMER"' = $\underbrace{18~14}_{c_{0}}~
  \underbrace{12~12}_{c_{1}}~ \underbrace{4~17}_{c_{2}}$
  \begin{gather*}
    C =
       \begin{pmatrix}
         c_{1}-c_{0}\\
         c_{2}-c_{0}
       \end{pmatrix}
       =
       \begin{pmatrix}
         20 & 24\\
         12 & 3
       \end{pmatrix}
  \end{gather*}

  3. Schritt: Bestimme die Determinante von $M$
  \begin{gather*}
    \det M =
       \begin{pmatrix}
          10 & 23\\
          11 & 15
        \end{pmatrix} = 10\cdot15 - 23\cdot11 = -103 = 1 + (-4)\cdot26 \equiv
       1\pmod{26}
  \end{gather*}

  4. Schritt: Bestimme $M^{-1} = (\det M)^{-1} \begin{pmatrix}15 & -23\\-11 &
  10\end{pmatrix} \equiv \begin{pmatrix}15 & 3\\15 & 10\end{pmatrix}$.

  5. Schritt bestimme
  \begin{gather*}
    A = M^{-1}\cdot C =
       \begin{pmatrix}15 & 3\\15 & 10\end{pmatrix}\cdot
       \begin{pmatrix}20 & 24\\12 & 3\end{pmatrix}
       = \begin{pmatrix}336 & 369\\420 & 390\end{pmatrix}
       \equiv \begin{pmatrix}24 & 5\\4 & 0\end{pmatrix}
  \end{gather*}

  6. Schritt bestimmt $b$
  \begin{gather*}
    b = c_{0}-m_{0}
       = \begin{pmatrix}18 & 14\end{pmatrix}
       - \begin{pmatrix}7 & 4\end{pmatrix}
       \cdot \begin{pmatrix}24 & 5\\4 & 0\end{pmatrix}
       = \begin{pmatrix}18 & 14\end{pmatrix}
       - \begin{pmatrix}184 & 35\end{pmatrix}
       = \begin{pmatrix}18 & 14\end{pmatrix}
       - \begin{pmatrix}2 & 9\end{pmatrix}
       = \begin{pmatrix}16 & 5\end{pmatrix}
  \end{gather*}
\end{bsp}

\begin{bemerk}
  Alles gut ausrechenbar. Der Schutz besteht nur darin, den Schlüsselraum
  wesentlich größer machen.
\end{bemerk}

% 13.11.06

\section{Blockchiffren -- Allgemeines}

Wir bleiben zunächst noch bei den symetrischen Verschlüsselungsverfahren und
versuchen durch eine Vergrößerung des Schlüsselraums die Verfahren sicherer zu
machen. Im Folgenden beschränken wir uns auf (rechnerfreundliche) Bitfolgen
$\subset\F_{2}^{n}$.

Klartexte werden zerlegt in Blöcke einer frei wählbaren aber fixierten
Blocklänge~$n$. Wir betrachten Verschlüsselungen von Blöcken auf der
Metaebene:
\begin{itemize}
 \item gleich Blöcke werden gleich verschlüsselt -- in Analogie zur
  monoalphabetischen Verschlüsselung (lineare affine Blockchiffren) oder
 \item gleiche Blöcke werden in Abhängigkeit von ihrer Position auf
  verschiedene Weise verschlüsselt -- in Analogie zur polyalphabetischen
  Verschlüsselung.
\end{itemize}

Diese Bilder von Blöcken der Länger~$n$ sind wieder Blöcke der Länge~$n$ über
$\F_{2}$.

Daraus ergibt sich eine maximale Anzahl an Blockchiffren von
\begin{gather*}
  (\underbrace{0,\dotsc,0,0}_{n}), (\underbrace{0,\dotsc,0,1}_{n}),\dotsc,
     (\underbrace{1,1,\dotsc,1}_{n}) -- 2^{n}~\text{Blöcke}\\
  (i_{1},i_{2},\dotsc, i_{n}), (i_{1}',i_{2}',\dotsc,i_{n}'), \dotsc --
     (2^{n})!~\text{Blöcke}\\
  \text{wobei: es gibt ein $\mu$ mit $i_{\mu}\ne i_{\mu}'$}
\end{gather*}

Beispiel: Blocklänge $n=64$

Approximation mithilfe der Stirling-Formel: Die Länge~$l$ eines Schlüssels ist
gegeben durch $l=\log (2^{n})!$.
\begin{align*}
  (2^{n})! &\approx \sqrt{\pi\cdot (2^{n+1})} \cdot (\frac{2^{n}}{l})^{2^{n}}\\
  l &\approx \log \big(\sqrt{\pi\cdot (2^{n+1})} \cdot
     (\frac{2^{n}}{l})^{2^{n}} \big)
     \approx 2^{n} (n-1\mathord{,}5) \approx 2^{n}\cdot n
\end{align*}

für $n=64$ bedeutet dies: $l\approx 2^{64}\cdot 2^{6} = 2^{70} \approx
10^{21}$. Dies bedeutet, die Speicherung \textit{eines} solchen Schlüssels
erfordert 1~Mrd. Festplatten mit je 100\,GB. Eine Konsequenz daraus für die
Praxis: "`kleine"' Teilmengen aus dem Schlüsselraum. Welche?

z.\,B. die linearen Chiffren erlauben eine Darstellung des Schlüssels mit
weniger Bits. Bei $n=64$ sind also $\{0,1\}$-Matrizen vom Typ $64\times 64$
zulässig mit Determinante~$1$. Der Schlüssel ist dann eine Matrix
$A\in\F_{2}^{(64\times64)}$ und die Schlüssellänge ist $64\cdot64=4096$~Bits.

Wie viele solcher Schlüssel gibt es? Approximation: $\approx
0\mathord{,}29\cdot 2^{4096}\approx 2^{2^{12}}$ (Im Vergleich zu $2^{10^{21}}$)

Aufgabe:
\begin{gather*}
  (2^{64}-1)\cdot(2^{64}-2)\cdot \dotsm \cdot (2^{64}-2^{63})
\end{gather*}
verschiede Matrizen~$A$ mit $\det A=1$.

Hintereinanderschaltung von Blockchiffren \textit{verscheidenen} Typs führen
zu einer Erhöhung der Sicherheit. Oft realisiert man abwechselnde Folge von
Substitutionen und Transpositionen mit den Ziel folgende \highl{Eigenschaften
der Verschlüsselung} zu erreichen:
\begin{itemize}
 \item \highl{Diffusion}: Änderung eines Klartextbuchstaben bewirkt die
  Änderung von vielen Buchstaben des Geheimtexts -- Nachteil: kleine Fehler
  (Tippfehler) ändern den Text stark.
 \item \highl{Konfusion}: Jedes Bit des Chiffretextes hängt von mehr als einem
  Bit des Schlüssels ab.
\end{itemize}
(Dies Eigenschaften gehen zurück auf Claude Shannon -- Begründer der
Informationstheorie)

\section{Feistel-Chiffren}
(nach Lucifer 1971) (als Vorläufer des DES-Algorithmus)

Idee:
\begin{itemize}
 \item alternierende Folge von Substitutionen und Transpositionen,
 \item aus einem (kurzen) Anfangsschlüssel wir eine Folge von Schlüsseln
  erzeugt.
\end{itemize}

Ausgangssituation:
\begin{itemize}
 \item Blockchiffr über $\F_{2}$ der Länge~$n$,
 \item $\mathcal{K}$ ist der Schlüsselraum,
 \item zu einem Schlüssel~$K\in\mathcal{K}$ gehört eine
  Verschlüsselungsfunktion $f_{K}\colon \F_{2}^{n}\mapsto\F_{2}^{n}$
\end{itemize}

Bei Feistel ist es so:
\begin{itemize}
 \item betrachten Blöcke der Länge~$2n$ für die Zerlegung des Klartextes,
 \item Festlegung der \highl{Rundenzahl}~$r$,
 \item Festlegung wie aus einem Ausgangsschlüssel eine folge von Schlüsseln
  $K_{1},K_{2},\dotsc, K_{r}\in\mathcal{K}$ erzeugt wird.
\end{itemize}

Klartextblock $m=(L_{0}, R_{0})$ der Länger~$2n$ wird zerlegt in zwei
Teilblöcke $L_{0}$ und $R_{0}$ der Länge~$n$.
\begin{center}
  \includegraphics{feilstel}
\end{center}

Wir kontruieren eine Folge:
\begin{gather*}
  (L_{i}, R_{i}) = (R_{i-1}, L_{i-1}\oplus f_{K_{i}(R_{i-1})})\quad
     i=1,\dotsc,r-1\\
  (L_{i-1}, R_{i-1}) \xrightarrow[durch Addition des Schlüsselworts
     f_{K_{i}}(R_{i-1})]{Substitution des linken Teils} (L_{i-1} \oplus
     f_{K_{i}}(R_{i-1)}) \xrightarrow{Transposition} (R_{i-1}, L_{i-1}\oplus
     f_{K_{i}}(R_{i-1}))
\end{gather*}
(Anm.: $\oplus$ ist das Exclusive-Oder \texttt{xor})

Die Entschlüsselung funktioniert genauso, nur mit der Schlüsselfolge $K_{r},
K_{r-1}, \dotsc, K_{1}$.

Begründung warum es funktioniert: Wir setzen neu an: $L_{0}':=L_{r},
R_{0}':=R_{r}, K_{i}':= K_{r+1-i}$ für $i=1,\dotsc,r$. Verschlüsseln $(L_{0}',
R_{0}')$ mit der Schlüsselfolge $K_{1}', K_{2}',\dotsc,K_{r}'$ und betrachten
die Zwischenergebnisse $(L_{i}', R_{i}')$ für $i=1,\dotsc,r$.

Erste Runde: liefert
\begin{gather*}
  (L_{1}', R_{1}') = (R_{0}', L_{0}'\oplus f_{K_{1}'}(R_{0}'))
     = (R_{r}, L_{r} \oplus f_{K_{r}}(R_{r}))
     = (R_{r-1}, (L_{r-1}\oplus f_{K_{r}}(R_{r-1})) \oplus f_{K_{r}}(R_{r-1}))
     = (R_{r-1}, L_{r-1})
\end{gather*}
Zweite Runde liefert:
\begin{gather*}
  (L_{2}', R_{2}') = (R_{1}', L_{1}'\oplus f_{K_{2}'}(R_{1}')) = \dotsb =
     (R_{r-2}, L_{r-2})
\end{gather*}

\clearpage
\appendix
\chapter{Übungsaufgaben}
\section{Blatt 1}

Der folgende mit Vigenère-Chiffrierung deutschsprachige Text ist zu
entschlüsseln. (Die Blockstruktur dient lediglich der besseren Lesbarkeit.)

\subsection*{Aufgabe 1}
Bestimmen Sie eine mögliche Periodenlänge~$d$
\begin{enumerate}[a)]
 \item mit Hilfe des Kasiski-Tests.
 \item mit Hilfe des Friedman-Tests.
 \item Formulieren Sie eine Hypothese für $d$.
\end{enumerate}

\subsection*{Aufgabe 2}
Bestimmen Sie gemäß $d$ eine Häufigkeitsverteilung und leiten Sie daraus ein
Schlüsselwort ab.

\subsection*{Aufgabe 3}
Bestimmen Sie den Klartext.

\vspace{1cm}
\begin{verbatim}
  FSGEXV  EVIISA  MGYFNX  EJTMUR  MPNYME  FMPSIH  EFIXUE  HQFOOU
  PGIAVI  KJSWLT  IIZJIJ  ELXVOT  YBKMEC  GYUELW  RHEHOR  ONIFVS
  EHKCJS  WLFEEL  JIBNTS  VTIMGY  JDNECT  IBRQVE  HXJDHF  YVTSYP
  EEIYWX  JLNRRU  UYVCJC  BELDHZ  YVSKFE  IUERXV  TGCFKF  IHIZOF
  UGYFSP  IIGABV  VOGYRL  FGYRUL  AHKVOK  FEIUER  XRVFTY  XFHIII
  JGEIZU  ZOIZOE  LFVLAH  RKFNMT  IBCBIQ  VUHXVS  SOGOFN  ILEFSY
  MEFSSR  KBXORU  TEGEEU  IEDLCE  NVRDHN  IE
\end{verbatim}

\chapter{Lösungen}
\section{Blatt 1}
\subsection*{Aufgabe 1}
\begin{enumerate}[a)]
 \item Kasiski-Test (Wiederholung von Zeichenketten länger als 2), Beispiele:
  \begin{tabular}{l|l}
    KFEIUERX & $50 = 2\cdot 5\cdot 5$\\
    TIB & $138 = 2\cdot3\cdot23$\\
    IZO
       LAH
       GYR
  \end{tabular}

 \item Friedman-Test: $I(c) = 0,0483$ und $d\approx3\mathord{,}93$.

 \item Wir entscheiden uns für $d=5$.
\end{enumerate}

\subsection*{Aufgabe 2}
Es bleibt: suchen 5 Caesar-Chiffren
1. Spalte: F für E, d.\,h. B für A (Verschiebung 1)\\
2. Spalte: E für E, d.\,h. B für A (Verschiebung 0)\\
3. Spalte:  für E, d.\,h. B für A (Verschiebung )\\
4. Spalte:  für E, d.\,h. B für A (Verschiebung )\\
5. Spalte:  für E, d.\,h. B für A (Verschiebung )\\


\clearpage
\pdfbookmark[0]{Index}{index}
\printindex

\end{document}
