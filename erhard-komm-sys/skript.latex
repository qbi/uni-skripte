%
% Korrekturen und Verbesserungen bitte an joerg@alea.gnuu.de
%
% Einige zusätzliche Informationen für rubber
%  rubber erkennt nicht, dass die Datei weg kann, daher sagen wir es ihm
% rubber: clean $base.thm logo.eps komm-system.eps komm-zwei.pdf komm-zentrale.pdf jena-mit.pdf
%  rubber soll nach Änderungen an der Datei nochmal bauen
% rubber: watch $base.thm
% rubber: index.tool      xindy
% rubber: index.language  german-din
%
% scrreprt trifft am Besten die Bedürfnisse eines Skripts, das ganze wird
% zweiseitig (twoside), d.h. es wird zwischen linker und rechter Seite
% unterschieden, und wir verwenden zwischen den Absätzen einen Abstand
% von einer halben Zeile (halfparskip) und dafür keinen Absatzeinzug,
% wobei die letzte Zeile eines Absatzes zu min. 1/4 leer ist.

\RequirePackage[l2tabu,orthodox]{nag}  % nag überprüft den Text auf veraltete
                   % Befehle oder solche, die man nicht in LaTeX verwenden
                   % soll -- l2tabu-Checker in LaTeX

\RequirePackage[ngerman=ngerman-x-latest]{hyphsubst} % einbinden der neuen
                   % Trennmuster, diese korrigieren einige Fehler der alten
                   % und bieten mehr Trennstellen

\documentclass[ngerman,draft,parskip=half*,twoside]{scrreprt}

\usepackage{units}
\usepackage[draft=false,colorlinks,bookmarksnumbered,linkcolor=blue,breaklinks]{hyperref}
\usepackage[latin1]{inputenc}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage[final]{graphicx}
\usepackage{paralist}
\usepackage{babel}
\usepackage{theorem}
\usepackage{ellipsis}
%\usepackage{capt-of}
\usepackage{fixmath}     % ISO-konforme griech. Buchstaben
\usepackage[euro]{isonums} % definiert Komma als Dezimaltrennzeichen
\usepackage{theorem}
\usepackage[all,warning]{onlyamsmath}  % warnt bei Verwendung von nicht
                                       % amsmath-Umgebungen z.\,B. $$...$$

%\usepackage[amsmath,thmmarks,hyperref]{ntheorem} % für die Theorem-Umgebungen
                                                 % (satz, defini, bemerk)
\usepackage{xspace}      % wird weiter unten gebraucht
\usepackage{slashbox}    % für schräge Striche links oben in der
                         % Tabelle; s. texdoc slashbox

\usepackage{paralist}    % besseres enumerate und itemize und neue
                         % compactenum/compactitem; s. texdoc paralist

\usepackage{svn}         % Zum Auswerten und ordentlichen Darstellen der
                         % SVN-Schlüsselwörter (s. vor \begin{document})
                         % dafür muss in SVN noch das Flag svn:keywords
                         % auf "LastChangedRevision LastChangedDate"
                         % gesetzt werden


\theoremstyle{break}
\theorembodyfont{\normalfont}
\newtheorem{bsp}{Beispiel}[section]


\SVN $LastChangedRevision$
\SVN $LastChangedDate$

\begin{document}

\title{Kommunikationstechnik\\[1ex]
  \includegraphics[width=\linewidth]{logo}}
\author{Prof.\,Dr.\,Werner Erhard}
\date{WS 2004/05}
\publishers{Jörg Sommer}
\maketitle
\clearpage
\chapter*{Vorwort}

{\itshape
  Dieses Dokument wurde als Skript für die auf der
  Titelseite genannte Vorlesung erstellt und wird jetzt im Rahmen des
  Projekts
  "`\href{http://uni-skripte.lug-jena.de/}
  {Vorlesungsskripte der Fakultät für Mathematik}
  \href{http://uni-skripte.lug-jena.de/}{und Informatik}"'
  weiter betreut. Das
  Dokument wurde nach bestem Wissen und Gewissen angefertigt. Dennoch
  garantiert weder der auf der Titelseite genannte Dozent, die Personen,
  die an dem Dokument mitgewirkt haben, noch die
  Mitglieder des Projekts für dessen Fehlerfreiheit. Für etwaige Fehler
  und dessen Folgen wird von keiner der genannten Personen eine Haftung
  übernommen. Es steht jeder Person frei, dieses Dokument zu lesen, zu
  verändern oder auf anderen Medien verfügbar zu machen, solange ein
  Verweis auf die Internetadresse des Projekts
  \url{http://uni-skripte.lug-jena.de/}
  enthalten ist.

  Diese Ausgabe trägt die Versionsnummer~\SVNLastChangedRevision{} und ist vom
  \SVNDate{}. Eine neue Ausgabe könnte auf der Webseite des Projekts verfügbar
  sein.

  Jeder ist dazu aufgerufen, Verbesserungen, Erweiterungen und
  Fehlerkorrekturen für das Skript einzureichen bzw. zu melden oder diese
  selbst einzupflegen -- einfach eine E-Mail an die
  \href{mailto:uni-skripte@lug-jena.de}{Mailingliste
  \nolinkurl{<uni-skripte@lug-jena.de>}} senden. Weitere Informationen
  sind unter der oben genannten Internetadresse verfügbar.

  Hiermit möchten wir allen Personen, die an diesem Skript mitgewirkt
  haben, vielmals danken:
  \begin{itemize}
   \item \href{mailto:joerg@alea.gnuu.de}{Jörg Sommer \nolinkurl{<joerg@alea.gnuu.de>}} (2004/5)
  \end{itemize}
}

\tableofcontents
\clearpage

\chapter{Begriffsbildung und Übersicht}

\section{Kommunikation, Kommunikationssystem}

Unter \emph{Kommunikation} versteht man einen Informationsfluß, der letztlich
zum Austausch von Nachrichten und Informationen
(siehe dazu \autoref{sec:nach-inf}) führt. Kommunikation gibt es:
\begin{itemize}
 \item zwischen verschiedenen Organismen bzw. Maschinen untereinander,
 \item innerhalb von Organismen oder Maschinen,
 \item zwischen Organismen und Maschinen.
\end{itemize}

Ein \emph{Kommunikationssystem} ist ein System zum Austausch von Nachrichten
zwischen verschiedenen Kommunikationspartnern:

\begin{center}
  \includegraphics{komm-system}
\end{center}

Je nach ihren Fähigkeiten können die Kommunikationspartner in vier
verschiedene (Komplexitäts-)Klassen eingeteilt werden, nämlich in solche
die
\begin{enumerate}
 \item nur empfangen
 \item senden und empfangen
 \item senden, empfangen und zwischenspeichern
 \item senden, empfangen, zwischenspeichern und verarbeiten 
\end{enumerate}

\section{Nachricht, Information}\label{sec:nach-inf}

Hierunter versteht man jede Art von \emph{Nachricht}. Die kleinste Einheit der
\emph{Information} ist das \emph{Bit}, die der Kommunikation ist die Anzahl der
übertragenen Bits pro Zeiteinheit (\unitfrac{bit}{s} oder \emph{\unit{bps}} für bits per
second). Sehr gebräuchlich und bei den heutigen Möglichkeiten sinvoll
sind auch:
\begin{itemize}
 \item \unitfrac{KB}{s} oder \emph{\unit{Kbps}} z.\,B. ISDN mit \unit[64]{Kbps}
 \item \unitfrac{MB}{s} oder \emph{\unit{Mbps}} z.\,B. Ethernet mit bis zu
  \unit[1]{Mbps}
 \item \unitfrac{GB}{s} oder \emph{\unit{Gbps}}
\end{itemize}

Um eine Information interpretieren zu können, muß bekannt sein, wie diese
aufgebaut ist. Der \emph{Syntax} ist die formale Beschreibung dieses Aufbaus.
Die \emph{Semantik} steht für die inhaltliche Bedeutung der Information, die
(bei schlechter Syntax) nicht eindeutig sein muß.

Beispielsweise steht die phonetische Lautschrift i:gl im deutschen für
(das Tier) Igel und im englischen für (das Tier) eagle, wobei es sich
aber um einen Adler handelt. Die \emph{Pragmatik} der Information, beschreibt
deren Auswirkung auf das Verhalten des Empfängers. Repräsentiert werden
kann Information physikalisch durch:
\begin{itemize}
 \item Elektritität (elektrisch/elektronisch)
 \item Licht (optisch)
 \item Schall (akustisch)
\end{itemize}

\section{Wie nehmen wir Information wahr?}

Die Informationsaufnahme beim Menschen läßt sich in folgende Schritte einteilen:
\begin{enumerate}
 \item Informationsaufnahme (unbewußt)
 \item Reduktion (unbewußt)
 \item Erkennen/Wahrnehmen (bewußt)
 \item Kurzspeichern (bewußt)
 \item Verarbeiten (bewußt)
 \item Verstehen (bewußt)
 \item Reagieren (bewußt) 
\end{enumerate}

Beim letzten Schritt (Reagieren) werden Informationen in Form von
Sprache, Gestik, Mimik, Motorik etc. abgegeben. Dabei entsteht ein
Informationsfluß von ca. \unit[107]{bps}. Entsprechende Größenordnungen für die
Aufnahme von Informationen zeigt die folgenden Tabelle: 
\begin{tabular}{lrrc}
  &  Rezeptoren &Informationsfluß in \unit{bps} &Tatsächlich
     verarbeitete Inf.\\
  \hline
  Auge (Licht) & 2*$10^{8}$ & $10^{8}$ &\\
  Ohr (Ton) & 3*104 	104
Nase (Geruch) 	107 	100
Zunge (Geschmack) 	107 	10
Haut (Wärme, Kälte) 	106 	-
\end{tabular}
\section{Kommunikationsmedien}

Kommunikation ist möglich über räumliche und zeitliche Distanz. Man
unterscheidet dabei Individual- und Massenkommunikation:

\begin{center}
  \begin{tabular}{l|ccc}
    \parbox{3cm}{\hfill Komm.-Mittel\\ Komm.-Type}& Sprache& Bilder &
       Schrift\\
    \hline
    Individuelle Komm.& Telefon (Welt: 1~Mrd.)& \parbox{3cm}{Bildtelefon,
       Telefax, Foto, Video}& \parbox{2cm}{Brief, Telefax, BTX}\\
    Massenkomm.& Radio, Tonträger& Fernsehen, Kino& Buch, Zeitung
  \end{tabular}
\end{center}

Das Internet paßt dabei in jedes Feld! Typische Anforderungen bei der
Individualkommunikation zeigt die folgende Tabelle:

\begin{enumerate}
 \item mail: $\leq$ 64~kbit
 \item video on demand: 10~Mbps -- 1~Gbps
 \item Menge von Daten:
  \begin{enumerate}
   \item Kurzdialog: wenige 100~Bytes; eMails, Kontenautomat, Meßwerke
   \item Langdialog: 60~kB -- 1~MB; Datenbankrecherche
   \item Stapelverkehr: $>$1~MB, Downloads
  \end{enumerate}
\end{enumerate}

\chapter{Aufgabenstellung und Klassifikation}

Die Aufgabe eines Datenkommunikationssystems ist die Übermittlung
(Übertragung + Vermittlung) und teilweise auch die Verarbeitung von
Datenströmen zwischen einzelnen Teilnehmern des Systems.

Beispiel für die Verarbeitung: Aufbau einer Verbindung von Jena zum MIT

\begin{center}
  \includegraphics[width=\linewidth]{jena-mit}
\end{center}

Die Qualität der Datenübermittlung hängt ab von:
\begin{enumerate}
 \item Kosten: Investitionskosten, laufende Kosten, Wartungskosten,
  Ersatzkosten
 \item Funktionalität: Anzahl/Art der Kommunikationsdienste (Schlagwort:
  Multimedia)
 \item Verkehrsgüte: Reibungsloser Ablauf des Informationsaustausch
  \begin{enumerate}
   \item Durchsatz (Zahl der Aufträge, die pro Zeiteinheit im
    Mittel/Maximum ausgeführt werden)
   \item Wartezeit (Zeit, die eine Anforderung im System bzw. pro Station
    warten muss)
   \item Verweil- oder Durchlaufzeit (Summe aller Warte-, Bearbeitungs-
    und Transportzeiten im System für einen bestimmten Auftrag)
  \end{enumerate}
 \item Übertragungsgüte
  \begin{enumerate}
   \item Bit-/Blockfehlerwahrscheinlichkeit (WK, dass ein Bit bzw. eine
    Menge von Bits (Block) in der Übertragung gestört ist)
   \item Effektive Übertragungszeit (Zeit, die notwendig ist, die
    Nachricht korrekt zu übertragen)
  \end{enumerate}
 \item Zuverlässigkeit (möglichst wenig Ausfälle des Gesamtsystems
  oder von Komponenten)
  \begin{enumerate}
   \item Ausfallwahrscheinlichkeit (WK, dass das System bzw. die
    Systemkomponente ausfällt)
   \item Verfügbarkeit $= \frac{MTBF}{MTBF+MTTR}$
    
    MTBF: Mean timebetween failure, MTTR: Mean time to repair
  \end{enumerate}
 \item Robustheit
  \begin{enumerate}
   \item Überlastungsfähigkeit
   \item Übertragungssicherheit (Empfindlichkeit gegen Fehler)
   \item Ausfallsicherheit
  \end{enumerate}
 \item Erweiterbarkeit/Flexibilität (Möglicheit der dynamischen
  Anpassung des Netzes bei erhöhten Verkehrsbedürfnis oder verändertem
  Verkehrscharakter)
 \item Benutzerfreundlichkeit
\end{enumerate}

\section{Technische Grundlagen}
\subsection{Übertragungswege}

\begin{description}
 \item[Kabelgebunden]
  \begin{itemize}
   \item Lichtwellenleiter (LWL): 10-100 $\mu m$
    \begin{description}
     \item[Vorteil:] extrem Störsicher, Abhörischer, leicht zu
      verlegen, Datenraten bis GBit/Tbit
     \item[Nachteil:] höhere Kabelkosten (als Kupferkabel), teure
      Anschlusskosten
      \end{description}
   \item 2-Drahtleitung (twisted pair): Kupferkabel, Dicke im Millimeterbereich
    \begin{description}
     \item[Vorteil:] niedrige Kosten, oftmals bereits vorhanden, gut verlegbar
     \item[Nachteil:] hohe Störempfindlichkeit, Datenraten <
      100~Mbit, nur einige 100~m, mit Verstärkern 30~km Entfernung möglich
    \end{description}
   \item Koaxialkabel:
    \begin{description}
     \item[Vorteil:] Störsicherheit, Datenrate bis Gbit-Bereich, bei
      100~Mbit bis 20~km Entfernung (ohne Verstärker)
     \item[Nachteil:] höhere Kosten (10-fache eines Kupferkabels),
      Verlegung kompliziert, teure Anschlusstechnik
      \end{description}
  \end{itemize}
 \item[Kabellos]
  \begin{itemize}
   \item Satellitenübertragung
    \begin{description}
     \item[Vorteil:] Flexibilität, hohe Benutzerraten, Datenrate im
      GBit/TBit-Bereich
     \item[Nachteil:] extrem hohe Kosten, Laufzeit nicht
	vernachlässigbar
    \end{description}
   \item Laser
   \item Infrarot, Bluetooth (genehmigungsfrei)
    \begin{description}
     \item[Vorteil:] geringe Kosten (da Massenprodukt), flexibel
     \item[Nachteil:] geringe Datenraten (z.\,B. Infrarot bis 5~MBit),
      störanfällig, extrem unsicher
    \end{description}
    \end{itemize}
\end{description}

\subsection{Übertragungsprinzen}
Basisbandübertragung
\begin{itemize}
 \item Frequenzband ist begrenzt $0-f_{max} < 5$\,kHz
 \item gleichmäßige Übertragungsqualität von niedrigen bis hohen
  Frequenzen erforderlich
\end{itemize}

Trägerbandübertragung
\begin{itemize}
 \item gleichmäßige Übertragungsqualität im Bereich
  $f_{min}$--$f_{max}$ erforderlich, Frequenzmodulation mit
  $f_{2}=c\,f_{1}$, z.\,B. 3,75~MHz, 7,5~MHz
  
  notwendig: Modem (Modulator/Demodulator)
\end{itemize}

\section{Abstimmung von Sender und Empfänger -- Synchronisation}
\subsection{Asynchronbetrieb (Start-Stop-Betrieb)}
\begin{itemize}
 \item zeitlich willkürliche Übertragung der Signale
 \item Synchronisation zwischen Sender und Empfänger nur für die Dauer
  eines Zeitraums
  
  Startbit, 5-8 Bits, Paritätsbits, 1, 1$\frac12$ oder 2 Stopbits
  
  Sendetakt | | |
  Empfangstakt um eine halbe Periode verschoben
\end{itemize}
\begin{description}
 \item[Vorteil] geringer techni. Aufwand $\rightarrow$ billig
 \item[Nachteil] schlechte Leitungsnutzung
\end{description}

\subsection{Synchron-Betrieb}
\begin{itemize}
 \item Zentraler Taktgeber notwendig $\rightarrow$ räumliche Begrenzung
 \item Synchronisation für die gesamte Dauer der Kommunikation
\end{itemize}

\begin{description}
 \item[Vorteil:] hohe Nutzinformationsdichte
 \item[Nachteil:] teuer
\end{description}

\subsection{Synchronisation über einen Datenblock}
Vorraussetzung: Taktgeber bei Sender und Empfänger laufen für einen
Datenblock gemeinsam

SYN | STX | Daten | ETX | CRC (|SYN)

SYN: Synchronisationszeichen
STX: Start of text -- Nachrichtenbeginn
ETX: End of text -- Nachrichtenende
CRC: Cyclic redanduncy check (Fehlerinformation)

\chapter{Wirtschaftliche Ausnutzung von Übertragungskapazitäten}

\subsection{Frequenzmultiplex (Breitbandtechnik)}
Die Übertragungsfrequenz $0--f_{max}$ wird aufgeteilt in $f_{min_{1}} --
f_{max_{1}}, f_{min_{2}} -- f_{max_{2}}, f_{min_{3}} -- f_{max_{3}},
\ldots$ (Die einzelnen Bereiche müssen disjunkt sein)

\subsection{Zeitmultiplex}
Die Eingänge werden zyklisch abgetastet und 

Post: PCM 30 (puls code modulation; 30 = 30 Anschlüsse)

zyklische Zuordnung
STM - Synchronous Transfer Mode

statistische Zuordnung ATM
Paketform: SYN Adresse, Daten, CRC, SYN

Betriebsarten auf einer Verbindung:
\begin{description}
 \item[Simplex-Betrieb:] A$\rightarrow$ B oder B $\rightarrow$ A (Sender
  und Empfänger sind für die gesamte verbindung fest
 \item[Halbduplex-Betrieb:] A$\rightarrow$ B oder B$\rightarrow$A,
  wechselseitig, A und B tauschen die Rolle von Sender und Empfänger
  während der Verbindung
 \item[Duplex-Betrieb:] A$\rightarrow$B und B$\rightarrow$ A,
  gleichzeitig, A und B sind Sender und Empfänger zugleich
\end{description}

Klassifikation von Vermittlungssystemen
\begin{description}
 \item[Entfernung zwischen den Stationen]\mbox{}\\
  
  \begin{tabular}{clll}
    Entfernung& Wo? & übliche Bezeichnung & Fachbezeichnung\\\hline
    --$10^{-2}\,m$& Chip& integrierter Bus& \parbox{3cm}{SAN (Small area
       network)}\\\hline
    --$10^{-1}\,m$& Platine& Leiterplattenbus& SAN\\\hline
    --$10^{0}\,m$& Multiprozessoren& Front-/Endbus& SAN\\\hline
    --$10^{1}\,m$& Büro/Labor& Labor-/Clusterbus& Fieldbus\\\hline
    --$10^{2}\,m$& Campus/Fabrik& Feldbus& Fieldbus\\\hline
    --$10^{3}\,m$& Universität& lokales Netz& \parbox{3cm}{LAN (PBX --
       privat branch exchange)}\\\hline
    --$10^{4}\,m$& Stadtbereich& lokales Netz& LAN\\\hline
    --$10^{5}\,m$& Land& \parbox{3.5cm}{DFÜ-/Weitverkehrsnetz}& \parbox{3cm}{WAN (wide),
       \\MAN (metropolitan)}\\\hline
    $>10^{5}\,m$& Kontinent& \parbox{3cm}{Verbund von\\DFÜ-Netzen} &
       \parbox{3cm}{TAN (terrestrial),\\SAN (satellite)}
  \end{tabular}
 \item Ort der Vermittlung
  \includegraphics{komm-zentrale}
%  \caption{Zentrale steuer und verwaltet den gesamten Nachrichtenverkehr}
  
  dezentral: Alle Stationen verwalten gemeinsam den Datenverkehr
  Grafik Bus
 \item[Art der Vermittlung]
  Leitungsvermittlung (Kanal-/Durchschaltvermittlung, Line-/Circuit
  switching)

  \begin{enumerate}
   \item Vollständiges Durchschalten des gesamten Weges (End-zu-End-Verbindung)
   \item Übertragung der Daten
   \item Abbau der Verbindung
  \end{enumerate}
  
  Speichervermittlung (Teilstreckenvermittlung, Store and forward notwendig)
  \begin{enumerate}
   \item Aufbau einer \emph{virtuellen} Verbindung
   \item Datenübertragung von Knoten zu Knoten
   \item Zwischenspeichern im Knoten und Quittung
  \end{enumerate}
  
  Unterklassifikation:
  \begin{itemize}
   \item Nachrichtenvermittlung (message switching) Übertragung der
    Nachricht in einem Block: H | Nachricht | T
   \item Paketvermittlung (packet switching)
    
    Nachricht Paket1, Paket2, Paket3
    H1 | Paket 1 | T1, H2 |Paket2 |T2, H3| Paket3|T3
  \end{itemize}
 \item[Anwendungszweck]
\end{description}

\chapter{Schichtenmodell versus Modularisierung}

\section{Modularisierung (Dekomposition)}
Zerlegung eines Systems in Teile, die diejenigen Komponenten enthalten,
die in einem logischen Zesammenhang stehen. Die Verbindungstelle zwischen
zwei Modulen bezeichnet man als \emph{Schnittstelle}, die Regeln für den
Informationsaustausch heißen \emph{Protokolle}.

Kriterien für Modularisierung:
\begin{description}
 \item[Abgeschlossenheit] Jedes Modul übernimmt nur eine Teilaufgabe und
  diese Teilaufgabe wird nur von diesem Modul gemacht.
 \item[Handhabbarkeit] Die Größe des Moduls muss überschaubar sein
 \item[Prüfbarkeit] das korrekte Verhalten eines Moduls kann unter
  Berücksichtigung der Schnittstellen- und Protokollspezifikation
  validiert bzw. verifiziert werden.
 \item[Geheimnisprinzip/Virtualität] Wichtig ist, was geleistet wird,
  nicht wie es gleistet wird.
 \item[Gegenseitige Nichtbeeinflussung] Änderungen in einem Modul
  dürfen sich nicht auf andere Module auswirken.
\end{description}

\subsection{Schichtenmodell/ Hierarchiebildung}

Festlegung einer Rangordnung für einzelne Aufgaben oder Dienste und
Zusammenfassung und in einem Schichtenmodell. Die einzelnen
Hierarchieebenen sind funktionell abgeschlossen. Dienste werden erbracht
\begin{enumerate}
 \item durch eigene Leistungen innerhalb der Schicht
 \item durch Inanspruchnahme von Diensten niedrigerer Schichten
\end{enumerate}

\begin{bsp}
  ISO-OSI-Referenzmodell
  
  \begin{tabular}{cll}
    Schicht\\
    7& Anwendungsschicht/ application layer& Dienste,
       Anwendungsentstützung (ftp, rpc,\ldots)\\
    6& Darstellungsschicht/ presentation layer& einheitliche
       Informationsdarstellung\\
    5& Kommunikations-Steuerschicht/ session layer & Organisation und
       Steuerung des Dialogs (Zugangskontrolle, Abrechnung)\\
    4& transport layer& End-zu-End-Kontrolle zuverlässiger und
       effizienter Datentransport\\
    3& Vermittlungsschicht/ network layer& Wegewahl und Flusskontrolle\\
    2& Sicherungsschicht/ data link layer& Auf- bzw. Abbau einzelner
       Übertragungsabschnitte, Fehlererkennung/-korrektur\\
    1& Bitübertragungsschicht/ physical layer& mechanische, elektrische
       und funktionelle Steuerung der Übertragung
  \end{tabular}
  5--7 nennt man die anwendungsorientierten Schichten, 1--4 nennt man die
  transportorientierten Schichten
  
  \begin{enumerate}
   \item Jede Schicht realisiert einen oder mehrere Dienste mithilfe von
    Prozessen (Instanzen o.\,ä.)
   \item Zur Erbringung eines Dienstes können Instanzen \emph{einer}
    Schicht miteinander kooperieren oder kommunizieren.
   \item Die Kooperation erfolgt mithilfe von Schichtprotokollen.
   \item Instanzen greifen auf Dienste der \emph{direket} darunterliegenen
    Schicht zurück.
  \end{enumerate}
  
  Über die Schnittstelle zwischen $n$-ter und $(n-1)$-ter~Schicht werden
  folgende Informationen ausgetauscht:
  \begin{itemize}
   \item Benutzerdaten der $(n+1)$-ten~Schicht
   \item Kontrollinformationen zwischen den $n$~Instanzen
   \item Steuer- und Kontrollinformationen für die $(n-1)$-te~Schicht
    zur Erbringung bestimmter Dienste.
  \end{itemize}
\end{bsp}

\section{CSP -- Communicating sequential processes}

Ist eine Beschreibungsmöglichkeit, basierent auf einer mathematischen
Theorie (Ansammlung von logischen Aussagen und Gesetzen), zur
Spezifikation, zum Entwurf und zur Implementierung von
Kommunikationsprotokollen und interagierenden Systemen.

Die Grundidee dabei ist eine Zerlegung des System in parallel arbeitende
Teilsysteme, die untereinander und mit der Umgebung kommunizieren.

\begin{center}
  \include{csp-komm.latex}
  
  \begin{enumerate}
   \item Prozeß $A$
   \item Prozeß $B$
   \item Kanal $A\rightarrow B$
   \item Kanal $B\rightarrow A$
  \end{enumerate}
\end{center}

Durch die Anwendung der mathematischen Gesetze läßt sich die Korrektheit
des Systems nachweisen oder die Fehler erkennen.

Grundbegriffe:
\begin{description}
 \item[Objekt] ist eine Gegenstand, der agiert oder mit seiner Umgebung
  interagiert. Dies kann z.\,B. ein Rechner oder ein Programm sein.
 \item[Prozeß] ist ein Modell zur Verhaltensbeschreibung eines Objekts.
  In einem Prozess läuft eine Folge von Ereignissen ab.
 \item[Ereignis] ist die zeitlose Veränderung des Verhaltens eines oder
  mehrer Prozesse.
 \item[Alphabet] ist die Menge von Ereignissen, die einen Prozess
  beschreiben. Beschreibung: $\alpha P$
 \item[Präfixnotation] Sei $P$ ein Prozess und $\alpha P$ ein Alphabet.
  Dann beschreibt $R=(x\rightarrow P)$ mit $x \in \alpha P$ ein Objekt,
  dass am Ereignis $x$ teilnimmt und sich anschließend wie der
  Prozess~$P$ verhält.
 \item[Ereignis STOP/HALT] Dieses Ereignis ist in jedem Alphabet enthalten. Zur
  Unterscheidung schreibt man $STOP_{\alpha P}$ oder $HALT_{\alpha P}$
 \item[Operator $\rightarrow$] ist rechtsassoziativ
  \begin{gather}
    (x\rightarrow y \rightarrow P) = ( x\rightarrow ( y \rightarrow P))
  \end{gather}
\end{description}

\begin{bsp}
  \begin{gather}
    Uhr := (tick \rightarrow tack \rightarrow STOP_{\alpha P})
  \end{gather}
  
  Problem: Die Uhr ist nach dem $tack$ kaputt. Hier fehlt eine Rekursion.
\end{bsp}

Regeln:
\begin{description}
 \item[Auswahlregel] Ein Prozess nimmt entweder am Ereignis $x$ oder am
  Ereignis $y$ teil.
  
  \begin{gather}
    R = (x\rightarrow P | y \rightarrow Q)
  \end{gather}
  beschreibt eine Objekt~$R$, das entweder am Ereignis $x$ teilnimmt und
  sich anschließend wie der Prozess~$P$ verhält oder am Ereignis $y$
  teilnimmt und sich anschliesßend wie der Prozess~$Q$ verhält.
  
  \begin{bsp}[Maus im Labyrinth]
    
    \begin{gather}
      \alpha M = \{oben, unten\}\\
      M = \{ oben \rightarrow STOP_{\alpha M} | rechts \rightarrow rechts
	 \rightarrow oben \rightarrow oben \rightarrow STOP_{\alpha M} \}
    \end{gather}
    
    Prozessbaum:
    \begin{center}
      \includegraphics{maus-prozessbaum}
    \end{center}
  \end{bsp}
 \item[Rekursionsregel] Bei einer rekursionsgleichung kommt die Variable
  auf beiden Seiten der Gleichung vor
  \begin{gather}
    P = (x\rightarrow P)
  \end{gather}
  
  \begin{bsp}
    \begin{gather}
      Uhr = (tick \rightarrow tack \rightarrow Uhr)
    \end{gather}
  \end{bsp}
  
  \begin{bsp}[Bitspeicher]
    Formulierung eines Bitpuffers (Flipflops).
    \begin{align}
      \alpha BP &= (in0, in1, out0, out1)\\
      BP &= (in0 \rightarrow out0 \rightarrow BP | in1 \rightarrow out1
	 \rightarrow BP)
    \end{align}
  \end{bsp}
 \item[Gegenseitige Rekursion]
  Verallgemeinerung der Rekursionsregel auf ein System von
  Prozeßgleichungen. Jeder Prozeß tritt genau einmal auf der linken Seite
  der Gleichung auf, alle Prozesse haben das selbe Alphabet
  
  \begin{bsp}
    \begin{align}
      P &= (a\rightarrow P | b\rightarrow Q)\\
      Q &= (b \rightarrow c \rightarrow Q | b \rightarrow d\rightarrow R
	 | d\rightarrow P)\\
      R &= (a\rightarrow b \rightarrow Q)\\
      \alpha P = \alpha Q = \alpha R = \{a,b,c,d\}
    \end{align}
  \end{bsp}
 \item[parallele Kompositionen] Bisher haben wir nur einzelne Prozesse
  betrachtet. Jetzt wollen wir Prozesse betrachten, die nebenläufig
  ablaufen und sich gegenseitig beeinflussen.
  
  Unter der Komposition zweier Prozesse~$P$ und $Q$ verstehen wir einen
  Prozess~$P\parallel Q$, der sich so verhält wie ein System zusammengesetzt aus
  den beiden Prozessen~$P$ und $Q$.
  
  Ein wichtiger Begriff ist das synchronisierende Ereignis $x$ mit $x\in
  \alpha P \wedge x\in \alpha Q$
  
  Es gibt zwei Möglichkeiten der Komposition:
  \begin{description}
   \item[Interaktion]
    $\alpha P = \alpha Q$ $\longrightarrow$ alle Ereignisse sind
    synchronisiert
    
    \begin{bsp}
      \begin{align}
	\alpha P &= \alpha Q = \{ a,b,c \}\\
	P &= (a\rightarrow b\rightarrow P | b \rightarrow P)\\
	Q &= (a \rightarrow ( b\rightarrow Q | c \rightarrow Q) )
      \end{align}
      
      -Die beiden Bäume-
      
      baum für $P \parallel Q$
      
      \begin{gather}
	P \parallel Q = (a\rightarrow b \rightarrow P \parallel Q)
      \end{gather}
    \end{bsp}
    \begin{bsp}
      \begin{align}
	\alpha P &= \alpha Q = \{a,b\}\\
	P &= (a \rightarrow b \rightarrow P)\\
	Q &= ( b\rightarrow a \rightarrow Q)\\
	P \parallel Q = STOP
      \end{align}
    \end{bsp}
    
    Regeln
    \begin{enumerate}
     \item $P\parallel Q = Q \parallel P$
     \item $P \parallel ( Q\parallel R) = (P \parallel Q) \parallel R$
     \item $P\parallel STOP = STOP$
     \item $(c\rightarrow P) \parallel (c\rightarrow Q) = c\rightarrow
      P\parallel Q$
     \item $(c\rightarrow P) \parallel (d\rightarrow Q) = STOP\quad
      (c\neq d)$
    \end{enumerate}
   \item[Concurency]\mbox{}\\
    Regeln: $a\in (\alpha P\setminus \alpha Q), b\in (\alpha Q\setminus
      \alpha P), c\in (\alpha P \cap \alpha Q)$
    \begin{enumerate}\setcounter{enumi}{6}
     \item $(a \rightarrow P) \parallel (c \rightarrow Q) = a \rightarrow
      (P \parallel (c\rightarrow Q))$
     \item $(c \rightarrow P) \parallel (b \rightarrow Q) = b \rightarrow
      ((c\rightarrow P) \parallel Q)$
     \item $(a \rightarrow P) \parallel (b \rightarrow Q) = (a \rightarrow
      P \parallel (b\rightarrow Q)) | (b\rightarrow (a\rightarrow P)
      \parallel Q)$
    \end{enumerate}

    \begin{bsp}
      \begin{align*}
	\alpha P &= \{ a,c\}\quad \alpha Q = \{b,c\}\\
	P &= (a\rightarrow c \rightarrow P)\\
	Q &= (c \rightarrow b \rightarrow Q)\\[2ex]
	P\parallel Q &= (a \rightarrow c \rightarrow P) \parallel
	   (c\rightarrow b\rightarrow Q)\\
	&= a\rightarrow ((c\rightarrow P) \parallel ( c\rightarrow
	   b\rightarrow Q))\\
	&= a \rightarrow c \rightarrow (P \parallel (b\rightarrow Q))\\[2ex]
	P \parallel (b\rightarrow Q)\parallel &= ( a\rightarrow
	   c\rightarrow P) \parallel (b\rightarrow Q)\\
	&= a\rightarrow (( c\rightarrow P) \parallel (b\rightarrow Q)) |
	   b\rightarrow (a\rightarrow c \rightarrow P) \parallel Q)\\
	&= a \rightarrow b \rightarrow \big((c\rightarrow P) \parallel
	   Q\big) | b\rightarrow \big(( a\rightarrow c\rightarrow P) \parallel
	   (c\rightarrow b \rightarrow Q)\big)\\
	&= a\rightarrow b \rightarrow \big(( c\rightarrow P) \parallel
	   (c\rightarrow b \rightarrow Q)\big) \parallel\\
	&\qquad b\rightarrow
	   \big(( a\rightarrow c\rightarrow P) \parallel
	   (c\rightarrow b \rightarrow Q)\big)\\
	&= a\rightarrow b \rightarrow c \rightarrow \big(P \parallel (b
	   \rightarrow Q)\big) | b \rightarrow\\
	&\qquad a \rightarrow \big(( c\rightarrow
	   P) \parallel ( c\rightarrow b\rightarrow Q)\big)\\
	&= a\rightarrow b \rightarrow c \rightarrow \big( P\parallel
	   (b\rightarrow Q) | b\rightarrow a \rightarrow c \rightarrow (P
	   \parallel (b \rightarrow Q)\big)
      \end{align*}
    \end{bsp}
    
    \begin{bsp}
      \begin{align*}
	\alpha BP_{1} &= \{ in0, in1, mid0, mid1 \}\\
	\alpha BP_{2} &= \{ mid0, mid1, out0, out1 \}\\
	BP_{1} &= ( in0 \rightarrow mid0 \rightarrow BP_{1} | in1
	   \rightarrow mid1 \rightarrow BP_{1} )\\
	BP_{2} &= (mid0 \rightarrow out0 \rightarrow BP_{2} | mid1
	   \rightarrow out1 \rightarrow BP_{2})\\
	BP_{1}\parallel BP_{2} &= (\ldots)\parallel (\ldots)
      \end{align*}
      
      \includegraphics{bsp2-prozessbaum}
    \end{bsp}
  \end{description}
\end{description}

\chapter{Grundlagen der Kommunikationsprotokolle}

\section{Entwicklunspasen für Kommunikationsprotokolle}

Ausgehend von einem \emph{Problem} wird eine \emph{informelle
Anforderungsdefinition} erstellt. Am Beispiel von USB wäre dies z.\,B.,
dass das Protokoll eine serielle Übertragung nutzt, mit Quitierung
arbeitet oder die angestrebte Datenrate. Danach erstellt man einen
\emph{Diensteentwurf} (Auswahl aus Normen) und erstellt eine
\emph{Dienstespezifikation} (Pflichtenheft).

Danach folgt der \emph{Protokollentwurf} der dann die
\emph{Protokollspezifikation}. An dieser Stelle sollte unbedingt eine
\emph{Verifikation} stehen, ob das Protokoll das leistet, was die
Dienstespezifikation fordert. Gegebenfalls sollte die
Dienstespezifikation noch einmal überarbeitet werden.

Der \emph{Programmentwurf} liefert die \emph{Programmspezifikation}.
Diese sollte einer Prüfung gegen die Protokollspezifikation
(\emph{Kommunikationsprüfung}) unterzogen werden. Danach beginnt man mit
der \emph{Implementierung}.

Die Prüfung der einzelnen Stufen wird oft aus Kostengründen unterlassen,
was im schlimmsten Falle dazu führt, dass an der Implementation Fehler
findet, die einem von ganz vorn beginnen lassen.

\section{A closer look to ISO/OSI}

Jede Schicht im ISO/OSI-Modell realisiert einen oder mehrere Dienste durch
\begin{itemize}
 \item eigene Leistung innerhalb der Schicht und/oder
 \item Inanspruchnahme von Diensten niedrigerer Schichten
\end{itemize}
und stellt diese Dienste der nächst höheren Schicht am sognannten
\emph{Dienstzugangspunkt} (engl.~Service Access Point, SAP) zur Verfügung.

\includegraphics{OSI-komm}

\begin{description}
 \item[ICI:] Interface control information
 \item[SDU:] Service data unit
\end{description}

Die Dienste werden mit symbolischen Namen bezeichnet, z.\,B.
\begin{description}
 \item[T-connect:] Aufbau einer Verbindung innerhalb der Transportschicht
 \item[P-data:] Datentransport in der Darstellungsschicht (presentation
  layer); Formatumwandlung, Datenanpassung
\end{description}

Ein Dienstelement ist ein logisch unteilbares Ereignis. Eine Folge von
Dienstelementen realisiert den Dienst. Es gibt vier Typen von
Dienstelementen:
\begin{itemize}
 \item Anforderung (request)
 \item Ankündigung (indication)
 \item Antwort (response)
 \item Bestätigung (confirmation)
\end{itemize}

Beispielaufruf eines Dienstelementes:
\verb|T-connect.request(called address, calling address, user data)|

Für den Austausch von Dienstelementen werden Regeln benötigt, die
sogenannten Dienstprotokolle. Es gibt zwei Typen von Dienstprotokollen
\begin{itemize}
 \item bestätigter Dienst
 \item unbestätigte Dienste (datagramm)
\end{itemize}

\subsection{Bestätigter Dienst}

todo: Hier fehlt eine Grafik
% \includegraphics{}

Unbestätigter Dienst: request, indication

\begin{description}
 \item[Weitere Begriffe]
  Jede Schicht realisiert ihre Teilaufgaben durch HW/SW-Modelle, d.\,h.
  Schicht-n-Protokollinstanzen genannt werden ($n$-Pl, $n$-endity)
  Instanzen der selben Schicht, die mit anderen kommunizieren, heißen
  Partnerinstanzen oder peer endity
  
  Die Kooperation von $n$-Pl's wirde durch ein Schicht-$n$-Protokoll
  geregelt. Der Austausch von Informationen erfolgt über
  Schicht-$n$-Protokolldaten ($n$-PDE, $n$-PDU)
  
  Jedes $n$-PDE besteht aus Nutzinformationen und
  Protokollkontrollinformationen ($n$-PKI).
\end{description}

\subsection{Welche Probleme treten bei der Kommunikation unabhängig von
irgendwelchen Protokollen immer wieder auf?}

Kommunikation zwischen zwei Partnern
\includegraphics{komm-zwei}

\begin{itemize}
 \item Festlegung der Datenstruktur
 \item Codetransparenz
 \item Segementation und Füllen
 \item Identifikation mit Sequenznummern
 \item Fehlererkennung und -korrektur
 \item Flußkontrolle
\end{itemize}

Kommunikation mit mehreren Partnern im Netz
\includegraphics{komm-netz}

\begin{itemize}
 \item Namensgebung und Adressierung
 \item Zugriffskontrolle
 \item Verkehrslenkung (routing)
\end{itemize}

\begin{enumerate}
 \item Datenstrukturen
  \begin{description}
   \item[PDE enthalten]
    \begin{itemize}
     \item Daten
     \item Befehle (bzgl. Rechte, Flußkontrolle)
     \item Attribute (z.\,B. Sequenznummern)
    \end{itemize}
    
    Probleme dabei sind:
    \begin{itemize}
     \item wo beginnt oder endet die Nachricht
     \item von welchem Typ ist die Nachricht (implizite Angabe oder
      expliziete Angabe mit Header)
    \end{itemize}
    
    Beispiel für Datenstrukturen anhand ISO/OSI
    \begin{description}
     \item[Schicht 1] (physical layer)
      
      Zeitmultiplexen
     \item[Schicht 2]
      Zeichensynchrone Übertragung (von IBM eingeführt -- SDLL Synchronus
      Data Link Control)
      
      Bitsynchrone Übertragung (HDLC High Level Data Link control)
      \begin{tabular}{|*{6}{c|}}
	\hline\\
	P&A&K& Nutzinformation \unit[$\geq 0$]{Bit}& PS& F\\
	\hline
      \end{tabular}
      
      F: Flag 011\,11\,110
      A: Adresse
      K: Kontrollinformation
      PS: Prüfsequenz
    \end{description}
  \end{description}
 \item Codetransparenz
  
  Drei Möglichkeiten:
  \begin{itemize}
   \item Verwendung eines Codes, in dem bestimmte Bitfolgen für
    Steuerzeichen reseviert sind (z.\,B. ASCII, EBCDIC,\ldots)
   \item Stopf-Bit (staffing bit) bei bitsynchroner Übertragung. Ein
    sogenannter Stopfbitgernerator fügt nach jedem Auftreten von fünf
    Einsen in Folge eine Null als Stopfbit ein. Damit ist die Folge sechs
    Einsen unmöglich. Der Empfänger entfernt nach fünf Einsen immer die
    folgende Null.
    
    Beispiel:
    $011\,11\,110 \rightarrow 001\,111\,110 \rightarrow \ldots
    \rightarrow 011\,11\,110$
   \item Ausweichzeichen (DLI -- data link escape) bei bytesynchroner
    Übertragung
    
    \begin{description}
     \item[Möglichkeit 1] Jedes Steuerzeichen in der Nutzinformation wird
      mit einem Ausweichzeichen DLE gekennzeichnet.
      
      Beispiel:
      Nutzinformation: <D><ETX><D><DLE><STX>
      Übertragung: <D><DLE><ETX><D><DLE><DLE><DLE><STX>
     \item[Möglichkeit 2] Kennzeichnung der Steuerzeichen in der
      Kontrollinformation mit <DLE>. Tritt <DLE> in der Nutzinformation
      auf, dann wird es verdoppelt.
    \end{description}
  \end{itemize}
 \item Segmentieren und Füllen
  
  Festlegung einer oberen Grenze für die Information. Dabei sollten
  gewisse Punkte berücksichtigt werden:
  \begin{itemize}
   \item Übertragungsfehler (Nachricht lang: hohe
    Fehlerwahrscheinlichkeit, Nachricht kurz: hoher Overhead)
   \item Flußkontrolle (eventuell großen Pufferbereich, ab Flaschenhälsen)
   \item Behandlung in Vermittlungsknoten (Annahme, Zwischenspeicherung,
    Bearbeitung, Ausgabe von Nachrichten)
  \end{itemize}
  
  Die zu übertragende Nachricht stimmt nicht mit der Größe des
  Natzdatenblocks überein.
  \begin{itemize}
   \item Nachricht zu lang $\rightarrow$ segmentieren
    
    Die Nutznachricht wird über mehrere Pakete verteilt.
    
    Beispiel: Schicht 3
    
   \item Nachricht ist zu kurz $\rightarrow$ Füllen
   \item kobinieren: Segmentieren und Füllen
    
    zu kleine Pakete werden mit Daten von Folgepaketen gefüllt
    
  \end{itemize}
\end{enumerate}

\subsection{Fehlererkennung und -korrektur}
\begin{itemize}
 \item Störung der Kommunikation durch
  \begin{itemize}
   \item Übertragungsfehler
   \item Fehler bei der Zwischenspeicherung
   \item Fehler des Interfaces
   \item Protokollfehler
  \end{itemize}
 \item Maßnahmen auf der Gegenseite:
  \begin{itemize}
   \item Sementieren
   \item Rechenelemente Kontrollinformation:
    \begin{itemize}
     \item Paritätsbits
     \item zyklische Blocksicherung (CRC -- cyclic redundancy check)
     \item Sequenznummern
    \end{itemize}
  \end{itemize}
 \item Maßnahmen auf der Empfängerseite:
  \begin{itemize}
   \item Überprüfung der Sicherungsbits
   \item Formatprüfung bei PDE (Protokolldateneinheit)
  \end{itemize}
 \item Korrektur des Fehlers:
  \begin{itemize}
   \item Vorwärtskorrektur (Hemming-Code, CRC)
   \item Aktive Fehlerkontrolle (Quittierungen) (praxistypisch)
   \item passive Fehlerkontrolle (Zeitüberwachung)
  \end{itemize}
\end{itemize}

\subsubsection{Beispiel für (Vorwärts-)Korrektur mit CRC}
\begin{description}
 \item[Sender] Nachricht (Daten + Steuerinformationen) wird durch ein
  Prüfpolynom dividiert, der Rest der Division wird übertragen = 2 Bits
 \item[Empfänger] Nachricht (Daten + Steuerinformationen + CRC) wird
  ebenfalls durch das Prüfpolynom dividiert
  
  \begin{gather*}
    \text{Ergebnis}
    \begin{cases}
      = 0&: \text{korrekte Übertragung}\\
      \neq 0 &:\text{fehlerhafte Übertragung}
    \end{cases}
  \end{gather*}
\end{description}

\subsubsection{HDLC (Ebene 2)}

Prüfpolynom $x^{16}+x^{12}+x^{5}+1$

\subsubsection{Aktive Fehlerkontrolle}
\begin{itemize}
 \item keine Übertragungsfehler: Quittieren mit \texttt{ACK}
 \item Übertragungsfehler: Quittieren mit \texttt{NAK} oder \texttt{REJ}
 \item Beispiel: MSV\,2 (medium speed version 2)
\end{itemize}

\includegraphics{sender-empf}

Was passiert im Fehlerfall

\begin{description}
 \item[Vorteil] einfaches Protokoll, kleiner Pufferbereich
 \item[Nachteil] Große Lücken in der Kommunikation
\end{description}

$\longrightarrow$ Verbesserung: Sammelquittung (Rollback \#1, \#2, \#3)

% Grafik

Problem:
% Grafik

Um das Problem allgemein zu erkennen, braucht man einen systematischen
Ansatz: CSP

\subsubsection{Was passiert im Fehlerfall?}

Vorteil: einfaches Protokoll, kleiner Pufferbereich. Nachteil: große
Lücken in der Kommunikation

Eine Verbesserung: Sammelquittung (Pullblock \#1, \#2, \#3)

Ein Problem ist, wenn eine Quittung gestört ist. Dann sendet der Sender
wieder eine Fehlermeldung.

um das Problem allgemein zu erkennen, braucht man einen systematischen
Ansatz: CSP

Prozessbeschreibung: Sendeprozess
\begin{align*}
  SP &= (NachrichtSP \rightarrow SPwait)\\
  SPwait &= (ACK KP2 \rightarrow SP / NAK KP2 \rightarrow SP \big|\\
  &\quad Noise KP2 \rightarrow NAK SP \rightarrow SPnoise)\\
  SPnoise &= (ACK KP2 \rightarrow SP\big| NAK KP2 \rightarrow NAK SP
     \rightarrow SPnoise \big| Noise KP2 \rightarrow NAK SP \rightarrow
     SPnoise)\\
  EP &= (Nachricht KP1 \rightarrow ACK EP \rightarrow EPwait \big| Noise
     KP1 \rightarrow NACK EP \rightarrow EP noise)\\
  EPwait &= (Nachricht KP1 \rightarrow ACK EP \rightarrow EPwait \big|
     NAK KP1 \rightarrow ACK EP \rightarrow EPwait \big|
     Noise EP1 \rightarrow NACK EP \rightarrow EPnoise)
\end{align*}

\subsubsection{Passive Fehlerkontrolle}
kein Übertragungsfehler: ACK
Übertragungsfehler/Empfänger reagiert nicht: Timerablauf beim Sender

Der Sender startet nach dem Versenden der Nachricht einen Timer~$\tau$.
Wird die Nachricht korrekt übertragen, bestätigt dies der Empfänger mit
einem \texttt{ACK}. Trifft beim Sender vor Timerablauf nicht ein
\texttt{ACK} ein, sendet dieser die Nachricht noch einmal.

\textbf{Problem:} Bei Schwankungen der Übertragungszeit oder bei Verzögerungen
beim Empfänger muß $\tau$ auf ein Maximum eingestellt werden. Kommt das
\texttt{ACK} nicht rechtzeitig vor Timerablauf, wird die Information
nachmals gesendet und somit verdoppelt, obwohl die Übertragung in Ordnung
war.

\subsection{Identifikation mit Sequenznummern}

Die Sequenznummern müssen nur in einem kleinem Zeitbereich eindeutig sein.
In der Praxis hat sich gezeigt, dass für Sequenznummern 3\,Bit
ausreichend sind.

Realisierung auf Ebene~2 in HDLC

\subsection{Flußkontrolle}

\begin{description}
 \item[Definition:] Anpassung von Sende- und Empfangsleistung
\end{description}

Methoden:
\begin{description}
 \item[Abweismechanismus (discarding)] Der Empfänger verwirft einfach
  die Pakete, der er (aus zeitlichen Problemen oder Speicherproblemen)
  nicht annehmen kann.
 \item[Unterbrechungsmethode (stop and go)] Der Empfänger steuert die
  Informationsverarbeitung. Er schickt dem Sender \emph{stop} oder
  \emph{go} Befehle.
  
  Wenn er z.\.B. feststellt, dass der Pufferbereich überlaufen wird,
  sendet er dem Sendet ein stop.
  
  \textbf{Problem:} schwankende Übertragungszeiten
  \begin{itemize}
   \item worst case Abschätzung $\Longrightarrow$ schlechte
    Kommunikationsauslastung
   \item großer Pufferbereich beim Empfänger
  \end{itemize}
 \item[stop and wait] Der Sender wartet auf die Bestätigung seiner
  Nachricht, bevor er die nächste Nachricht versendet.
 \item[Reservierungsmethode] Beim Verbindungsaufbau muss der Sender dem
  Empfänger seinen Wunsch für die Puffergröße mitteilen. Der Empfänger
  teilt ihm mit, wieviel er ihm zugesteht.
  
  Der Sender kann dann soviele Nachrichten auf den Weg schicken, wie auf
  der Empfängerseite Puffer zur Verfügung steht.
  
  unflexibel auf Kommunikationsänderungen reagieren die Puffergröße ist
  für die verbindung fest.

  \textbf{Beispiel:} ARPA-Net
  \begin{enumerate}
   \item Der Sender $S_{1}$ schickt dem Empfänger $S_{2}$ in der
    Initialisierungsphase (ICP) einen \texttt{STX} (send transmision request)
    mit der gewünschten Puffergröße.
    $S_{2}$ bestätigt mit \texttt{RTS} (request transmision start) und
    sendet paralle die bestätigte Puffergröße ($\leq$ gewünsche Größe) an
    $S_{1}$.
    
    Danach werden die Daten übertragen (?CP).
    
    Am Ende wird die Verbindung abgebaut (CCP)
  \end{enumerate}
 \item[Credit-Verfahren] Der Empfänger räumt dem Sender Kredit (Menge an
  Puffer) ein. Sobald der Kredit verbraucht ist, muss das Senden
  eingestellt werden. Wärend der Kommunikation kann der Kredit durch
  positive Quittungen wieder aufgefüllt oder vergrößert bzw. verkleinert
  werden.
  
  Problem: Treten beim Empfänger Änderungen der Bandbreite auf, so sendet
  er eine Kreditänderung (Erhöhrung oder Verringerung). Wird die
  Bestätigung des neuen Kredits gestört, sendet der Empfänger den Kredit
  neu. Kreditverdoppelung Lösung: Sequenznummern für die Kredite
 \item[Fensterverfahren (window method)]
\end{description}

% hier fehlt was

\begin{description}
 \item[Vorteil:] Reihenfolge grantiert, Flußkontrolle, geschütze
  Übermittlung
 \item[Nachteil:] Aufwand
 \item[Beispiele:] ARPA-Netz, X.25 (vitual call)
\end{description}

Aufbau einer virtuellen Verbindung mit Hilfe des Konzepts "`logische Kanäle"'
\begin{itemize}
 \item Ebene\,2 stellt zwischen der Datenendeinrichtung und dem
  Vermittlungsrechner im Netz einen gerichteten Datenübertragungskanal
  bereit.
  
  Beispielsweise durch Zeitmulitplexen können mehrere Anwendungsprozesse
  über diesen Kanal kommunizieren.
 \item Man unterscheidet bis zu $2^{12}$ logische Kanäle.
 \item Die logischen Kanäle werden den Awendungsprozessen permanent oder
  temporär zugeordnet.
\end{itemize}

Aufbau einer virtuellen Verbindung:
\begin{enumerate}
 \item Sender an Vermittlungsrechner ein \texttt{call request}-Paket mit
  Zieladresse und 
  Kanalnummer
 \item Vermittlungsrechner schickt das Paket durchs Netz
 \item Auswahl von logischem Kanal beim Empfänger beim letzten
  Vermittlungsrechner
 \item Der Empfänger schickt ein \texttt{call accepted}-Paket zurück zum
  Sender.
  
  $\Longrightarrow$ virtuelle Verbindung ist aufgebaut
 \item Datenübertragung beginnt
\end{enumerate}

Abbau der virtuellen Verbindung mit \texttt{clear request}-Paket und
\texttt{clear confirm}-Paket

Leitungsvermittlung: Netz aus Teilstrecken, die zu durchgehenden
Verbindungen zusammengeschalten werden.

\chapter{Verkehrslenkung (Routing)}

Normalerweise ist die Adresse des Empfängers bekannt und ortsgebunden.

Aufgabe der Verkehrslenkung ist, es nach vorgegebenen Kriterien den
optimalen Weg zwischen Sender und Empfänger auszuwählen.

Dabei gibt es verschiedene Kriterien:
\begin{itemize}
 \item Minimierung der mittleren Verzögerungszeit; schnellster Weg
 \item Maximierung des Gesmatdurchsatzes
 \item Minimierung der Teilstrecken im Netz
\end{itemize}

Für unterschiedliche Routingalgorithmen sollen möglichst alle folgenden
Eigenschaften gelten:
\begin{itemize}
 \item funktionell Korrekt
 \item einfach
 \item robust (hinsichtlich Hardware-/Software-Fehler, Topologie)
 \item fair
 \item optimal
\end{itemize}

Die Eigenschaften können sich widersprechen.

Wir unterscheiden zwei Klassen von Verfahren: adaptive und nicht adaptive
Verfahren.

\section{Nichtadaptive Verfahren}
\begin{description}
 \item[Fluten (flooding)] Die Nachricht wird an jedem Vermittlungsrechner
  an seine Nachbarn (mit Außnahme des Rechners, von dem die Nachricht
  stammt) weitergegeben und der Hopzähler dekrementiert. Wenn der
  Hopzähler 0 ist, wird das Paket vernichtet. Zu Beginn wird der
  Hopzähler auf den maximalen Durchmesser des Netzes gesetzt.
  
  Nachteil: Exponentielle Vermehrung der Pakete, Vorteil: sehr robust
 \item[Feste Leitungslenkung]
  A $\rightarrow$ B = 8
  A $\rightarrow$ D = 4
  A $\rightarrow$ H = 3
  B $\rightarrow$ C = 3
  B $\rightarrow$ D = 5
  B $\rightarrow$ E = 2
  C $\rightarrow$ E = 5
  c $\rightarrow$ F = 2
  d $\rightarrow$ g = 2
  e $\rightarrow$ f = 2
  e $\rightarrow$ g = 2
  e $\rightarrow$ h = 2
  f $\rightarrow$ i = 2
  g $\rightarrow$ h = 1
  h $\rightarrow$ i = 4
  
  Strecken gewichtet mit der Verzögerungszeit
  
  \begin{tabular}{c|ccc}
    A& Nachbarknoten& Nachbarknoten\,2& Nachbarknoten\,3\\
    \hline
    B& H & B & D\\
    C& H & B & D\\
    D& D & H & B\\
    E& H & D & B\\
    F& H & D & B\\
    G& H & D & B\\
    H& H & D & B\\
    I& H & D & B
  \end{tabular}
  
  Nachteil: zu starr
 \item[Alternative Leitweglenkung]
  Zum besten Weg wird in der Tabelle eine Spalte für den zweitbesten,
  drittbesten, \ldots Weg angelegt. Zeitweilige Störungen können umgangen
  werden
\end{description}

Alle Methoden haben aber das Problem, dass sie nicht die Dynamik des
Netzes berücksichtigen können.

\section{Adaptive Verfahren}

Periodische Anpassung der Leitwegtabellen unter Berücksichtigung des
Verkehrs und der Topologien.

\begin{description}
 \item[Frage:] Zentrale oder dezentrale Aufbereitung der Tabellen?
 \item[zentral] Vorteil: Konsistenz -- alle Rechner arbeiten mit
  denselben Tabellen, Nachteil: hocher Aufwand die Tabellen zu verteilen,
  Ausfall des Netzmanagers = Ausfall des Netzes
 \item[dezentral] Periodischer Austausch von Lastinformationen mit
  benachbarten Rechnern. Nachteil/Vorteil genau umgekehrt zu zentral
\end{description}

% hier fehlen große Tabellen

\begin{description}
 \item[Vorteil:] nur noch lokale Last durch wenige Tabellen
 \item[(Nachteil:)] Lastsituationen aus der Ferne wird nicht
  berücksichtigt; jedoch nicht so problematisch, da dieser Verbindungen
  uninteressanter
\end{description}

\subsection{Lastbegrenzung}

Diagramm: Gesamtverzögerungszeit(Verkehrsdichte) $e^{x-10}$ mit
Senkrechter bei $x=10$ links davon akzeptabel, rechts nicht mehr akzeptabel

Probleme: "`Store and forward lockup"' und "`Reassembly lockup"'

\subsubsection{Store and forward lockup}
\includegraphics{store-forw-net}

inXY: Daten, die an Rechner X eingegeben werden und an Y gehen sollen.
Diese werden im Transferspeicher abgelegt

transXY: Daten, die von Rechner X kommen und zu Rechner Y. Y$\neq$
eigener Rechnernache $\rightarrow$ Paket in Transferspeicher (beschränkte
Größe), andernfalls in den lokalen Speicher (unendlich groß)

Spezifikation in CSP:
\begin{align*}
  PvA &= (inAC \rightarrow PvAAC | inAB \rightarrow PvAAB | transCA
     \rightarrow PvA | transCB \rightarrow PvAAB)\\
  PvAAC &= (transAC \rightarrow PvA | transCA \rightarrow PvAAC)\\
  PvAAB &= (transAB \rightarrow PvA | transCA \rightarrow
     PvAAC)\\[2\lineskip]
  PvB &= (inBC \rightarrow PvBBA | inBC \rightarrow PvBBC | transAB
     \rightarrow PvB | transAC \rightarrow PvBBC)\\
  PvBBA &= (transBA \rightarrow PvB | transAB \rightarrow PvBBA)\\
  PvBBC &= (transBC \rightarrow PvB | transAB \rightarrow
     PvBBA)\\[2\lineskip]
  PvC &= (inCB \rightarrow PvCCB | inCA \rightarrow PvCCA | transBC
     \rightarrow PvC | transBA \rightarrow PvCCA)\\
  PvCCB &= (transCB \rightarrow PvC | transBC \rightarrow PvCCB)\\
  PvCCA &= (transCA \rightarrow PvC | transBC \rightarrow
     PvCCB)
\end{align*}

um jetzt einen Deadlock zu finden, schalten wir die drei Prozesse parallel

\begin{align*}
  PvA \| PvB \| PvC &= (&inAC \rightarrow PvAAC \| PvB \| PvC \big|\\
  && inAB \rightarrow PvAAB \| PvB \| PvC \big|\\
  && inBA \rightarrow PvA \| PvBBA \| PvC \big| \\
  && inBC \rightarrow PvA \| PvBBC \| PvC \big| \\
  && inCB \rightarrow PvA \| PvB \| PvCCB \big| \\
  && inCA \rightarrow PvA \| PvB \| PvCCA )\\
  & = inAC \rightarrow inBA \|PvBBA\| \ldots\\
  & = inAC \rightarrow inBA \rightarrow inCB \ldots
\end{align*}

Damit hat man einen Lockup errreicht

\subsubsection{Reassembly lockup}

Durch ungünstiges Eintreffen der Pakete, können alle Speicherrahmen
reserviert, jedoch noch nicht voll, sind. Wenn die daran angeschlossenen
Vermittlungsrechner wiederum mit Paketen für andere Verbindungen zu
diesem Rechner gefüllt sind, können die restlichen Pakete für die
geöffneten Rahmen nicht durchkommen, der Vermittlungsrechner kann aber
auch keine neuen Pakete annehmen, da bei ihm alle Rahmen für das
reassembling belegt sind.

\subsection{Lastbegrenzungsmethoden}

\begin{description}
 \item[Linkmethode:] Für jeder Nachricht muss eine fiktive Leitung
  (Link) bis zum Ziel belegt werden. Die Anzahl der Links zwischen Sender
  und Empfänger ist begrenzt.

  Für diese maximale Anzahl von Links muss Reassamblingspuffer zur
  Verfügung gestellt werden. Pro Link darf nur eine Nachricht verschickt
  werden. (ARPA-net, altes Verfahren)
 \item[Reservierungsmethode:] Vor der Übertragung wird im Zielknoten
  Speicher reserviert für die komplette Nachricht $\Rightarrow$ Anzahl der
  Nachrichten im Netz begrenzt (ARPA-net, neueres Verfahren)
 \item[Leerpaket-Methode:] Im Netz wird zu jedem Zeitpunkt die selbe
  Anzahl von Nachrichten bewegt.
 \item[Aufforderungsmethode:] Nachrichten können nur als Antwort auf eine
  Anfrage verschickt werden.
\end{description}

\section{Netzübergang}

Sollen zwei Netzwerke verbunden werden ist dafür eine Hardware norwendig
-- ein Gateway. Ein Gateway ist ein Protokollumsetzer auf der Ebenen
4--7 des ISO/OSI-Protokolls. Auf der Ebene~1 bezeichnet man diesen
Netzübergang als Repeater (einen Verstärker). Auf der Ebene~2 nennt man
es eine Bridge (Beispiel: Ethernet--token-ring). Auf Ebene~3 ist es ein
Router -- ein Router arbeitet selektiv, der nur Pakete weitergibt, wenn
ein Übergang notwendig ist.

\chapter{Leistungsbewertung}

Methoden zur Leistungsbewertung:
\begin{itemize}
 \item graphentheoretische Verfahren
 \item Verkehrtheoretische Verfahren (Warteschlangenmethode)
\end{itemize}

\section{Graphentheoretische Verfahren}

Ziel der graphentheoretischen Verfahren ist die Bestimmung des maximalen
Flusses zwischen Sender und Empfänger.

\section{Verkehrstheoretische Verfahren}

Warteschlangenmodell:

Warteschlange mit $n$ ($1\leq n \leq \infty$) Plätzen und $m$ ($1\leq m <
\infty$) Bedienstationen.

Ankunftsrate $\lambda= \frac{1}{a_{m}}$ ($a_{m}$: mittlere Ankunfsrate)
Bedienrate $\mu = \frac1{b_{m}}$ ($b_{m}$: mittlere Bedienrate)
Verkehrsgüte $\sigma = \frac\lambda\mu \leq 1$ Für $>1$ würde die
Warteschlange volllaufen und wir kämen in eine Deadlock-Situation.

$P_{i} = \sigma^{i} P_{0}$ Wahrscheinlichkeit, dass $i$ Aufträge in dem System sind.

\subsection{Wiegroß ist $P_{0}$?}

\begin{gather*}
  1 = \sum_{i=0}^{\infty} P_{i} = \sum_{i=0}^{\infty} \sigma^{i} P_{0} =
  P_{0} \sum_{i=0}^{\infty} \sigma^{i} = \frac{P_{0}}{1-\sigma}
\end{gather*}
$\Longrightarrow$ $P_{0} = 1-\sigma$ $\Longrightarrow$ $\sigma$ sollte
sehr nahe bei 1 liegen.

\subsection{Wieviel Pufferplätze sollen zur Verfügung gestellt werden?}

$P_{k}$ ($>k$ Warteplätze sind erforderlich)

\begin{gather*}
  P_{r} = \sum_{i=k+1}^{\infty} P_{i} = \sum_{i=k+1}^{\infty} \sigma^{i}
  P_{0} = \sum_{i=k+1}^{\infty} \sigma^{i} (1-\sigma) = (1-\sigma)
  \big(\sum_{i=0}^{\infty} \sigma^{i} - \sum_{i=0}^{k} \sigma^{i} \big)
  !! = \sigma^{k+1} (1-\sigma) \sum_{i=0}^{\infty} \sigma^{i} = \sigma^{k+1}
\end{gather*}

\subsection{Berechnung der mittleren Warteschlangenlänge $\overline{Q}$}

\begin{gather*}
  \overline{Q} = \sum_{i=0}^{\infty} iP_{i} = \sum_{i=0}^{\infty} i
  \sigma^{i} (1-\sigma) = (1-\sigma) \sum_{i=1}^{\infty} i\sigma^{i} =
  \sigma (1-\sigma) \sum_{i=1}^{\infty} i\sigma^{i+1} = \sigma (1-\sigma)
  \sum_{i=1}^{\infty} \frac{\partial \sigma^{i}}{\partial \sigma} =
  \sigma (1-\sigma) \frac{\partial \sum_{i=1}^{\infty}
  \sigma^{i}}{\partial \sigma} = \sigma (1-\sigma) \frac{\partial
  \frac{\sigma}{1-\sigma}}{\partial \sigma} = \frac{\sigma}{1-\sigma}
\end{gather*}

\subsection{Berechnung der effektiven Übertragungszeit}

Wielange dauert es, eine Nachricht von $n$\,Bits zu übertragen. Da zu
einer Nachricht immer ein Quittung gehört und bei einer gestörten
Quittung die Nachricht nochmal übertragen werden muss, betrachten wir
diese als zu der nachricht gehörend.

$n$: Länge der Nachricht + Länge der Quittung in Bits
$v$: Übertragungsgeschwindigkeit in Bits pro Sekunde
$P_{B}$: Bitfehlerwahrscheinlichkeit
$T_{eff}(n)$: Effektive Übertragungszeit der Nachricht mit der Länge $n$

$P_{0} = 1-P_{B}$: Wahrscheinlichkeit, dass kein Bitfehler auftritt

\begin{align*}
  P_{0}(n) &= (1 - P_{B})^{n}\\
  P_{1}(n) &= 1 - (1 - P_{B})^{n} = 1- (1- nP_{B} +
     \frac{n(n-1)}{2!}P_{B}^{2} - \ldots)\\
  & \approx nP_{B}
T_{eff}(n) = \frac{n}{v} (1+ P_{1}(n) + (P_{1}(n))^{2} + (P_{1}(n))^{3} +
     \ldots)\\
  &\approx \frac{n}{v} (1+ nP_{B})
\end{align*}

\chapter{Beispiele von Standardprotokollen}

Die Welt der heutigen Protokolle basiert auf dem ISO/OSI-Schichten-Modell
(application layer, presentation layer, session layer, transport layer,
network layer, data link layer, physical layer). Das heute in der Praxis
übliche TCP/IP-Protokoll kennt jedoch nicht die Schichten presentation
layer und session layer.

TCP/IP  gibt es in drei Versionen:
\begin{itemize}
 \item Basisband -- mit CSMA/CD
 \item Breitband -- Token Access
 \item Glasfaser -- Reservierten Zugriff
\end{itemize}

ISO/OSI-Referenzmodell:

\begin{description}
 \item[Bitübertragungsschicht] Dienste: ungesicherte Systemverbindung,
  Sequenzialisierung, Störungsbenachrichtigung an die Sicherungsschicht
  
  Praxisrelevante Normen:
  \begin{description}
   \item[V24:] Öffentliches Fernsprechnnetz mit analoger Übertragung
   \item[X.21:] Öffentliches Fernsprechnnetz mit digitaler Übertragung
  \end{description}
 \item[Sicherungsschicht] (Bei TCP/IP besteht diese Schicht aus zwei
  Teilen: LLC -- logical link control, MAC -- medium access control)
  
  Aufgaben: Flußkontrolle, Fehlerkontrolle, Reihenfolgekontrolle,
  Fehlerbenachrichtigung in Schicht\,3
  
  Dienste:
  \begin{itemize}
   \item unbestätigte, verbindungsunabhägige Dienst, d.\,h. senden von
    unabhägigen Paketen ohne Empfangsquittung (Datagrammdienst)
   \item bestätigter, verbindungsunabhängiger Dienst
   \item verbindungsorientierter Dienst, d.\,h. aufbau einer logischen
    Verbindung zwischen Sender und Empfänger: Nummerieren de Pakete,
    Quittung
  \end{itemize}
 \item[Vermittlungsschicht] Aufgaben: Routing, Flußkontrolle,
  Lastbegrenzung, Festlegung von Struktur und Eigenschaften von Laufwegen
  (Datagrammdienst oder viertuelle Verbindung in Schicht\,2)
  
  \begin{tabular}{lcc}
    & Datagramm & virtuelle Verbindung\\
    & (verbindungsunabhängig) & ( verbindungsabhängig)\\
    \hline
    Initialaufbau & --- & erforderlich\\
    Zieladresse & in jedem Paket erforderlich & nur zum Verbindungsaufbau
       erforderlich\\
    Reihenfolge & nicht garantiert & garantiert durch das Netz\\
    Fehlerüberwachung & --- & durch die Vermittlungsschicht\\
    Flußkontrolle & --- & im Netz vorhanden
  \end{tabular}
 \item[Transportschicht] Aufgaben: zuverlässige End-zu-End-Kontrolle
  (Transportverbindung vom Sender zum Empfänger im Netz), Fragmentieren,
  Multiplexen (aufwärts oder abwärts), Flußkontrolle (DEE-zu-DEE)
  
  Abwärtsmultiplexen: zusammenfassen von mehreren Kanälen zu einem,
  Aufwärtsmultiplexen: verteilen von einem Kanal auf mehrere Kanäle
  
  Es gibt drei unterschiedliche Verbindungklassen:
  \begin{enumerate}[{Type}~A]
   \item Netzverbindung mit geringer Restfehlerrate der unteren Schichten
    und einer geringeren Rate von Fehlern, die der Transportschicht
    gemeldet werden (sehr hypothetisch, Spezialnetze)
   \item Netzverbindung mit geringer Restfehlerrate der unteren
    Schichten, aber einer nicht vertretbaren Rate von gemeldeten Fehlern
    (z.\,B. digitale Nachrichtenübertragung in öffentlichen Netzen --
    X.25 Protokoll)
   \item Die Restfehlerrate ist nicht vernachlässigbar, die
    Fehlerkorrektur muss komplett durch die Transportschicht erfolgen
    (z.\,B. Netze mit analoger Übertragung)
  \end{enumerate}
  
  dazu gehören fünf Transportprotokollklassen:
  \begin{enumerate}[{Klasse}~1]
    \setcounter{enumi}{-1}
   \item (simple class) keine fehlerbehebung, es stehen nur die Dienste
    Verbindungsaufbau, Datenübertragung und Verbindungsabbau zur
    Verfügung -- da jedoch auch Fehler in der Transportschicht auftreten
    können ist diese Klasse zu einfach
   \item (basic error recovery class) Klasse~0 plus Fehlerbehandlung
   \item (multiplexing class) Klasse~0 plus Multiplexen
   \item (error recovery and multiplexing class) Klasse~1 plus Klasse~2
   \item (error detection and recovery class) Klasse~3 plus umfangreiche
    Fehlerbehandlung
  \end{enumerate}
 \item[Sitzungsschicht] Aufgaben: Identifikation von externen Benutzern,
  Synchronisation, Wiederherstellungspunkte, Transparente Absicherung
  gegen Fehler der Transportschicht
\end{description}

\end{document}
% LaTeX_output_format: pdf
