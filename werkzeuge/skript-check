#!/usr/bin/perl -WT --
#
# Copyright (c)
#       2006,2007        Jörg Sommer <joerg@alea.gnuu.de>
#
#       -*- This file is part of the project "Vorlesungsskripte -*-
#       -*- der Fakultät Mathematik/Informatik an der FSU Jena" -*-
#
# Description:   This program is lint for the latex documents. It checks
#                for some condition and grouse or criticize if they are
#                violated. 
#
# License: This program is free software; you can redistribute it and/or
#	   modify it under the terms of the GNU General Public License as
#	   published by the Free Software Foundation; either version 2 of
#	   the License, or (at your option) any later version.
#
#          This program is distributed in the hope that it will be
#	   useful, but WITHOUT ANY WARRANTY; without even the implied
#	   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#	   PURPOSE.  See the GNU General Public License for more details.

use strict;

##########
#
# Erstmal ein paar Hilfsfunktionen
#
sub schimpfen
{
    # Fixme: auf Zeilenlänge prüfen
    print "F: ($.) ".join(" ", @_)."\n";
}

sub monieren
{
    # Fixme: auf Zeilenlänge prüfen
    print "W: ($.) ".join(" ", @_)."\n";
}

my (@such_regeln, @kommentar_regeln, @treffer_regeln, @existiert_regeln);

sub neue_suchregel
{
    ${$_[1]} = 0 if ( !defined( ${$_[1]} ) );
    push(@such_regeln, [@_]);
}

sub neue_kommentar_suchregel
{
    ${$_[1]} = 0 if ( !defined( ${$_[1]} ) );
    push(@kommentar_regeln, [@_]);
}

sub neue_funktions_regel
{
    push(@treffer_regeln, [@_]);
}

sub neue_existiert_regel
{
    my $var;
    neue_suchregel(shift @_, \$var);
    push(@existiert_regeln, [\$var, @_]);
}

our $deaktiviert = 0;
our $ignorierte_zeilen;

sub pruefe_zeile
{
    our $zeile = shift @_;

    if (/^\s*%\s*skript-check\s+aus$/)
    {
        print "I: ($.) skript-check abgeschaltet\n";
        $deaktiviert = 1;
        $ignorierte_zeilen = 0;
        return;
    }

    if ($deaktiviert)
    {
        if (/^\s*%\s*skript-check\s+an$/)
        {
            print "I: ($.) skript-check eingeschaltet, ".
              "$ignorierte_zeilen Zeilen übersprungen\n";
            $deaktiviert = 0;
        }

        ++$ignorierte_zeilen;
        return;
    }

    foreach (@kommentar_regeln)
    {
        my ($regex, $var) = @$_;
        ++$$var if ($zeile =~ $regex);
    }
    $zeile =~ s/(^|[^\\])%.*/$1%/ if ($zeile =~ /(^|[^\\])(\\\\)*%.+/);
    return if ($zeile =~ /^[\s%]*$/);

    foreach (@such_regeln)
    {
        my ($regex, $var) = @$_;
        ++$$var if ($zeile =~ $regex);
    }
    foreach (@treffer_regeln)
    {
        my ($pre_regex, $regex, $fun, $args) = @$_;
        # print "$pre_regex\n";
        &$fun($args) if ($zeile =~ $pre_regex and $zeile !~ $regex);
    }
}

sub alle_regeln_vergessen
{
    (@such_regeln, @kommentar_regeln, @treffer_regeln, @existiert_regeln) = ();
}

my $ltxspc = qr/(\s|~|\\([,:;]|q?quad))*/;

##########
#
# Hier geht's jetzt los. Sieht man's schon?
#
die "Keine Dateien zum Überprüfen angegeben" if ($#ARGV == -1);

unless ( open(DATEI, "<".$ARGV[0]) )
{
    schimpfen "Das Hauptdokument lässt sich nicht öffnen: $!";
    exit 1;
}
print "I: lese ".$ARGV[0]." ein.\n";
shift @ARGV;

##########
#
# Alles was vor \documentclass geprüft werden soll:
#

my ($rubber_watch_gefunden);
neue_kommentar_suchregel(qr/^%[%\s]*rubber:\s*watch\s*\$base\.thm/,
                         \$rubber_watch_gefunden);

# nag muss verwendet werden, damit wir veraltete Befehle finden
neue_existiert_regel(qr/\\RequirePackage\[l2tabu,orthodox\]\{nag\}/, \&schimpfen,
                     "Das Paket nag[l2tabu,orthodox] muss mit \\RequirePackage"
                     ." vor \\documentclass eingebunden werden!");

while (<DATEI>)
{
    last if (/^[^%]*\\documentclass/);
    pruefe_zeile($_);
}
if ( !defined($_) )
{
    schimpfen('Im Hauptdokument gibt es kein \\documentclass');
    exit 1;
}
foreach (@existiert_regeln)
{
    my ($var, $fun, $arg) = @$_;
    &$fun($arg) unless ($$var);
}

alle_regeln_vergessen();

##########
#
# Alles was vor \begin{document} geprüft werden soll:
#

# onlyamsmath muss verwendet werden, damit wir $$ $$ erkennen können
neue_existiert_regel(qr/\\usepackage\[.*all.*\]\{onlyamsmath\}/, \&schimpfen,
                     "Das Paket onlyamsmath muss verwendet werden!");

# Kleiner Hack um alle Pakete mitzuschreiben
our %paket_gefunden;
sub usepackage
{
    our ($zeile, %paket_gefunden);
    $zeile =~ /\\usepackage(\[.*\])*{([\w\-, ]*)}/;
    foreach ( split(',', $2) )
    {
        y/ //d;
        ++$paket_gefunden{$_};
    }
}
neue_funktions_regel(qr/\\usepackage/, qr/^$/, \&usepackage, undef);

my ($makeindex_gefunden, $index_gefunden);
neue_suchregel(qr/\\makeindex/, \$makeindex_gefunden);
neue_suchregel(qr/\\index/, \$index_gefunden);

# Die Variante mit * erfordert ein % am Ende der Zeile. Damit können sich nicht
# ungewollt Leerzeichen in die Ausgabe einschleichen und die Definitionen
# erfordern etwas mehr Sorgfalt.
neue_funktions_regel(qr/\\(re)?new(command|environment)\s*\{/, qr/^$/, \&schimpfen,
                      '\(re)new(command|environment) nur mit * verwenden');

# Die Klassen aus Koma-Skript sind an die deutschen Verhältnisse des
# Schriftsatz' besser angepasst, als die englischen. z.B. Überschriften mit
# serifenloser Schrift.
neue_funktions_regel(qr/\\documentclass/, qr/\{scr/, \&schimpfen,
                'Es sollen nur Klassen aus Koma-Skript verwendet werden!');

# es muss in der Präampel der Befehl \SVN mit LastChangedDate und
# LastChangedRevision aufgerufen werden, damit später \SVNDate und
# \SVNLastChangedRevision funktionieren. Es müssen die langen Versionen
# verwendet werden, weil diese eine unbeabsichtigte Ersetzung innerhalb des
# Textes wie bei $Id$ unwahrscheinlicher machen.
neue_existiert_regel(qr/\\SVN \$LastChangedRevision: \d+ \$/, \&schimpfen,
                     '\SVN für LastChangedRevision nicht gefunden; '.
                  '"svn propset svn:keywords LastChangedRevision" aktiviert?');
neue_existiert_regel(qr/\\SVN \$LastChangedDate: .{3,} \$/, \&schimpfen,
                     '\SVN für LastChangedDate nicht gefunden; '.
                     '"svn propset svn:keywords LastChangedDate" aktiviert?');

our $theoremstyle;
sub thmstyle
{
    our ($zeile, $theoremstyle);
    $zeile =~ /theoremstyle{(\w*)}/;
    $theoremstyle = $1;
}
neue_funktions_regel(qr/\\theoremstyle/, qr/^$/, \&thmstyle, undef);

our @umgebungen_gefunden;
sub environment
{
    our ($zeile, @umgebungen_gefunden);
    $zeile =~ /\\newenvironment\*?{(\w*)}/;
    if ( defined($1) )
    {
        push(@umgebungen_gefunden, $1);
    }
    else
    {
        print "Problem in $.\n";
    }
}
neue_funktions_regel(qr/\\newenvironment/, qr/^$/, \&environment, undef);

our @theoreme_gefunden;
sub theorem
{
    our ($zeile, @theoreme_gefunden, $theoremstyle, @umgebungen_gefunden);
    $zeile =~ /\\newtheorem\*?{(\w*\*?)}/;
    my $thm = $1;
    # \theoremautorefname wird von hyperref selbst definiert, daher kann
    # theorem als Umgebung betrachtet werden.
    if  ( (defined($theoremstyle) and $theoremstyle =~ /^nonumber/) or
          $zeile =~ /\\newtheorem\*/ or $thm eq 'theorem')
    {
        push(@umgebungen_gefunden, $thm);
    }
    else
    {
        push(@theoreme_gefunden, $thm);
    }
}
neue_funktions_regel(qr/\\newtheorem/, qr/^$/, \&theorem, undef);

our %autorefnames_gefunden;
sub autorefname
{
    our ($zeile, %autorefnames_gefunden);
    $zeile =~ /\\newcommand\*?\{\\(\w*)autorefname\}/;
    $autorefnames_gefunden{$1} = 1;
}
neue_funktions_regel(qr/\\newcommand.*autorefname/, qr/^$/, \&autorefname, undef);

our @befehle_gefunden;
sub newcommand
{
    our ($zeile, @befehle_gefunden);
    $zeile =~ /\\newcommand\*?{\\([\w@]*)}/;
    if ( defined($1) )
    {
        my $var;
        neue_suchregel(qr/\\$1($|[\W_])/, \$var);
        push(@befehle_gefunden, [$1, \$var]);
    }
    else
    {
        print "Problem in Zeile $.\n";
    }
}
neue_funktions_regel(qr/\\newcommand/, qr/^$/, \&newcommand, undef);

our @mathops_gefunden;
sub mathop
{
    our ($zeile, @mathops_gefunden);
    $zeile =~ /\\DeclareMathOperator\*?{\\(\w*)}/;
    push(@mathops_gefunden, $1);
}
neue_funktions_regel(qr/\\DeclareMathOperator/, qr/^$/, \&mathop, undef);

our $ntheorem_optionen;
sub ntheorem
{
    our ($zeile, $ntheorem_optionen);
    $zeile =~ /usepackage\[([\w\d,]*)\]{ntheorem}/;
    $ntheorem_optionen = $1;
}
neue_funktions_regel(qr/\\usepackage.*\{ntheorem\}/, qr/^$/, \&ntheorem, undef);

# Wenn das Theoremendezeichen festgelegt wird, dann muss auch bei ntheorem
# angegeben werden, dass diese verwendet wird.
sub thmsym
{
    schimpfen('\\usepackage{ntheorem} fehlt die Option thmmarks')
      if ($paket_gefunden{ntheorem} and $ntheorem_optionen !~ /thmmarks/);
}
neue_funktions_regel(qr/\\theoremsymbol/, qr/^$/, \&thmsym, undef);

# Wenn hyperref verwendet wird, muss die Option breaklinks angegeben werden,
# damit hyperref für PS-Dokumenten einen speziellen Algorithmus zum umbrechen
# der Links verwendet.
neue_funktions_regel(qr/\\usepackage.*{hyperref}/, qr/breaklinks/, \&schimpfen,
                'Für hyperref muss die Option "breaklinks" hinzugefügt werden!');

# Jens hat auf der Mailingliste im April 2007 über Probleme mit ngerman
# berichtet. Daher soll nur noch das Paket babel verwendet werden, zumal dieses
# auch die Ablösung von ngerman ist.
neue_funktions_regel(qr/\\usepackage{ngerman}/, qr/^$/, \&monieren,
                     'Das Paket (n)german nicht einsetzen. Stattdessen babel '.
                     'verwenden');

# In <news:5911t3F2itv7uU1@mid.uni-berlin.de> wurde empfohlen, statt dem Paket
# color das Paket xcolor zu verwenden. Ich erkläre gleich mal color als veraltet.
neue_funktions_regel(qr/\\usepackage{color}/, qr/^$/, \&monieren,
                     'Das Paket color nicht einsetzen. Stattdessen xcolor '.
                     'verwenden');

##########
#
# Die Präampel abarbeiten
#
while (<DATEI>)
{
    last if (/^[^%]*\\begin\{document\}/);
    pruefe_zeile($_);
}
if ( !defined($_) )
{
    schimpfen('Im Hauptdokument gibt es kein \\begin{document}');
    exit 1;
}
foreach (@existiert_regeln)
{
    my ($var, $fun, $arg) = @$_;
    &$fun($arg) unless ($$var);
}

##########
#
# Jetzt können wir prüfen, was alles in der Präampel stehen muss/soll
#

# fixmath muss verwendet werden, weil wir uns an die ISO halten wollen
schimpfen("Das Paket fixmath muss verwendet werden!")
    unless ($paket_gefunden{fixmath});

# das Paket svn muss geladen werden, weil wir auch \SVNDate im Dokument
# verlangen
schimpfen("Das Paket svn muss verwendet werden!") unless ($paket_gefunden{svn});

# wenn ntheorem verwendet wird, muss rubber auf die Datei $base.thm achten
schimpfen('rubber muss darüber informiert werden, dass die Datei $base.thm '.
          'wichtig ist!')
    if ($paket_gefunden{ntheorem} and not $rubber_watch_gefunden);

# Wenn die beiden Paket geladen werden, muss dies auch bei ntheorem angegeben
# werden, da sich einige Definitionen der beiden Pakete überschneiden und
# ntheorem sonst nicht funktioniert oder etwas kaputt macht.
foreach ('hyperref', 'amsmath')
{
    schimpfen("$_ geladen, aber nicht bei \\usepackage{ntheorem} angegeben")
      if ($paket_gefunden{ntheorem} and $ntheorem_optionen !~ /$_/);
}

alle_regeln_vergessen();

##########
#
# Hier kommen jetzt alle Regeln, die nach \begin{document} und in den anderen
# Dokumenten geprüft werden sollen
#

# (Neu-)Definitionen von Befehlen sollen in der Präampel stehen, weil
# später die Befehle übersehen werden können und dadurch schwer erkennbare
# Effekte hervortreten können.
neue_funktions_regel(qr/\\(re)?newcommand/, qr/^$/, \&monieren,
     'Nach \begin{document} soll kein \(re)newcommand mehr verwendet werden');

if ($paket_gefunden{index} or $paket_gefunden{makeidx})
{
    neue_existiert_regel(qr/\\makeindex/, \&schimpfen,
               'index oder makeidx geladen, aber \makeindex nicht verwendet')
      unless ($makeindex_gefunden);
    neue_existiert_regel(qr/\\printindex/, \&schimpfen,
               'index oder makeidx geladen, aber \printindex nicht verwendet');
    neue_existiert_regel(qr/\\index/, \&schimpfen,
                   'index oder makeidx geladen, aber \index nicht verwendet')
      unless ($index_gefunden);
}

# Es ist ein Unterschied, ob man : oder \colon im Mathemodus schreibt.
# Siehe Vorlage.
# Ausdrücke der Form "$f:A \rightarrow"
neue_funktions_regel(qr/\$\\?\w+$ltxspc:$ltxspc\\?\w$ltxspc\\(mapsto|rightarrow)/,
                     qr/^$/, \&monieren, 'das soll ein \colon und kein : sein');
# Ausdrücke der Form "\{ x\in\Omega:"
neue_funktions_regel(qr/\\\{\\?\w+$ltxspc(\\in$ltxspc\\?\w+$ltxspc)?:/,
                     qr/^$/, \&monieren, 'das soll ein \colon und kein : sein');

# Es gibt für einige Negationen spezielle Befehle, welche besser angepasst sind
# und damit besser aussehen.
neue_funktions_regel(qr/\\not(=|\\(in|cong|exists|mid))/, qr/^$/, \&monieren,
                     'Statt \not\XY besser den Spezialbefehl verwenden');

# LaTeX kann bei \includegraphics selbst die Endung herausfinden. Mit Endung
# geht die Flexibilität mit rubber verlohren.
neue_funktions_regel(qr/\\includegraphics\[[^]]*\]\{\w*\.\D*\}/, qr/^$/, \&monieren,
                     'Bei \includegraphics keine Dateiendung angeben.');

# Zwischen Abkürzungen muss ein halbes Leerzeichen stehen.
# <news:Xns987A80E64D0A7nililandnililandabcd@nililand.de>
# http://www.dante.de/dante/DTK/dtk96_4/Text/dtk96_4_neubauer_feinheiten.pdf
#
# Diese Regel trifft (unbeabsichtigt) auch zu, wenn eine Abkürzung am
# Satzanfang steht. Diese ist auch ein Fehler, man beginnt Sätze nicht nicht
# Abkürzungen.
neue_funktions_regel(qr/[[:alpha:]]\.(\s|~|\\([:;]|q?quad))*[[:alpha:]]\./, qr/^$/, \&monieren,
                     'Zwischen Abkürzungen steht ein Spatium \,');

# Nach abgekürzten Teilen einer Sinneinheit muss ein Spatium stehen.
# <news:Xns987A80E64D0A7nililandnililandabcd@nililand.de>
neue_funktions_regel(qr/(Prof|Dr)\./, qr/(Prof|Dr)\.\s*\\,/, \&monieren,
                     'Nach Prof. und Dr. kommt ein Spatium \,');

# Abkürzungen am Anfang des Satzes sehen komisch aus und sind kein guter Stil.
# Siehe typokurz
neue_funktions_regel(qr/[A-Z]\.$ltxspc[[:alpha]]\./, \&monieren,
                     'Am Satzanfang macht man keine Abkürzungen.');

# http://www.dante.de/dante/DTK/dtk96_4/Text/dtk96_4_neubauer_feinheiten.pdf
neue_funktions_regel(qr/\\%/, qr/\\,\s*\\%/, \&monieren,
                     'Vor dem Prozentzeichen muss ein Spatium stehen.');

# Vor etc. und usw. kommt kein Komma, da man vor 'und' kein Komma schreibt.
neue_funktions_regel(qr/,${ltxspc}(etc|usw)/, qr/^$/, \&monieren,
                      'Vor etc. und usw. kommt kein Komma');

# \autoref bietet mehr Raum, wo man draufklicken kann, und es merkt sich die
# Art der Umgebung (Satz, Bemerkung, ...) auf die man sich bezieht -- flexibler.
neue_funktions_regel(qr/(Satz|Lemma|Beispiel)$ltxspc\\ref/, qr/^$/, \&monieren,
                  'Für Referenzen besser hyperref und \autoref einsetzen');

# Alle unsere Skripte sollen ein Inhaltsverzeichnis haben
neue_existiert_regel(qr/\\tableofcontents/, \&schimpfen,
                     'Das Skript hat kein Inhaltsverzeichnis');

# Mit dieser Regel soll nur sichergestellt werden, dass wir die richtigen
# Dokumente einlesen
neue_funktions_regel(qr/\\begin{document}/, qr/^$/, \&monieren,
                      'Ein zweites \begin{document} gefunden');

# Es muss irgendwo im Dokument die aktuelle Versionsnummer und das Datum
# auftauchen, sonst können wir bei Fehlermeldungen überhaupt nicht
# nachvollziehen wo die Fehler sind.
neue_existiert_regel(qr/\\SVNDate/, \&schimpfen,
                     'Das Skript enthält nicht die Angabe \SVNDate');
neue_existiert_regel(qr/\\SVNLastChangedRevision/, \&schimpfen,
             'Das Skript enthält nicht die Angabe \SVNLastChangedRevision');

# Es sollen nicht die Umschreibungen für Umlaute verwendet werden, weil diese
# die Arbeit mit Programmen wie sed erschweren. Noch schlimmer wird es bei
# Dokumenten mit allen Formen: Tex \"a, ngerman "a und diekt ä
neue_funktions_regel(qr/(?<!\\)\\(3|ss|"[aou])/, qr/^$/, \&schimpfen,
          'Umlaute direkt eingeben, nicht die TeX-Umschreibung verwenden.');
neue_funktions_regel(qr/(?<!")"[aous]/, qr/^$/, \&schimpfen,
              'Umlaute direkt eingeben, nicht die Umschreibung verwenden.');

# Bei equation kann es Probleme geben. Da gather äquivalent ist, muss diese
# Verwendet werden <news:d9bfko$fdp$1@news.BelWue.DE>
neue_funktions_regel(qr/\\begin{equation\*?}/, qr/^$/, \&schimpfen,
          'Die Umgebung equation nicht verwenden. Stattdessen gather.');

# Im Dokument muss irgendwo die Adresse der Webseite und die E-Mailadresse der
# Mailingliste auftauchen. Beide Adressen dürfen nicht das erste Argument von
# \href sein, da der Link, auf den \href verweist nicht im PS bzw. im Ausdruck
# zu sehen ist.
neue_existiert_regel(qr'(?<!\\href\{<)http://www.minet.uni-jena.de/~joergs/skripte/'x,
       \&schimpfen, 'Die Adresse der Webseite steht nirgendwo im Dokument');
neue_existiert_regel(qr/\\(texttt|(nolink)?url)\{<?skripte\@listserv.uni-jena.de>?\}/,
                     \&schimpfen,
             'Die E-Mailadresse der Mailingliste steht nirgendwo im Dokument');

neue_funktions_regel(qr/\\ref[^*]/, qr/^$/, \&monieren, 'Da hyperref geladen, '.
                     'sollte auch mit \autoref gearbeitet werden')
  if ($paket_gefunden{hyperref});

# Im Dokument muss eine Titelseite sein, die \author, \title und \date enthält
neue_existiert_regel(qr/\\date/, \&schimpfen,
                     'Die Angabe \\date für die Titelseite fehlt');
neue_existiert_regel(qr/\\title/, \&schimpfen,
                     'Die Angabe \\title für die Titelseite fehlt');
neue_existiert_regel(qr/\\author/, \&schimpfen,
                     'Die Angabe \\author für die Titelseite fehlt');
neue_existiert_regel(qr/\\maketitle/, \&schimpfen, 'Die Titelseite fehlt');

my ($autoref_gefunden);
neue_suchregel(qr/\\autoref/, \$autoref_gefunden);

# Alle selbstdefinierten Theoremumgebungen sollten auch im Dokument vorkommen
foreach (@theoreme_gefunden, @umgebungen_gefunden)
{
    neue_existiert_regel(qr/\\begin\{$_\}/, \&monieren,
                     "Die Umgebung '$_' wurde definiert, aber nie verwendet")
       unless ($_ eq 'proof');
}

# Alle selbstdefinierten Befehle sollten auch im Dokument vorkommen
foreach (@befehle_gefunden)
{
    my ($cmd, $var) = @$_;
    neue_existiert_regel(qr/\\$cmd($|[\W_])/, \&monieren,
                     "Der Befehl '\\$cmd' wurde definiert, aber nie verwendet")
      unless ($$var > 0 or $cmd eq 'todo' or $cmd eq 'help' or
              $cmd eq 'indexsection' or $cmd =~ /autorefname$/);
}

# Alle selbstdefinierten Matheoperatoren sollten auch im Dokument vorkommen
foreach (@mathops_gefunden)
{
    neue_existiert_regel(qr/\\$_($|[\W_])/, \&monieren,
                   "Der Operator '\\$_' wurde definiert, aber nie verwendet");
}

# Da Leerzeichen vor und nach ~, \, und \  diese zerstören, werden solche
# Stellen bemängelt; leider gibt es auch viele Treffer im Mathemodus, wo die
# Leerzeichen kein Problem sind
neue_funktions_regel(qr/[ \t](\\[ ,]|~)/, qr/^$/, \&monieren,
                     'Vor ~, \, und "\\ " dürfen keine Leerzeichen '.
                     'kommen, sonst ist das Spezialleerzeichen futsch');
neue_funktions_regel(qr/((^|[^\\])(\\\\)*\\[ ,]|~)([ \t]|$)/, qr/^$/, \&monieren,
                     'Nach ~, \, und "\\ " dürfen keine Leerzeichen '.
                     'kommen, sonst ist das Spezialleerzeichen futsch');

# In der Vorlage war ein Rechtschreibfehler, der sich in alle Dokumente
# fortgepflanzt hat
neue_funktions_regel(qr/[Dd]enoch/, qr/^$/, \&monieren,
                     "Rechtschreibfehler: dennoch wird mit zwei N geschrieben");

##########
#
# Den Rumpf des LaTeX-Dokuments einlesen.
#

pruefe_zeile($_) while (<DATEI>);
close(DATEI);

while (@ARGV)
{
    if ( open(DATEI, "<".$ARGV[0]) )
    {
        print "I: lese ".$ARGV[0]." ein.\n";
        pruefe_zeile($_) while (<DATEI>);
        close(DATEI);
    }
    else
    {
        schimpfen("Die Datei ".$ARGV[0]." lies sich nicht öffnen: $!")
    }
    shift @ARGV;
}
print "I: Alle Dateien eingelesen.\n";
foreach (@existiert_regeln)
{
    my ($var, $fun, $arg) = @$_;
    &$fun($arg) unless ($$var);
}

##########
#
# Ab hier können wir prüfen, was alles im Dokument gestanden haben muss.
#

# Wenn \autoref für die Theoremumgebungen verwendet wird und keine autorefname
# für diese Umgebung definiert ist, gibt \autoref irgendwelchen Blödsinn aus.
if (exists $paket_gefunden{hyperref} and $autoref_gefunden)
{
    foreach (@theoreme_gefunden)
    {
        schimpfen("Für die Theoremumgebung '$_' noch \\".$_.
                  "autorefname definieren")
          unless (exists $autorefnames_gefunden{$_});
    }
}

#### 
# Warnungen:
# 
#   Das sind alles Pakete, die in der Vorlage verwendet werden
# * xspace Paket, aber kein \xspace
# * slashbox, aber keine \(back)slashbox
#
# * align, gather ohne label -> notag oder align*
#
# * ifpdf Paket, aber kein \ifpdf
# * graphicx, aber kein \includegraphics
# * tabularx, aber keine tabularx
# * longtable, aber keine longtable
