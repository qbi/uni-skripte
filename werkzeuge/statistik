#!/usr/bin/perl -Wn --

BEGIN
{
    # Um Bots zu bestimmen:
    #  sed '/^From /,/^$/d; /skripte/!d; /[Bb][Oo][Tt]/!d; s/^.*\] "[^"]*"[ 0-9"-]*//' \
    #      old-logs | sort -u

    # alle Bots, die am Anfang ihre Kennung stehen haben
    $bots_beg=qr/(?:Catch|Dot|Ena|Euro|Exa|Giga|Google|IRL|Mc|MJ12|msn|ps|Seek|Snap)[bB]ot[\/-]|egothor|e-SocietyRobot|ia_archiver|Twiceler|Semager\/|SimilarPages\/|[Ss]ogou(?: web)? spider|MSRBOT|woriobot|Yeti/;
    # alle Bots, die mit "Mozilla/5.0 (compatible;" beginnen
    $bots_moz_comp=qr/ (?:archive.org_|Dot|Exa|Google|MJ12|worio|Youdao)[bB]ot| Ask Jeeves| Yahoo! Slurp|MAINSEEK_BOT/;
    # alle Bots, die mit "Mozilla/5.0 (" beginnen
    $bots_moz=qr/compatible;(?:$bots_moz_comp)|SnapPreviewBot|Twiceler-/;
    # die anderen
    $bots_misc=qr/Googlebot-Mobile|^Mozilla\/4.0 compatible ZyBorg|^MSNBOT_Mobile|\(Exabot-Thumbnails\)$|^SpiderCow-BM$/;

    $BOTS=qr/^(?:$bots_beg)|^Mozilla\/5\.0 \((?:$bots_moz)|$bots_misc/;
    if ( defined($ARGV[1]) )
    {
        open ("-", "<", $ARGV[1]) or die "couldn't open logfile";
    }

    $BOT_IP_ADDR='^(65\.55\.|82\.(?:77\.173\.100|99\.30\.(?:..|1[01].|12[0-7]))$)';

    $SEARCH_ENGINE=qr<\.altavista\.com/web/|\.bing\.com/search|(?:google\.[a-z.]*/(?:custom|scholar|search))|metager\.de/meta/cgi-bin|search\.(?:icq|live|msn|yahoo)\.com|suche\.(?:exalead|fireball|lycos|t-online|web)\.de>;

    our (%PDF_ACCESS, %PDF_UNI_ACCESS, %PDF_GOOGLE_ACCESS, $FIRST_DATE, $LAST_DATE);
    our (%PS_ACCESS, %PS_UNI_ACCESS, %PS_GOOGLE_ACCESS);
    our (%TGZ_ACCESS, %TGZ_UNI_ACCESS, %TGZ_GOOGLE_ACCESS);
    our ($ALL_ACCESS, $ALL_UNI_ACCESS) = (0, 0);
    our (%REFERER, %SEARCH_ENGINE_REFS);
}
END
{
    print "Auswertung vom $FIRST_DATE bis zum $LAST_DATE\n\n".
          "PDF-Version\n".
          "Skript                   : Anzahl  aus Uni  über Google\n";
    foreach (sort { $PDF_ACCESS{$b} <=> $PDF_ACCESS{$a} } keys %PDF_ACCESS)
    {
        printf "%-25s: %4d  %8d  %11d\n", $_, $PDF_ACCESS{$_},
          (defined $PDF_UNI_ACCESS{$_})?$PDF_UNI_ACCESS{$_}:0,
          (defined $PDF_GOOGLE_ACCESS{$_})?$PDF_GOOGLE_ACCESS{$_}:0;
    }

    print "\nPostScript-Version\n".
          "Skript                   : Anzahl  aus Uni  über Google\n";
    foreach (sort { $PS_ACCESS{$b} <=> $PS_ACCESS{$a} } keys %PS_ACCESS)
    {
        printf "%-25s: %4d  %8d  %11d\n", $_, $PS_ACCESS{$_},
          (defined $PS_UNI_ACCESS{$_})?$PS_UNI_ACCESS{$_}:0,
          (defined $PS_GOOGLE_ACCESS{$_})?$PS_GOOGLE_ACCESS{$_}:0;
    }

    print "\nQuellen tgz\n".
          "Skript                   : Anzahl  aus Uni  über Google\n";
    foreach (sort { $TGZ_ACCESS{$b} <=> $TGZ_ACCESS{$a} } keys %TGZ_ACCESS)
    {
        printf "%-25s: %4d  %8d  %11d\n", $_, $TGZ_ACCESS{$_},
          (defined $TGZ_UNI_ACCESS{$_})?$TGZ_UNI_ACCESS{$_}:0,
          (defined $TGZ_GOOGLE_ACCESS{$_})?$TGZ_GOOGLE_ACCESS{$_}:0;
    }

    printf "\nZugriffe auf alle Seiten\n".
      "Von überall: %6d\n".
      "Aus der Uni: %6d\n", $ALL_ACCESS, $ALL_UNI_ACCESS;

    # bei URLs von uni-protokolle.de die GET-Parameter (die Session-ID)
    # wegschneiden
    foreach (grep m@uni-protokolle\.de/foren/viewt/.*\.html\?sid=@,
        keys %REFERER)
    {
        (my $without_sid = $_) =~ s/\?sid=.*//;
        $REFERER{$without_sid} += $REFERER{$_};
        delete $REFERER{$_};
    }
    # Einträge für Hostnamen mit und ohne www zusammenfassen
    foreach (keys %REFERER)
    {
        (my $with_www = $_) =~ s@://@://www.@;
        if (defined $REFERER{$with_www})
        {
            $REFERER{$with_www} += $REFERER{$_};
            delete $REFERER{$_};
        }
    }

    printf "\nDirekte Zugriffe von fremden Seiten\n";
    foreach (sort { $REFERER{$b} <=> $REFERER{$a} } keys %REFERER)
    {
        printf "%4d: %s\n", $REFERER{$_}, $_;
    }

    printf "\nZugriffe über Suchmaschinen\n";
    foreach (sort { $SEARCH_ENGINE_REFS{$b} <=> $SEARCH_ENGINE_REFS{$a} }
        keys %SEARCH_ENGINE_REFS)
    {
        printf "%4d: %s\n", $SEARCH_ENGINE_REFS{$_}, $_;
    }
}

next if ($_ eq "\n");

unless (/([\d.]*) - - \[([^\]]*)\] "([A-Z]*) (.*) HTTP\/1\.\d" (\d*) (\d*|-)(.*)$/)
{
    print "could not parse line $.: $_\n";
    next;
}

my ($ip, $date, $method, $url, $ret_code, $size) = ($1, $2, $3, $4, $5, $6);

my ($referer, $agent) = ($7 eq "") ? ("<unknown>", "<unknown>") :
  $7 =~ /"(.*)" "(.*)"/;

$FIRST_DATE = $date unless ( defined $FIRST_DATE );
$LAST_DATE = $date;

next unless ($method eq "GET" and $ret_code eq "200");

next if ($agent =~ /$BOTS/ || $ip =~ /$BOT_IP_ADDR/);
print "bot line: $_\n" if ($agent =~ /bot|spider|crawler/i or $url eq "/robots.txt");

++$ALL_ACCESS;
++$ALL_UNI_ACCESS if ($ip =~ /^141\.35\./);

if ($referer =~ /$SEARCH_ENGINE/)
{
    ($_) = $referer =~ /:\/\/([\w\.-]+)\.\w+\.?\//;
    $_ = $1 if (/(.*)\.com?$/);
    /([^\.]+)$/;
    ++$SEARCH_ENGINE_REFS{$1};
}
elsif ($referer !~ /^(?:<unknown>|-)$|uni-skripten?\.lug-jena|\.minet\.uni-jena\.de\/(?:~|%7[eE])joergs\//)
{
    ++$REFERER{$referer};
}

if ($url =~ /\/([^\/]*)\.pdf$/)
{
    my $skript = $1;
    ++$PDF_ACCESS{$skript};
    ++$PDF_UNI_ACCESS{$skript} if ($ip =~ /^141\.35\./);
    ++$PDF_GOOGLE_ACCESS{$skript} if ($referer =~ /^http:\/\/www\.google/);
}

if ($url =~ /\/([^\/]*)\.ps$/)
{
    my $skript = $1;
    ++$PS_ACCESS{$skript};
    ++$PS_UNI_ACCESS{$skript} if ($ip =~ /^141\.35\./);
    ++$PS_GOOGLE_ACCESS{$skript} if ($referer =~ /^http:\/\/www\.google/);
}

if ($url =~ /\/([^\/]*)\.tgz$/)
{
    my $skript = $1;
    ++$TGZ_ACCESS{$skript};
    ++$TGZ_UNI_ACCESS{$skript} if ($ip =~ /^141\.35\./);
    ++$TGZ_GOOGLE_ACCESS{$skript} if ($referer =~ /^http:\/\/www\.google/);
}

# print "$_\n" foreach ($ip, $date, $method, $url, $ret_code, $size, $referer, $agent);
# print "\n";
