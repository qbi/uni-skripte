#!/bin/sh

exec >/tmp/joergs.$$.post 2>&1
set -x

set -e -u

# POST-COMMIT HOOK
#
# The post-commit hook is invoked after a commit.  Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-commit' (for which this file is a template) with the 
# following ordered arguments:
#
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REV          (the number of the revision just committed)
#
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
#
# Because the commit has already completed and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to help it examine the
# newly-committed tree.
#
# On a Unix system, the normal procedure is to have 'post-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
#
# Note that 'post-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
#
# On a Windows system, you should name the hook program
# 'post-commit.bat' or 'post-commit.exe',
# but the basic idea is the same.
# 
# Here is an example hook script, for a Unix /bin/sh interpreter:

WEB=/home/stud/md01/joergs/.www/skripte
REPOS="$1"
REV="$2"

# Damit svnlook log und commit-email.pl die Ausgabe nicht verstÃ¼mmeln
export LANG=de_DE.UTF-8

# find "$REPOS/db/" "$REPOS/locks" -mindepth 1 -not -name fs-type -not -perm -666 -exec chmod go+rw {} \;
#chmod go+w "$REPOS/db/current" "$REPOS/locks/"*
#chmod go+w "$REPOS/db/revs/$REV" "$REPOS/db/revprops/$REV"

update_skript()
{
    skript="$1"
    log=$WEB/"$skript".Build.log
    set -u
    tmp=$(mktemp)

    svnlook cat /home/stud/md01/joergs/.svnroot/skripte \
      werkzeuge/erzeuge-ausgabe.sh > $tmp
    cd /
    rm --force "$log"
    nice -n 4 env PATH="/usr/local/texlive/bin/i386-linux:/home/stud/md01/joergs/xindy/bin:$PATH" \
      sh $tmp "$skript" "$WEB" > "$log" 2>&1
    rm $tmp

    mail -a "Reply-To: skripte@listserv.uni-jena.de" \
      -s "[$skript] r$REV build" skripte-commit@listserv.uni-jena.de \
      -- -f $(id -nu)@minet.uni-jena.de < $log
}

skript=$(svnlook dirs-changed "$REPOS" --revision "$REV" | sed 's+/.*++; /^$/d; q')

/usr/lib/subversion/hook-scripts/commit-email.pl "$REPOS" "$REV" \
  -r skripte@listserv.uni-jena.de -s "[$skript]" -h minet.uni-jena.de \
  skripte-commit@listserv.uni-jena.de

case "$skript" in
  web)
    rm -f $WEB/"$skript".Changelog $WEB/"$skript".Author $WEB/"$skript".Date
    svnlook log "$REPOS" --revision "$REV" > $WEB/"$skript".Changelog
    svnlook author "$REPOS" --revision "$REV" > $WEB/"$skript".Author
    svnlook date "$REPOS" --revision "$REV" > $WEB/"$skript".Date
    ;;
  *-*)
    # create Changelog
    rm -f $WEB/"$skript".Changelog
    svnlook log "$REPOS" --revision "$REV" > $WEB/"$skript".Changelog

    update_skript "$skript" &
    ;;
esac

svnlook changed "$REPOS" --revision "$REV" | while read action file; do
    : $action $file
    case "$file" in
      web/*)
        case "$action" in
          [AU]*)
            case "$file" in
              */) mkdir "$WEB/$file";;
              *) svn export --revision "$REV" file://"$REPOS/$file" "$WEB/${file#web/}";;
            esac
            chmod go+w "$WEB/$file"
            ;;
          D*)
            case "$file" in
              */) rmdir "$WEB/$file";;
              *) rm --force "$WEB/$file";;
            esac
            ;;
#          _U) ;; # SVN property update
        esac
        ;;
      */*/) ;; # dummy to case the case of a subdirectory
      */)
        # A Skript was added or deleted
        case "$action" in
          A*) echo "${file%/}" >> $WEB/available_skripte;;
          D*) sed --in-place "/^${file%/}\>/d" $WEB/available_skripte
              rm -f $WEB/"${file%/}".*
              ;;
        esac
        ;;
    esac
done
