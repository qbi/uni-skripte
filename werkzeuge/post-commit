#!/bin/sh

exec >/tmp/joergs-"$2".$$.post 2>&1
set -x

set -e -u

# POST-COMMIT HOOK
#
# The post-commit hook is invoked after a commit.  Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-commit' (for which this file is a template) with the 
# following ordered arguments:
#
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REV          (the number of the revision just committed)
#
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
#
# Because the commit has already completed and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to help it examine the
# newly-committed tree.
#
# On a Unix system, the normal procedure is to have 'post-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
#
# Note that 'post-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
#
# On a Windows system, you should name the hook program
# 'post-commit.bat' or 'post-commit.exe',
# but the basic idea is the same.
# 
# Here is an example hook script, for a Unix /bin/sh interpreter:

WEB=/home/stud/md01/joergs/.www/skripte
REPOS="$1"
REV="$2"
give_away=/home/stud/md01/joergs/give_away

# Damit svnlook log und commit-email.pl die Ausgabe nicht verstümmeln
export LANG=de_DE.UTF-8

update_skript()
{
    skript="$1"
    log=$WEB/"$skript".Build.log
    set -u
    tmp=$(mktemp)

    svnlook cat /home/stud/md01/joergs/.svnroot/skripte \
      werkzeuge/erzeuge-ausgabe.sh > $tmp
    cd /
    rm --force "$log"
    nice -n 4 env -i PATH="/mnt/local/joergs/texlive/bin/i386-linux:/home/stud/md01/joergs/xindy/bin:$PATH" \
      sh $tmp "$skript" "$WEB" > "$log" 2>&1
    rm $tmp

    $give_away "$log" $WEB/"$skript".pdf $WEB/"$skript".ps $WEB/"$skript".tgz

    mail -a "Reply-To: skripte@listserv.uni-jena.de" \
      -s "[$skript] r$REV build" skripte-commit@listserv.uni-jena.de \
      -- -f $(id -nu)@minet.uni-jena.de < $log
}

$give_away "$REPOS/db/revprops/$REV" "$REPOS/db/revs/$REV"

sleep 300
last_rev_number=$(svnlook history "$REPOS" | sed '3!d; s/ *//; s/ .*$//')
if test "$REV" != "$last_rev_number"
then
    # Es gab in der Zwischenzeit weitere Commits. Wir machen nichts. Der
    # letzte Commit übernimmt die Arbeit.
    exit 0
fi

last_build_revision=$(cat "$WEB"/last_build_revision)

tmp_dir=$(mktemp -d)
trap "rm -r $tmp_dir" EXIT

for REV in $(seq $last_build_revision $last_rev_number)
do
    skript=$(svnlook dirs-changed "$REPOS" --revision "$REV" | sed 's+/.*++; /^$/d; q')

    /usr/share/subversion/hook-scripts/commit-email.pl "$REPOS" "$REV" \
      -h minet.uni-jena.de -l "$tmp_dir/$skript.log"

    svnlook changed "$REPOS" --revision "$REV" | while read action file; do
        : $action $file
        case "$file" in
          web/*)
            case "$action" in
              [AU]*)
                case "$file" in
                  */) mkdir "$WEB/$file";;
                  *) svn export --revision "$REV" file://"$REPOS/$file" "$WEB/${file#web/}"
                    $give_away "$WEB/${file#web/}"
                    ;;
                esac
                ;;
              D*)
                case "$file" in
                  */) rmdir "$WEB/$file";;
                  *) rm --force "$WEB/$file";;
                esac
                ;;
    #          _U) ;; # SVN property update
            esac
            ;;
          */*/) ;; # dummy to case the case of a subdirectory
          */)
            # A Skript was added or deleted
            case "$action" in
              A*) echo "${file%/}" >> $WEB/available_skripte;;
              D*) sed --in-place "/^${file%/}\>/d" $WEB/available_skripte
                  rm -f $WEB/"${file%/}".*
                  ;;
            esac
            ;;
        esac
    done
done

for log in "$tmp_dir"/*
do
    skript=$(basename "$log" .log)

    boundary='skripte--1234-abcd'
    rev_range=$(grep '^New Revision: ' "$log" |
      sed -n '1h; ${H; g; s/New Revision: //g; s/\n/:/; p;}')
    REV="${rev_range#*:}"

    sendmail -f $(id -nu)@minet.uni-jena.de \
      skripte-commit@listserv.uni-jena.de <<__EOF
To: skripte-commit@listserv.uni-jena.de
From: $(id -nu)@minet.uni-jena.de
Reply-To: skripte@listserv.uni-jena.de
Subject: [$skript] r$rev_range -- diff
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="$boundary"
Content-Disposition: inline

$(LANG=C sed '/^To: $/,/^$/c--'"$boundary"'\n\
Content-Type: text/plain; charset=UTF-8\n\
Content-Transfer-Encoding: 8bit\n' "$log")
--$boundary--
__EOF

    case "$skript" in
      web)
        rm -f $WEB/"$skript".Changelog $WEB/"$skript".Author $WEB/"$skript".Date
        svnlook log "$REPOS" --revision "$REV" > $WEB/"$skript".Changelog
        svnlook author "$REPOS" --revision "$REV" > $WEB/"$skript".Author
        svnlook date "$REPOS" --revision "$REV" > $WEB/"$skript".Date

        $give_away $WEB/"$skript".Changelog $WEB/"$skript".Author \
            $WEB/"$skript".Date
        ;;
      *-*)
        # create Changelog
        rm -f $WEB/"$skript".Changelog
        svnlook log "$REPOS" --revision "$REV" > $WEB/"$skript".Changelog
        $give_away $WEB/"$skript".Changelog

        update_skript "$skript" &
        ;;
    esac
done

rm -f "$WEB"/last_build_revision
echo $last_rev_number > "$WEB"/last_build_revision
$give_away "$WEB"/last_build_revision
